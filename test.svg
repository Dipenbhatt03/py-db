<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="538" onload="init(evt)" viewBox="0 0 1200 538" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="538" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o test.svg python test_bulk_insertion.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="527.00"> </text><svg id="frames" x="10" width="1180" total_samples="397"><g><title>offset_for_a_new_row (table.py:102) (1 samples, 0.25%)</title><rect x="1.2594%" y="276" width="0.2519%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="1"/><text x="1.5094%" y="286.50"></text></g><g><title>__init__ (row.py:22) (1 samples, 0.25%)</title><rect x="2.2670%" y="292" width="0.2519%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="1"/><text x="2.5170%" y="302.50"></text></g><g><title>validate_val (row.py:55) (2 samples, 0.50%)</title><rect x="2.7708%" y="308" width="0.5038%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="2"/><text x="3.0208%" y="318.50"></text></g><g><title>validate_val (row.py:58) (1 samples, 0.25%)</title><rect x="3.2746%" y="308" width="0.2519%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="1"/><text x="3.5246%" y="318.50"></text></g><g><title>offset_for_a_new_row (table.py:110) (9 samples, 2.27%)</title><rect x="1.5113%" y="276" width="2.2670%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="9"/><text x="1.7613%" y="286.50">o..</text></g><g><title>__init__ (row.py:23) (5 samples, 1.26%)</title><rect x="2.5189%" y="292" width="1.2594%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="5"/><text x="2.7689%" y="302.50"></text></g><g><title>validate_val (row.py:59) (1 samples, 0.25%)</title><rect x="3.5264%" y="308" width="0.2519%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="1"/><text x="3.7764%" y="318.50"></text></g><g><title>size (row.py:198) (1 samples, 0.25%)</title><rect x="5.0378%" y="292" width="0.2519%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="1"/><text x="5.2878%" y="302.50"></text></g><g><title>size (row.py:201) (1 samples, 0.25%)</title><rect x="5.2897%" y="292" width="0.2519%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="1"/><text x="5.5397%" y="302.50"></text></g><g><title>insert (table.py:77) (22 samples, 5.54%)</title><rect x="0.2519%" y="260" width="5.5416%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="22"/><text x="0.5019%" y="270.50">insert ..</text></g><g><title>offset_for_a_new_row (table.py:111) (8 samples, 2.02%)</title><rect x="3.7783%" y="276" width="2.0151%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="8"/><text x="4.0283%" y="286.50">o..</text></g><g><title>size (row.py:203) (1 samples, 0.25%)</title><rect x="5.5416%" y="292" width="0.2519%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="1"/><text x="5.7916%" y="302.50"></text></g><g><title>insert (table.py:79) (3 samples, 0.76%)</title><rect x="5.7935%" y="260" width="0.7557%" height="15" fill="rgb(216,20,37)" fg:x="23" fg:w="3"/><text x="6.0435%" y="270.50"></text></g><g><title>insert (table.py:81) (2 samples, 0.50%)</title><rect x="6.5491%" y="260" width="0.5038%" height="15" fill="rgb(206,188,39)" fg:x="26" fg:w="2"/><text x="6.7991%" y="270.50"></text></g><g><title>cast (typing.py:2256) (1 samples, 0.25%)</title><rect x="6.8010%" y="276" width="0.2519%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="1"/><text x="7.0510%" y="286.50"></text></g><g><title>insert (binary_tree.py:153) (1 samples, 0.25%)</title><rect x="7.5567%" y="276" width="0.2519%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="1"/><text x="7.8067%" y="286.50"></text></g><g><title>__repr__ (row.py:168) (1 samples, 0.25%)</title><rect x="9.0680%" y="292" width="0.2519%" height="15" fill="rgb(225,20,46)" fg:x="36" fg:w="1"/><text x="9.3180%" y="302.50"></text></g><g><title>__repr__ (row.py:169) (18 samples, 4.53%)</title><rect x="9.3199%" y="292" width="4.5340%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="18"/><text x="9.5699%" y="302.50">__rep..</text></g><g><title>__str__ (row.py:26) (4 samples, 1.01%)</title><rect x="12.8463%" y="308" width="1.0076%" height="15" fill="rgb(221,200,47)" fg:x="51" fg:w="4"/><text x="13.0963%" y="318.50"></text></g><g><title>insert (binary_tree.py:155) (27 samples, 6.80%)</title><rect x="7.8086%" y="276" width="6.8010%" height="15" fill="rgb(226,26,5)" fg:x="31" fg:w="27"/><text x="8.0586%" y="286.50">insert (b..</text></g><g><title>debug (logging/__init__.py:1476) (3 samples, 0.76%)</title><rect x="13.8539%" y="292" width="0.7557%" height="15" fill="rgb(249,33,26)" fg:x="55" fg:w="3"/><text x="14.1039%" y="302.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1741) (1 samples, 0.25%)</title><rect x="14.3577%" y="308" width="0.2519%" height="15" fill="rgb(235,183,28)" fg:x="57" fg:w="1"/><text x="14.6077%" y="318.50"></text></g><g><title>insert (binary_tree.py:153) (1 samples, 0.25%)</title><rect x="14.8615%" y="292" width="0.2519%" height="15" fill="rgb(221,5,38)" fg:x="59" fg:w="1"/><text x="15.1115%" y="302.50"></text></g><g><title>__repr__ (row.py:168) (1 samples, 0.25%)</title><rect x="16.1209%" y="308" width="0.2519%" height="15" fill="rgb(247,18,42)" fg:x="64" fg:w="1"/><text x="16.3709%" y="318.50"></text></g><g><title>__str__ (row.py:25) (2 samples, 0.50%)</title><rect x="17.6322%" y="324" width="0.5038%" height="15" fill="rgb(241,131,45)" fg:x="70" fg:w="2"/><text x="17.8822%" y="334.50"></text></g><g><title>__repr__ (row.py:169) (11 samples, 2.77%)</title><rect x="16.3728%" y="308" width="2.7708%" height="15" fill="rgb(249,31,29)" fg:x="65" fg:w="11"/><text x="16.6228%" y="318.50">__..</text></g><g><title>__str__ (row.py:26) (4 samples, 1.01%)</title><rect x="18.1360%" y="324" width="1.0076%" height="15" fill="rgb(225,111,53)" fg:x="72" fg:w="4"/><text x="18.3860%" y="334.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1734) (1 samples, 0.25%)</title><rect x="19.3955%" y="324" width="0.2519%" height="15" fill="rgb(238,160,17)" fg:x="77" fg:w="1"/><text x="19.6455%" y="334.50"></text></g><g><title>insert (binary_tree.py:155) (20 samples, 5.04%)</title><rect x="15.1134%" y="292" width="5.0378%" height="15" fill="rgb(214,148,48)" fg:x="60" fg:w="20"/><text x="15.3634%" y="302.50">insert..</text></g><g><title>debug (logging/__init__.py:1476) (4 samples, 1.01%)</title><rect x="19.1436%" y="308" width="1.0076%" height="15" fill="rgb(232,36,49)" fg:x="76" fg:w="4"/><text x="19.3936%" y="318.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1738) (2 samples, 0.50%)</title><rect x="19.6474%" y="324" width="0.5038%" height="15" fill="rgb(209,103,24)" fg:x="78" fg:w="2"/><text x="19.8974%" y="334.50"></text></g><g><title>insert (binary_tree.py:155) (8 samples, 2.02%)</title><rect x="20.1511%" y="308" width="2.0151%" height="15" fill="rgb(229,88,8)" fg:x="80" fg:w="8"/><text x="20.4011%" y="318.50">i..</text></g><g><title>__repr__ (row.py:169) (4 samples, 1.01%)</title><rect x="21.1587%" y="324" width="1.0076%" height="15" fill="rgb(213,181,19)" fg:x="84" fg:w="4"/><text x="21.4087%" y="334.50"></text></g><g><title>__str__ (row.py:26) (2 samples, 0.50%)</title><rect x="21.6625%" y="340" width="0.5038%" height="15" fill="rgb(254,191,54)" fg:x="86" fg:w="2"/><text x="21.9125%" y="350.50"></text></g><g><title>__repr__ (row.py:169) (6 samples, 1.51%)</title><rect x="22.1662%" y="340" width="1.5113%" height="15" fill="rgb(241,83,37)" fg:x="88" fg:w="6"/><text x="22.4162%" y="350.50"></text></g><g><title>__str__ (row.py:26) (5 samples, 1.26%)</title><rect x="22.4181%" y="356" width="1.2594%" height="15" fill="rgb(233,36,39)" fg:x="89" fg:w="5"/><text x="22.6681%" y="366.50"></text></g><g><title>insert (binary_tree.py:155) (7 samples, 1.76%)</title><rect x="22.1662%" y="324" width="1.7632%" height="15" fill="rgb(226,3,54)" fg:x="88" fg:w="7"/><text x="22.4162%" y="334.50"></text></g><g><title>debug (logging/__init__.py:1476) (1 samples, 0.25%)</title><rect x="23.6776%" y="340" width="0.2519%" height="15" fill="rgb(245,192,40)" fg:x="94" fg:w="1"/><text x="23.9276%" y="350.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1739) (1 samples, 0.25%)</title><rect x="23.6776%" y="356" width="0.2519%" height="15" fill="rgb(238,167,29)" fg:x="94" fg:w="1"/><text x="23.9276%" y="366.50"></text></g><g><title>__repr__ (row.py:168) (1 samples, 0.25%)</title><rect x="25.1889%" y="356" width="0.2519%" height="15" fill="rgb(232,182,51)" fg:x="100" fg:w="1"/><text x="25.4389%" y="366.50"></text></g><g><title>__str__ (row.py:25) (1 samples, 0.25%)</title><rect x="26.1965%" y="372" width="0.2519%" height="15" fill="rgb(231,60,39)" fg:x="104" fg:w="1"/><text x="26.4465%" y="382.50"></text></g><g><title>__repr__ (row.py:169) (5 samples, 1.26%)</title><rect x="25.4408%" y="356" width="1.2594%" height="15" fill="rgb(208,69,12)" fg:x="101" fg:w="5"/><text x="25.6908%" y="366.50"></text></g><g><title>__str__ (row.py:26) (1 samples, 0.25%)</title><rect x="26.4484%" y="372" width="0.2519%" height="15" fill="rgb(235,93,37)" fg:x="105" fg:w="1"/><text x="26.6984%" y="382.50"></text></g><g><title>insert (binary_tree.py:155) (10 samples, 2.52%)</title><rect x="24.4332%" y="340" width="2.5189%" height="15" fill="rgb(213,116,39)" fg:x="97" fg:w="10"/><text x="24.6832%" y="350.50">in..</text></g><g><title>debug (logging/__init__.py:1467) (1 samples, 0.25%)</title><rect x="26.7003%" y="356" width="0.2519%" height="15" fill="rgb(222,207,29)" fg:x="106" fg:w="1"/><text x="26.9503%" y="366.50"></text></g><g><title>insert (binary_tree.py:161) (1 samples, 0.25%)</title><rect x="26.9521%" y="340" width="0.2519%" height="15" fill="rgb(206,96,30)" fg:x="107" fg:w="1"/><text x="27.2021%" y="350.50"></text></g><g><title>__str__ (row.py:25) (2 samples, 0.50%)</title><rect x="28.7154%" y="388" width="0.5038%" height="15" fill="rgb(218,138,4)" fg:x="114" fg:w="2"/><text x="28.9654%" y="398.50"></text></g><g><title>insert (binary_tree.py:155) (12 samples, 3.02%)</title><rect x="27.2040%" y="356" width="3.0227%" height="15" fill="rgb(250,191,14)" fg:x="108" fg:w="12"/><text x="27.4540%" y="366.50">ins..</text></g><g><title>__repr__ (row.py:169) (11 samples, 2.77%)</title><rect x="27.4559%" y="372" width="2.7708%" height="15" fill="rgb(239,60,40)" fg:x="109" fg:w="11"/><text x="27.7059%" y="382.50">__..</text></g><g><title>__str__ (row.py:26) (4 samples, 1.01%)</title><rect x="29.2191%" y="388" width="1.0076%" height="15" fill="rgb(206,27,48)" fg:x="116" fg:w="4"/><text x="29.4691%" y="398.50"></text></g><g><title>insert (binary_tree.py:161) (1 samples, 0.25%)</title><rect x="30.2267%" y="356" width="0.2519%" height="15" fill="rgb(225,35,8)" fg:x="120" fg:w="1"/><text x="30.4767%" y="366.50"></text></g><g><title>insert (binary_tree.py:153) (1 samples, 0.25%)</title><rect x="30.4786%" y="372" width="0.2519%" height="15" fill="rgb(250,213,24)" fg:x="121" fg:w="1"/><text x="30.7286%" y="382.50"></text></g><g><title>__repr__ (row.py:169) (7 samples, 1.76%)</title><rect x="31.7380%" y="388" width="1.7632%" height="15" fill="rgb(247,123,22)" fg:x="126" fg:w="7"/><text x="31.9880%" y="398.50"></text></g><g><title>__str__ (row.py:26) (2 samples, 0.50%)</title><rect x="32.9975%" y="404" width="0.5038%" height="15" fill="rgb(231,138,38)" fg:x="131" fg:w="2"/><text x="33.2475%" y="414.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1738) (1 samples, 0.25%)</title><rect x="33.5013%" y="404" width="0.2519%" height="15" fill="rgb(231,145,46)" fg:x="133" fg:w="1"/><text x="33.7513%" y="414.50"></text></g><g><title>insert (binary_tree.py:155) (13 samples, 3.27%)</title><rect x="30.7305%" y="372" width="3.2746%" height="15" fill="rgb(251,118,11)" fg:x="122" fg:w="13"/><text x="30.9805%" y="382.50">ins..</text></g><g><title>debug (logging/__init__.py:1476) (2 samples, 0.50%)</title><rect x="33.5013%" y="388" width="0.5038%" height="15" fill="rgb(217,147,25)" fg:x="133" fg:w="2"/><text x="33.7513%" y="398.50"></text></g><g><title>isEnabledFor (logging/__init__.py:1742) (1 samples, 0.25%)</title><rect x="33.7531%" y="404" width="0.2519%" height="15" fill="rgb(247,81,37)" fg:x="134" fg:w="1"/><text x="34.0031%" y="414.50"></text></g><g><title>insert (binary_tree.py:161) (1 samples, 0.25%)</title><rect x="34.0050%" y="372" width="0.2519%" height="15" fill="rgb(209,12,38)" fg:x="135" fg:w="1"/><text x="34.2550%" y="382.50"></text></g><g><title>insert (binary_tree.py:155) (7 samples, 1.76%)</title><rect x="34.2569%" y="388" width="1.7632%" height="15" fill="rgb(227,1,9)" fg:x="136" fg:w="7"/><text x="34.5069%" y="398.50"></text></g><g><title>__repr__ (row.py:169) (3 samples, 0.76%)</title><rect x="35.2645%" y="404" width="0.7557%" height="15" fill="rgb(248,47,43)" fg:x="140" fg:w="3"/><text x="35.5145%" y="414.50"></text></g><g><title>__str__ (row.py:26) (1 samples, 0.25%)</title><rect x="35.7683%" y="420" width="0.2519%" height="15" fill="rgb(221,10,30)" fg:x="142" fg:w="1"/><text x="36.0183%" y="430.50"></text></g><g><title>__repr__ (row.py:168) (1 samples, 0.25%)</title><rect x="36.5239%" y="420" width="0.2519%" height="15" fill="rgb(210,229,1)" fg:x="145" fg:w="1"/><text x="36.7739%" y="430.50"></text></g><g><title>__str__ (row.py:25) (1 samples, 0.25%)</title><rect x="37.0277%" y="436" width="0.2519%" height="15" fill="rgb(222,148,37)" fg:x="147" fg:w="1"/><text x="37.2777%" y="446.50"></text></g><g><title>insert (binary_tree.py:155) (6 samples, 1.51%)</title><rect x="36.0202%" y="404" width="1.5113%" height="15" fill="rgb(234,67,33)" fg:x="143" fg:w="6"/><text x="36.2702%" y="414.50"></text></g><g><title>__repr__ (row.py:169) (3 samples, 0.76%)</title><rect x="36.7758%" y="420" width="0.7557%" height="15" fill="rgb(247,98,35)" fg:x="146" fg:w="3"/><text x="37.0258%" y="430.50"></text></g><g><title>__str__ (row.py:26) (1 samples, 0.25%)</title><rect x="37.2796%" y="436" width="0.2519%" height="15" fill="rgb(247,138,52)" fg:x="148" fg:w="1"/><text x="37.5296%" y="446.50"></text></g><g><title>insert (binary_tree.py:161) (1 samples, 0.25%)</title><rect x="37.5315%" y="404" width="0.2519%" height="15" fill="rgb(213,79,30)" fg:x="149" fg:w="1"/><text x="37.7815%" y="414.50"></text></g><g><title>__repr__ (row.py:168) (1 samples, 0.25%)</title><rect x="38.0353%" y="436" width="0.2519%" height="15" fill="rgb(246,177,23)" fg:x="151" fg:w="1"/><text x="38.2853%" y="446.50"></text></g><g><title>insert (binary_tree.py:155) (10 samples, 2.52%)</title><rect x="37.7834%" y="420" width="2.5189%" height="15" fill="rgb(230,62,27)" fg:x="150" fg:w="10"/><text x="38.0334%" y="430.50">in..</text></g><g><title>__repr__ (row.py:169) (8 samples, 2.02%)</title><rect x="38.2872%" y="436" width="2.0151%" height="15" fill="rgb(216,154,8)" fg:x="152" fg:w="8"/><text x="38.5372%" y="446.50">_..</text></g><g><title>insert (binary_tree.py:153) (1 samples, 0.25%)</title><rect x="40.3023%" y="436" width="0.2519%" height="15" fill="rgb(244,35,45)" fg:x="160" fg:w="1"/><text x="40.5523%" y="446.50"></text></g><g><title>insert (binary_tree.py:155) (5 samples, 1.26%)</title><rect x="40.5542%" y="436" width="1.2594%" height="15" fill="rgb(251,115,12)" fg:x="161" fg:w="5"/><text x="40.8042%" y="446.50"></text></g><g><title>__repr__ (row.py:169) (5 samples, 1.26%)</title><rect x="40.5542%" y="452" width="1.2594%" height="15" fill="rgb(240,54,50)" fg:x="161" fg:w="5"/><text x="40.8042%" y="462.50"></text></g><g><title>__str__ (row.py:26) (1 samples, 0.25%)</title><rect x="41.5617%" y="468" width="0.2519%" height="15" fill="rgb(233,84,52)" fg:x="165" fg:w="1"/><text x="41.8117%" y="478.50"></text></g><g><title>insert (binary_tree.py:153) (1 samples, 0.25%)</title><rect x="41.8136%" y="452" width="0.2519%" height="15" fill="rgb(207,117,47)" fg:x="166" fg:w="1"/><text x="42.0636%" y="462.50"></text></g><g><title>insert (binary_tree.py:155) (1 samples, 0.25%)</title><rect x="42.0655%" y="452" width="0.2519%" height="15" fill="rgb(249,43,39)" fg:x="167" fg:w="1"/><text x="42.3155%" y="462.50"></text></g><g><title>__repr__ (row.py:169) (1 samples, 0.25%)</title><rect x="42.0655%" y="468" width="0.2519%" height="15" fill="rgb(209,38,44)" fg:x="167" fg:w="1"/><text x="42.3155%" y="478.50"></text></g><g><title>insert (binary_tree.py:155) (2 samples, 0.50%)</title><rect x="42.3174%" y="468" width="0.5038%" height="15" fill="rgb(236,212,23)" fg:x="168" fg:w="2"/><text x="42.5674%" y="478.50"></text></g><g><title>__repr__ (row.py:169) (1 samples, 0.25%)</title><rect x="42.5693%" y="484" width="0.2519%" height="15" fill="rgb(242,79,21)" fg:x="169" fg:w="1"/><text x="42.8193%" y="494.50"></text></g><g><title>insert (binary_tree.py:159) (2 samples, 0.50%)</title><rect x="42.8212%" y="484" width="0.5038%" height="15" fill="rgb(211,96,35)" fg:x="170" fg:w="2"/><text x="43.0712%" y="494.50"></text></g><g><title>__hash__ (row.py:173) (2 samples, 0.50%)</title><rect x="42.8212%" y="500" width="0.5038%" height="15" fill="rgb(253,215,40)" fg:x="170" fg:w="2"/><text x="43.0712%" y="510.50"></text></g><g><title>insert (binary_tree.py:171) (1 samples, 0.25%)</title><rect x="43.3249%" y="484" width="0.2519%" height="15" fill="rgb(211,81,21)" fg:x="172" fg:w="1"/><text x="43.5749%" y="494.50"></text></g><g><title>insert (binary_tree.py:170) (4 samples, 1.01%)</title><rect x="42.8212%" y="468" width="1.0076%" height="15" fill="rgb(208,190,38)" fg:x="170" fg:w="4"/><text x="43.0712%" y="478.50"></text></g><g><title>insert (binary_tree.py:176) (1 samples, 0.25%)</title><rect x="43.5768%" y="484" width="0.2519%" height="15" fill="rgb(235,213,38)" fg:x="173" fg:w="1"/><text x="43.8268%" y="494.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="43.5768%" y="500" width="0.2519%" height="15" fill="rgb(237,122,38)" fg:x="173" fg:w="1"/><text x="43.8268%" y="510.50"></text></g><g><title>insert (binary_tree.py:170) (8 samples, 2.02%)</title><rect x="42.3174%" y="452" width="2.0151%" height="15" fill="rgb(244,218,35)" fg:x="168" fg:w="8"/><text x="42.5674%" y="462.50">i..</text></g><g><title>insert (binary_tree.py:176) (2 samples, 0.50%)</title><rect x="43.8287%" y="468" width="0.5038%" height="15" fill="rgb(240,68,47)" fg:x="174" fg:w="2"/><text x="44.0787%" y="478.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="44.0806%" y="484" width="0.2519%" height="15" fill="rgb(210,16,53)" fg:x="175" fg:w="1"/><text x="44.3306%" y="494.50"></text></g><g><title>validate_val (row.py:85) (1 samples, 0.25%)</title><rect x="44.0806%" y="500" width="0.2519%" height="15" fill="rgb(235,124,12)" fg:x="175" fg:w="1"/><text x="44.3306%" y="510.50"></text></g><g><title>insert (binary_tree.py:174) (1 samples, 0.25%)</title><rect x="44.3325%" y="452" width="0.2519%" height="15" fill="rgb(224,169,11)" fg:x="176" fg:w="1"/><text x="44.5825%" y="462.50"></text></g><g><title>insert (binary_tree.py:170) (12 samples, 3.02%)</title><rect x="41.8136%" y="436" width="3.0227%" height="15" fill="rgb(250,166,2)" fg:x="166" fg:w="12"/><text x="42.0636%" y="446.50">ins..</text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="44.5844%" y="452" width="0.2519%" height="15" fill="rgb(242,216,29)" fg:x="177" fg:w="1"/><text x="44.8344%" y="462.50"></text></g><g><title>insert (binary_tree.py:176) (1 samples, 0.25%)</title><rect x="44.8363%" y="436" width="0.2519%" height="15" fill="rgb(230,116,27)" fg:x="178" fg:w="1"/><text x="45.0863%" y="446.50"></text></g><g><title>right_subtree_height (row.py:196) (1 samples, 0.25%)</title><rect x="44.8363%" y="452" width="0.2519%" height="15" fill="rgb(228,99,48)" fg:x="178" fg:w="1"/><text x="45.0863%" y="462.50"></text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="44.8363%" y="468" width="0.2519%" height="15" fill="rgb(253,11,6)" fg:x="178" fg:w="1"/><text x="45.0863%" y="478.50"></text></g><g><title>left_subtree_height (row.py:192) (1 samples, 0.25%)</title><rect x="45.0882%" y="452" width="0.2519%" height="15" fill="rgb(247,143,39)" fg:x="179" fg:w="1"/><text x="45.3382%" y="462.50"></text></g><g><title>insert (binary_tree.py:170) (31 samples, 7.81%)</title><rect x="37.7834%" y="404" width="7.8086%" height="15" fill="rgb(236,97,10)" fg:x="150" fg:w="31"/><text x="38.0334%" y="414.50">insert (bin..</text></g><g><title>insert (binary_tree.py:170) (21 samples, 5.29%)</title><rect x="40.3023%" y="420" width="5.2897%" height="15" fill="rgb(233,208,19)" fg:x="160" fg:w="21"/><text x="40.5523%" y="430.50">insert..</text></g><g><title>insert (binary_tree.py:178) (2 samples, 0.50%)</title><rect x="45.0882%" y="436" width="0.5038%" height="15" fill="rgb(216,164,2)" fg:x="179" fg:w="2"/><text x="45.3382%" y="446.50"></text></g><g><title>right_subtree_height (row.py:196) (1 samples, 0.25%)</title><rect x="45.3401%" y="452" width="0.2519%" height="15" fill="rgb(220,129,5)" fg:x="180" fg:w="1"/><text x="45.5901%" y="462.50"></text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="45.3401%" y="468" width="0.2519%" height="15" fill="rgb(242,17,10)" fg:x="180" fg:w="1"/><text x="45.5901%" y="478.50"></text></g><g><title>get_row (table.py:47) (1 samples, 0.25%)</title><rect x="45.3401%" y="484" width="0.2519%" height="15" fill="rgb(242,107,0)" fg:x="180" fg:w="1"/><text x="45.5901%" y="494.50"></text></g><g><title>insert (binary_tree.py:170) (39 samples, 9.82%)</title><rect x="36.0202%" y="388" width="9.8237%" height="15" fill="rgb(251,28,31)" fg:x="143" fg:w="39"/><text x="36.2702%" y="398.50">insert (binary..</text></g><g><title>insert (binary_tree.py:176) (1 samples, 0.25%)</title><rect x="45.5919%" y="404" width="0.2519%" height="15" fill="rgb(233,223,10)" fg:x="181" fg:w="1"/><text x="45.8419%" y="414.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="45.5919%" y="420" width="0.2519%" height="15" fill="rgb(215,21,27)" fg:x="181" fg:w="1"/><text x="45.8419%" y="430.50"></text></g><g><title>validate_val (row.py:81) (1 samples, 0.25%)</title><rect x="45.5919%" y="436" width="0.2519%" height="15" fill="rgb(232,23,21)" fg:x="181" fg:w="1"/><text x="45.8419%" y="446.50"></text></g><g><title>insert (binary_tree.py:170) (47 samples, 11.84%)</title><rect x="34.2569%" y="372" width="11.8388%" height="15" fill="rgb(244,5,23)" fg:x="136" fg:w="47"/><text x="34.5069%" y="382.50">insert (binary_tre..</text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="45.8438%" y="388" width="0.2519%" height="15" fill="rgb(226,81,46)" fg:x="182" fg:w="1"/><text x="46.0938%" y="398.50"></text></g><g><title>get_row (table.py:42) (1 samples, 0.25%)</title><rect x="45.8438%" y="404" width="0.2519%" height="15" fill="rgb(247,70,30)" fg:x="182" fg:w="1"/><text x="46.0938%" y="414.50"></text></g><g><title>insert (binary_tree.py:170) (63 samples, 15.87%)</title><rect x="30.4786%" y="356" width="15.8690%" height="15" fill="rgb(212,68,19)" fg:x="121" fg:w="63"/><text x="30.7286%" y="366.50">insert (binary_tree.py:1..</text></g><g><title>insert (binary_tree.py:174) (1 samples, 0.25%)</title><rect x="46.0957%" y="372" width="0.2519%" height="15" fill="rgb(240,187,13)" fg:x="183" fg:w="1"/><text x="46.3457%" y="382.50"></text></g><g><title>insert (binary_tree.py:170) (77 samples, 19.40%)</title><rect x="27.2040%" y="340" width="19.3955%" height="15" fill="rgb(223,113,26)" fg:x="108" fg:w="77"/><text x="27.4540%" y="350.50">insert (binary_tree.py:170)</text></g><g><title>insert (binary_tree.py:178) (1 samples, 0.25%)</title><rect x="46.3476%" y="356" width="0.2519%" height="15" fill="rgb(206,192,2)" fg:x="184" fg:w="1"/><text x="46.5976%" y="366.50"></text></g><g><title>left_subtree_height (row.py:192) (1 samples, 0.25%)</title><rect x="46.3476%" y="372" width="0.2519%" height="15" fill="rgb(241,108,4)" fg:x="184" fg:w="1"/><text x="46.5976%" y="382.50"></text></g><g><title>left_child (row.py:186) (1 samples, 0.25%)</title><rect x="46.3476%" y="388" width="0.2519%" height="15" fill="rgb(247,173,49)" fg:x="184" fg:w="1"/><text x="46.5976%" y="398.50"></text></g><g><title>__init__ (row.py:22) (1 samples, 0.25%)</title><rect x="46.5995%" y="356" width="0.2519%" height="15" fill="rgb(224,114,35)" fg:x="185" fg:w="1"/><text x="46.8495%" y="366.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="46.8514%" y="356" width="0.2519%" height="15" fill="rgb(245,159,27)" fg:x="186" fg:w="1"/><text x="47.1014%" y="366.50"></text></g><g><title>validate_val (row.py:84) (1 samples, 0.25%)</title><rect x="46.8514%" y="372" width="0.2519%" height="15" fill="rgb(245,172,44)" fg:x="186" fg:w="1"/><text x="47.1014%" y="382.50"></text></g><g><title>insert (binary_tree.py:176) (3 samples, 0.76%)</title><rect x="46.5995%" y="340" width="0.7557%" height="15" fill="rgb(236,23,11)" fg:x="185" fg:w="3"/><text x="46.8495%" y="350.50"></text></g><g><title>__new__ (row.py:77) (1 samples, 0.25%)</title><rect x="47.1033%" y="356" width="0.2519%" height="15" fill="rgb(205,117,38)" fg:x="187" fg:w="1"/><text x="47.3533%" y="366.50"></text></g><g><title>insert (binary_tree.py:170) (94 samples, 23.68%)</title><rect x="23.9295%" y="324" width="23.6776%" height="15" fill="rgb(237,72,25)" fg:x="95" fg:w="94"/><text x="24.1795%" y="334.50">insert (binary_tree.py:170)</text></g><g><title>right_child (row.py:182) (1 samples, 0.25%)</title><rect x="47.3552%" y="340" width="0.2519%" height="15" fill="rgb(244,70,9)" fg:x="188" fg:w="1"/><text x="47.6052%" y="350.50"></text></g><g><title>insert (binary_tree.py:202) (1 samples, 0.25%)</title><rect x="47.6071%" y="324" width="0.2519%" height="15" fill="rgb(217,125,39)" fg:x="189" fg:w="1"/><text x="47.8571%" y="334.50"></text></g><g><title>insert (binary_tree.py:170) (104 samples, 26.20%)</title><rect x="22.1662%" y="308" width="26.1965%" height="15" fill="rgb(235,36,10)" fg:x="88" fg:w="104"/><text x="22.4162%" y="318.50">insert (binary_tree.py:170)</text></g><g><title>right_child (row.py:184) (2 samples, 0.50%)</title><rect x="47.8589%" y="324" width="0.5038%" height="15" fill="rgb(251,123,47)" fg:x="190" fg:w="2"/><text x="48.1089%" y="334.50"></text></g><g><title>insert (binary_tree.py:178) (1 samples, 0.25%)</title><rect x="48.3627%" y="308" width="0.2519%" height="15" fill="rgb(221,13,13)" fg:x="192" fg:w="1"/><text x="48.6127%" y="318.50"></text></g><g><title>right_subtree_height (row.py:196) (1 samples, 0.25%)</title><rect x="48.3627%" y="324" width="0.2519%" height="15" fill="rgb(238,131,9)" fg:x="192" fg:w="1"/><text x="48.6127%" y="334.50"></text></g><g><title>right_child (row.py:182) (1 samples, 0.25%)</title><rect x="48.3627%" y="340" width="0.2519%" height="15" fill="rgb(211,50,8)" fg:x="192" fg:w="1"/><text x="48.6127%" y="350.50"></text></g><g><title>insert (binary_tree.py:170) (114 samples, 28.72%)</title><rect x="20.1511%" y="292" width="28.7154%" height="15" fill="rgb(245,182,24)" fg:x="80" fg:w="114"/><text x="20.4011%" y="302.50">insert (binary_tree.py:170)</text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="48.6146%" y="308" width="0.2519%" height="15" fill="rgb(242,14,37)" fg:x="193" fg:w="1"/><text x="48.8646%" y="318.50"></text></g><g><title>insert (binary_tree.py:178) (1 samples, 0.25%)</title><rect x="48.8665%" y="292" width="0.2519%" height="15" fill="rgb(246,228,12)" fg:x="194" fg:w="1"/><text x="49.1165%" y="302.50"></text></g><g><title>insert (binary_tree.py:170) (139 samples, 35.01%)</title><rect x="14.6096%" y="276" width="35.0126%" height="15" fill="rgb(213,55,15)" fg:x="58" fg:w="139"/><text x="14.8596%" y="286.50">insert (binary_tree.py:170)</text></g><g><title>right_child (row.py:184) (2 samples, 0.50%)</title><rect x="49.1184%" y="292" width="0.5038%" height="15" fill="rgb(209,9,3)" fg:x="195" fg:w="2"/><text x="49.3684%" y="302.50"></text></g><g><title>get_row (table.py:42) (1 samples, 0.25%)</title><rect x="49.3703%" y="308" width="0.2519%" height="15" fill="rgb(230,59,30)" fg:x="196" fg:w="1"/><text x="49.6203%" y="318.50"></text></g><g><title>insert (table.py:83) (170 samples, 42.82%)</title><rect x="7.0529%" y="260" width="42.8212%" height="15" fill="rgb(209,121,21)" fg:x="28" fg:w="170"/><text x="7.3029%" y="270.50">insert (table.py:83)</text></g><g><title>insert (binary_tree.py:176) (1 samples, 0.25%)</title><rect x="49.6222%" y="276" width="0.2519%" height="15" fill="rgb(220,109,13)" fg:x="197" fg:w="1"/><text x="49.8722%" y="286.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="49.6222%" y="292" width="0.2519%" height="15" fill="rgb(232,18,1)" fg:x="197" fg:w="1"/><text x="49.8722%" y="302.50"></text></g><g><title>validate_val (row.py:80) (1 samples, 0.25%)</title><rect x="49.6222%" y="308" width="0.2519%" height="15" fill="rgb(215,41,42)" fg:x="197" fg:w="1"/><text x="49.8722%" y="318.50"></text></g><g><title>insert (table.py:87) (3 samples, 0.76%)</title><rect x="49.8741%" y="260" width="0.7557%" height="15" fill="rgb(224,123,36)" fg:x="198" fg:w="3"/><text x="50.1241%" y="270.50"></text></g><g><title>flush_rows_to_disk (table.py:64) (22 samples, 5.54%)</title><rect x="50.8816%" y="276" width="5.5416%" height="15" fill="rgb(240,125,3)" fg:x="202" fg:w="22"/><text x="51.1316%" y="286.50">flush_r..</text></g><g><title>seek_db_fd (helper.py:20) (22 samples, 5.54%)</title><rect x="50.8816%" y="292" width="5.5416%" height="15" fill="rgb(205,98,50)" fg:x="202" fg:w="22"/><text x="51.1316%" y="302.50">seek_db..</text></g><g><title>serialize (row.py:210) (1 samples, 0.25%)</title><rect x="56.4232%" y="292" width="0.2519%" height="15" fill="rgb(205,185,37)" fg:x="224" fg:w="1"/><text x="56.6732%" y="302.50"></text></g><g><title>flush_rows_to_disk (table.py:65) (2 samples, 0.50%)</title><rect x="56.4232%" y="276" width="0.5038%" height="15" fill="rgb(238,207,15)" fg:x="224" fg:w="2"/><text x="56.6732%" y="286.50"></text></g><g><title>serialize (row.py:211) (1 samples, 0.25%)</title><rect x="56.6751%" y="292" width="0.2519%" height="15" fill="rgb(213,199,42)" fg:x="225" fg:w="1"/><text x="56.9251%" y="302.50"></text></g><g><title>serialize (row.py:119) (1 samples, 0.25%)</title><rect x="56.6751%" y="308" width="0.2519%" height="15" fill="rgb(235,201,11)" fg:x="225" fg:w="1"/><text x="56.9251%" y="318.50"></text></g><g><title>flush_rows_to_disk (table.py:70) (4 samples, 1.01%)</title><rect x="56.9270%" y="276" width="1.0076%" height="15" fill="rgb(207,46,11)" fg:x="226" fg:w="4"/><text x="57.1770%" y="286.50"></text></g><g><title>seek_db_fd (helper.py:20) (4 samples, 1.01%)</title><rect x="56.9270%" y="292" width="1.0076%" height="15" fill="rgb(241,35,35)" fg:x="226" fg:w="4"/><text x="57.1770%" y="302.50"></text></g><g><title>flush_rows_to_disk (table.py:72) (2 samples, 0.50%)</title><rect x="57.9345%" y="276" width="0.5038%" height="15" fill="rgb(243,32,47)" fg:x="230" fg:w="2"/><text x="58.1845%" y="286.50"></text></g><g><title>serialize (row.py:90) (1 samples, 0.25%)</title><rect x="58.1864%" y="292" width="0.2519%" height="15" fill="rgb(247,202,23)" fg:x="231" fg:w="1"/><text x="58.4364%" y="302.50"></text></g><g><title>insert (table.py:89) (110 samples, 27.71%)</title><rect x="50.6297%" y="260" width="27.7078%" height="15" fill="rgb(219,102,11)" fg:x="201" fg:w="110"/><text x="50.8797%" y="270.50">insert (table.py:89)</text></g><g><title>flush_rows_to_disk (table.py:74) (79 samples, 19.90%)</title><rect x="58.4383%" y="276" width="19.8992%" height="15" fill="rgb(243,110,44)" fg:x="232" fg:w="79"/><text x="58.6883%" y="286.50">flush_rows_to_disk (table.py:74)</text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:34) (317 samples, 79.85%)</title><rect x="0.0000%" y="244" width="79.8489%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="317"/><text x="0.2500%" y="254.50">test_insert_lotta_rows (db/test_bulk_insertion.py:34)</text></g><g><title>insert (table.py:90) (6 samples, 1.51%)</title><rect x="78.3375%" y="260" width="1.5113%" height="15" fill="rgb(216,99,12)" fg:x="311" fg:w="6"/><text x="78.5875%" y="270.50"></text></g><g><title>__init__ (row.py:109) (1 samples, 0.25%)</title><rect x="84.3829%" y="260" width="0.2519%" height="15" fill="rgb(226,22,26)" fg:x="335" fg:w="1"/><text x="84.6329%" y="270.50"></text></g><g><title>__init__ (row.py:21) (1 samples, 0.25%)</title><rect x="85.3904%" y="276" width="0.2519%" height="15" fill="rgb(217,163,10)" fg:x="339" fg:w="1"/><text x="85.6404%" y="286.50"></text></g><g><title>validate_val (row.py:114) (4 samples, 1.01%)</title><rect x="85.8942%" y="292" width="1.0076%" height="15" fill="rgb(213,25,53)" fg:x="341" fg:w="4"/><text x="86.1442%" y="302.50"></text></g><g><title>__init__ (row.py:110) (10 samples, 2.52%)</title><rect x="84.6348%" y="260" width="2.5189%" height="15" fill="rgb(252,105,26)" fg:x="336" fg:w="10"/><text x="84.8848%" y="270.50">__..</text></g><g><title>__init__ (row.py:23) (6 samples, 1.51%)</title><rect x="85.6423%" y="276" width="1.5113%" height="15" fill="rgb(220,39,43)" fg:x="340" fg:w="6"/><text x="85.8923%" y="286.50"></text></g><g><title>validate_val (row.py:116) (1 samples, 0.25%)</title><rect x="86.9018%" y="292" width="0.2519%" height="15" fill="rgb(229,68,48)" fg:x="345" fg:w="1"/><text x="87.1518%" y="302.50"></text></g><g><title>__init__ (row.py:155) (1 samples, 0.25%)</title><rect x="87.1537%" y="260" width="0.2519%" height="15" fill="rgb(252,8,32)" fg:x="346" fg:w="1"/><text x="87.4037%" y="270.50"></text></g><g><title>__init__ (row.py:157) (1 samples, 0.25%)</title><rect x="87.4055%" y="260" width="0.2519%" height="15" fill="rgb(223,20,43)" fg:x="347" fg:w="1"/><text x="87.6555%" y="270.50"></text></g><g><title>__init__ (row.py:22) (2 samples, 0.50%)</title><rect x="87.9093%" y="276" width="0.5038%" height="15" fill="rgb(229,81,49)" fg:x="349" fg:w="2"/><text x="88.1593%" y="286.50"></text></g><g><title>validate_val (row.py:55) (2 samples, 0.50%)</title><rect x="88.6650%" y="292" width="0.5038%" height="15" fill="rgb(236,28,36)" fg:x="352" fg:w="2"/><text x="88.9150%" y="302.50"></text></g><g><title>validate_val (row.py:58) (1 samples, 0.25%)</title><rect x="89.1688%" y="292" width="0.2519%" height="15" fill="rgb(249,185,26)" fg:x="354" fg:w="1"/><text x="89.4188%" y="302.50"></text></g><g><title>__init__ (row.py:159) (9 samples, 2.27%)</title><rect x="87.6574%" y="260" width="2.2670%" height="15" fill="rgb(249,174,33)" fg:x="348" fg:w="9"/><text x="87.9074%" y="270.50">_..</text></g><g><title>__init__ (row.py:23) (6 samples, 1.51%)</title><rect x="88.4131%" y="276" width="1.5113%" height="15" fill="rgb(233,201,37)" fg:x="351" fg:w="6"/><text x="88.6631%" y="286.50"></text></g><g><title>validate_val (row.py:59) (2 samples, 0.50%)</title><rect x="89.4207%" y="292" width="0.5038%" height="15" fill="rgb(221,78,26)" fg:x="355" fg:w="2"/><text x="89.6707%" y="302.50"></text></g><g><title>validate_val (row.py:55) (1 samples, 0.25%)</title><rect x="89.9244%" y="292" width="0.2519%" height="15" fill="rgb(250,127,30)" fg:x="357" fg:w="1"/><text x="90.1744%" y="302.50"></text></g><g><title>validate_val (row.py:58) (1 samples, 0.25%)</title><rect x="90.1763%" y="292" width="0.2519%" height="15" fill="rgb(230,49,44)" fg:x="358" fg:w="1"/><text x="90.4263%" y="302.50"></text></g><g><title>__init__ (row.py:160) (3 samples, 0.76%)</title><rect x="89.9244%" y="260" width="0.7557%" height="15" fill="rgb(229,67,23)" fg:x="357" fg:w="3"/><text x="90.1744%" y="270.50"></text></g><g><title>__init__ (row.py:23) (3 samples, 0.76%)</title><rect x="89.9244%" y="276" width="0.7557%" height="15" fill="rgb(249,83,47)" fg:x="357" fg:w="3"/><text x="90.1744%" y="286.50"></text></g><g><title>validate_val (row.py:59) (1 samples, 0.25%)</title><rect x="90.4282%" y="292" width="0.2519%" height="15" fill="rgb(215,43,3)" fg:x="359" fg:w="1"/><text x="90.6782%" y="302.50"></text></g><g><title>__init__ (row.py:22) (2 samples, 0.50%)</title><rect x="90.6801%" y="276" width="0.5038%" height="15" fill="rgb(238,154,13)" fg:x="360" fg:w="2"/><text x="90.9301%" y="286.50"></text></g><g><title>__init__ (row.py:161) (3 samples, 0.76%)</title><rect x="90.6801%" y="260" width="0.7557%" height="15" fill="rgb(219,56,2)" fg:x="360" fg:w="3"/><text x="90.9301%" y="270.50"></text></g><g><title>__init__ (row.py:23) (1 samples, 0.25%)</title><rect x="91.1839%" y="276" width="0.2519%" height="15" fill="rgb(233,0,4)" fg:x="362" fg:w="1"/><text x="91.4339%" y="286.50"></text></g><g><title>validate_val (row.py:61) (1 samples, 0.25%)</title><rect x="91.1839%" y="292" width="0.2519%" height="15" fill="rgb(235,30,7)" fg:x="362" fg:w="1"/><text x="91.4339%" y="302.50"></text></g><g><title>__init__ (row.py:22) (3 samples, 0.76%)</title><rect x="91.4358%" y="276" width="0.7557%" height="15" fill="rgb(250,79,13)" fg:x="363" fg:w="3"/><text x="91.6858%" y="286.50"></text></g><g><title>validate_val (row.py:81) (3 samples, 0.76%)</title><rect x="92.1914%" y="292" width="0.7557%" height="15" fill="rgb(211,146,34)" fg:x="366" fg:w="3"/><text x="92.4414%" y="302.50"></text></g><g><title>validate_val (row.py:84) (1 samples, 0.25%)</title><rect x="92.9471%" y="292" width="0.2519%" height="15" fill="rgb(228,22,38)" fg:x="369" fg:w="1"/><text x="93.1971%" y="302.50"></text></g><g><title>validate_val (row.py:85) (1 samples, 0.25%)</title><rect x="93.1990%" y="292" width="0.2519%" height="15" fill="rgb(235,168,5)" fg:x="370" fg:w="1"/><text x="93.4490%" y="302.50"></text></g><g><title>__init__ (row.py:23) (6 samples, 1.51%)</title><rect x="92.1914%" y="276" width="1.5113%" height="15" fill="rgb(221,155,16)" fg:x="366" fg:w="6"/><text x="92.4414%" y="286.50"></text></g><g><title>validate_val (row.py:87) (1 samples, 0.25%)</title><rect x="93.4509%" y="292" width="0.2519%" height="15" fill="rgb(215,215,53)" fg:x="371" fg:w="1"/><text x="93.7009%" y="302.50"></text></g><g><title>__new__ (row.py:77) (1 samples, 0.25%)</title><rect x="93.7028%" y="276" width="0.2519%" height="15" fill="rgb(223,4,10)" fg:x="372" fg:w="1"/><text x="93.9528%" y="286.50"></text></g><g><title>__init__ (row.py:162) (11 samples, 2.77%)</title><rect x="91.4358%" y="260" width="2.7708%" height="15" fill="rgb(234,103,6)" fg:x="363" fg:w="11"/><text x="91.6858%" y="270.50">__..</text></g><g><title>__new__ (row.py:78) (1 samples, 0.25%)</title><rect x="93.9547%" y="276" width="0.2519%" height="15" fill="rgb(227,97,0)" fg:x="373" fg:w="1"/><text x="94.2047%" y="286.50"></text></g><g><title>__init__ (row.py:22) (1 samples, 0.25%)</title><rect x="94.2065%" y="260" width="0.2519%" height="15" fill="rgb(234,150,53)" fg:x="374" fg:w="1"/><text x="94.4565%" y="270.50"></text></g><g><title>validate_val (row.py:55) (3 samples, 0.76%)</title><rect x="94.7103%" y="276" width="0.7557%" height="15" fill="rgb(228,201,54)" fg:x="376" fg:w="3"/><text x="94.9603%" y="286.50"></text></g><g><title>validate_val (row.py:56) (1 samples, 0.25%)</title><rect x="95.4660%" y="276" width="0.2519%" height="15" fill="rgb(222,22,37)" fg:x="379" fg:w="1"/><text x="95.7160%" y="286.50"></text></g><g><title>validate_val (row.py:59) (9 samples, 2.27%)</title><rect x="95.7179%" y="276" width="2.2670%" height="15" fill="rgb(237,53,32)" fg:x="380" fg:w="9"/><text x="95.9679%" y="286.50">v..</text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:35) (73 samples, 18.39%)</title><rect x="79.8489%" y="244" width="18.3879%" height="15" fill="rgb(233,25,53)" fg:x="317" fg:w="73"/><text x="80.0989%" y="254.50">test_insert_lotta_rows (db/te..</text></g><g><title>__init__ (row.py:23) (15 samples, 3.78%)</title><rect x="94.4584%" y="260" width="3.7783%" height="15" fill="rgb(210,40,34)" fg:x="375" fg:w="15"/><text x="94.7084%" y="270.50">__in..</text></g><g><title>validate_val (row.py:61) (1 samples, 0.25%)</title><rect x="97.9849%" y="276" width="0.2519%" height="15" fill="rgb(241,220,44)" fg:x="389" fg:w="1"/><text x="98.2349%" y="286.50"></text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:37) (1 samples, 0.25%)</title><rect x="98.2368%" y="244" width="0.2519%" height="15" fill="rgb(235,28,35)" fg:x="390" fg:w="1"/><text x="98.4868%" y="254.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.4887%" y="276" width="0.2519%" height="15" fill="rgb(210,56,17)" fg:x="391" fg:w="1"/><text x="98.7387%" y="286.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.4887%" y="292" width="0.2519%" height="15" fill="rgb(224,130,29)" fg:x="391" fg:w="1"/><text x="98.7387%" y="302.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.4887%" y="308" width="0.2519%" height="15" fill="rgb(235,212,8)" fg:x="391" fg:w="1"/><text x="98.7387%" y="318.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.4887%" y="324" width="0.2519%" height="15" fill="rgb(223,33,50)" fg:x="391" fg:w="1"/><text x="98.7387%" y="334.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.4887%" y="340" width="0.2519%" height="15" fill="rgb(219,149,13)" fg:x="391" fg:w="1"/><text x="98.7387%" y="350.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.4887%" y="356" width="0.2519%" height="15" fill="rgb(250,156,29)" fg:x="391" fg:w="1"/><text x="98.7387%" y="366.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.4887%" y="372" width="0.2519%" height="15" fill="rgb(216,193,19)" fg:x="391" fg:w="1"/><text x="98.7387%" y="382.50"></text></g><g><title>traverse (binary_tree.py:58) (1 samples, 0.25%)</title><rect x="98.4887%" y="388" width="0.2519%" height="15" fill="rgb(216,135,14)" fg:x="391" fg:w="1"/><text x="98.7387%" y="398.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="292" width="0.2519%" height="15" fill="rgb(241,47,5)" fg:x="392" fg:w="1"/><text x="98.9906%" y="302.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="308" width="0.2519%" height="15" fill="rgb(233,42,35)" fg:x="392" fg:w="1"/><text x="98.9906%" y="318.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="324" width="0.2519%" height="15" fill="rgb(231,13,6)" fg:x="392" fg:w="1"/><text x="98.9906%" y="334.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="340" width="0.2519%" height="15" fill="rgb(207,181,40)" fg:x="392" fg:w="1"/><text x="98.9906%" y="350.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="356" width="0.2519%" height="15" fill="rgb(254,173,49)" fg:x="392" fg:w="1"/><text x="98.9906%" y="366.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="372" width="0.2519%" height="15" fill="rgb(221,1,38)" fg:x="392" fg:w="1"/><text x="98.9906%" y="382.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="388" width="0.2519%" height="15" fill="rgb(206,124,46)" fg:x="392" fg:w="1"/><text x="98.9906%" y="398.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.7406%" y="404" width="0.2519%" height="15" fill="rgb(249,21,11)" fg:x="392" fg:w="1"/><text x="98.9906%" y="414.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.7406%" y="420" width="0.2519%" height="15" fill="rgb(222,201,40)" fg:x="392" fg:w="1"/><text x="98.9906%" y="430.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.7406%" y="436" width="0.2519%" height="15" fill="rgb(235,61,29)" fg:x="392" fg:w="1"/><text x="98.9906%" y="446.50"></text></g><g><title>traverse (binary_tree.py:41) (1 samples, 0.25%)</title><rect x="98.7406%" y="452" width="0.2519%" height="15" fill="rgb(219,207,3)" fg:x="392" fg:w="1"/><text x="98.9906%" y="462.50"></text></g><g><title>traverse (binary_tree.py:60) (3 samples, 0.76%)</title><rect x="98.4887%" y="260" width="0.7557%" height="15" fill="rgb(222,56,46)" fg:x="391" fg:w="3"/><text x="98.7387%" y="270.50"></text></g><g><title>traverse (binary_tree.py:68) (2 samples, 0.50%)</title><rect x="98.7406%" y="276" width="0.5038%" height="15" fill="rgb(239,76,54)" fg:x="392" fg:w="2"/><text x="98.9906%" y="286.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="292" width="0.2519%" height="15" fill="rgb(231,124,27)" fg:x="393" fg:w="1"/><text x="99.2424%" y="302.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="308" width="0.2519%" height="15" fill="rgb(249,195,6)" fg:x="393" fg:w="1"/><text x="99.2424%" y="318.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="324" width="0.2519%" height="15" fill="rgb(237,174,47)" fg:x="393" fg:w="1"/><text x="99.2424%" y="334.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.9924%" y="340" width="0.2519%" height="15" fill="rgb(206,201,31)" fg:x="393" fg:w="1"/><text x="99.2424%" y="350.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.9924%" y="356" width="0.2519%" height="15" fill="rgb(231,57,52)" fg:x="393" fg:w="1"/><text x="99.2424%" y="366.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.9924%" y="372" width="0.2519%" height="15" fill="rgb(248,177,22)" fg:x="393" fg:w="1"/><text x="99.2424%" y="382.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="388" width="0.2519%" height="15" fill="rgb(215,211,37)" fg:x="393" fg:w="1"/><text x="99.2424%" y="398.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="98.9924%" y="404" width="0.2519%" height="15" fill="rgb(241,128,51)" fg:x="393" fg:w="1"/><text x="99.2424%" y="414.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="420" width="0.2519%" height="15" fill="rgb(227,165,31)" fg:x="393" fg:w="1"/><text x="99.2424%" y="430.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="98.9924%" y="436" width="0.2519%" height="15" fill="rgb(228,167,24)" fg:x="393" fg:w="1"/><text x="99.2424%" y="446.50"></text></g><g><title>traverse (binary_tree.py:58) (1 samples, 0.25%)</title><rect x="98.9924%" y="452" width="0.2519%" height="15" fill="rgb(228,143,12)" fg:x="393" fg:w="1"/><text x="99.2424%" y="462.50"></text></g><g><title>__repr__ (row.py:169) (1 samples, 0.25%)</title><rect x="98.9924%" y="468" width="0.2519%" height="15" fill="rgb(249,149,8)" fg:x="393" fg:w="1"/><text x="99.2424%" y="478.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="99.2443%" y="340" width="0.2519%" height="15" fill="rgb(243,35,44)" fg:x="394" fg:w="1"/><text x="99.4943%" y="350.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="99.2443%" y="356" width="0.2519%" height="15" fill="rgb(246,89,9)" fg:x="394" fg:w="1"/><text x="99.4943%" y="366.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="99.2443%" y="372" width="0.2519%" height="15" fill="rgb(233,213,13)" fg:x="394" fg:w="1"/><text x="99.4943%" y="382.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="99.2443%" y="388" width="0.2519%" height="15" fill="rgb(233,141,41)" fg:x="394" fg:w="1"/><text x="99.4943%" y="398.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="99.2443%" y="404" width="0.2519%" height="15" fill="rgb(239,167,4)" fg:x="394" fg:w="1"/><text x="99.4943%" y="414.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="99.2443%" y="420" width="0.2519%" height="15" fill="rgb(209,217,16)" fg:x="394" fg:w="1"/><text x="99.4943%" y="430.50"></text></g><g><title>traverse (binary_tree.py:68) (1 samples, 0.25%)</title><rect x="99.2443%" y="436" width="0.2519%" height="15" fill="rgb(219,88,35)" fg:x="394" fg:w="1"/><text x="99.4943%" y="446.50"></text></g><g><title>traverse (binary_tree.py:58) (1 samples, 0.25%)</title><rect x="99.2443%" y="452" width="0.2519%" height="15" fill="rgb(220,193,23)" fg:x="394" fg:w="1"/><text x="99.4943%" y="462.50"></text></g><g><title>__repr__ (row.py:169) (1 samples, 0.25%)</title><rect x="99.2443%" y="468" width="0.2519%" height="15" fill="rgb(230,90,52)" fg:x="394" fg:w="1"/><text x="99.4943%" y="478.50"></text></g><g><title>traverse (binary_tree.py:60) (1 samples, 0.25%)</title><rect x="99.4962%" y="452" width="0.2519%" height="15" fill="rgb(252,106,19)" fg:x="395" fg:w="1"/><text x="99.7462%" y="462.50"></text></g><g><title>all (397 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="397"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (db/test_bulk_insertion.py:48) (397 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="397"/><text x="0.2500%" y="78.50">&lt;module&gt; (db/test_bulk_insertion.py:48)</text></g><g><title>__init__ (unittest/main.py:102) (397 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="397"/><text x="0.2500%" y="94.50">__init__ (unittest/main.py:102)</text></g><g><title>runTests (unittest/main.py:274) (397 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="397"/><text x="0.2500%" y="110.50">runTests (unittest/main.py:274)</text></g><g><title>run (unittest/runner.py:217) (397 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="397"/><text x="0.2500%" y="126.50">run (unittest/runner.py:217)</text></g><g><title>__call__ (unittest/suite.py:84) (397 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="397"/><text x="0.2500%" y="142.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (397 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="397"/><text x="0.2500%" y="158.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/suite.py:84) (397 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="397"/><text x="0.2500%" y="174.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (397 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="397"/><text x="0.2500%" y="190.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/case.py:678) (397 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="397"/><text x="0.2500%" y="206.50">__call__ (unittest/case.py:678)</text></g><g><title>run (unittest/case.py:623) (397 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="397"/><text x="0.2500%" y="222.50">run (unittest/case.py:623)</text></g><g><title>_callTestMethod (unittest/case.py:579) (397 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="397"/><text x="0.2500%" y="238.50">_callTestMethod (unittest/case.py:579)</text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:41) (6 samples, 1.51%)</title><rect x="98.4887%" y="244" width="1.5113%" height="15" fill="rgb(215,77,49)" fg:x="391" fg:w="6"/><text x="98.7387%" y="254.50"></text></g><g><title>traverse (binary_tree.py:68) (3 samples, 0.76%)</title><rect x="99.2443%" y="260" width="0.7557%" height="15" fill="rgb(248,100,22)" fg:x="394" fg:w="3"/><text x="99.4943%" y="270.50"></text></g><g><title>traverse (binary_tree.py:60) (3 samples, 0.76%)</title><rect x="99.2443%" y="276" width="0.7557%" height="15" fill="rgb(208,67,9)" fg:x="394" fg:w="3"/><text x="99.4943%" y="286.50"></text></g><g><title>traverse (binary_tree.py:60) (3 samples, 0.76%)</title><rect x="99.2443%" y="292" width="0.7557%" height="15" fill="rgb(219,133,21)" fg:x="394" fg:w="3"/><text x="99.4943%" y="302.50"></text></g><g><title>traverse (binary_tree.py:68) (3 samples, 0.76%)</title><rect x="99.2443%" y="308" width="0.7557%" height="15" fill="rgb(246,46,29)" fg:x="394" fg:w="3"/><text x="99.4943%" y="318.50"></text></g><g><title>traverse (binary_tree.py:68) (3 samples, 0.76%)</title><rect x="99.2443%" y="324" width="0.7557%" height="15" fill="rgb(246,185,52)" fg:x="394" fg:w="3"/><text x="99.4943%" y="334.50"></text></g><g><title>traverse (binary_tree.py:68) (2 samples, 0.50%)</title><rect x="99.4962%" y="340" width="0.5038%" height="15" fill="rgb(252,136,11)" fg:x="395" fg:w="2"/><text x="99.7462%" y="350.50"></text></g><g><title>traverse (binary_tree.py:60) (2 samples, 0.50%)</title><rect x="99.4962%" y="356" width="0.5038%" height="15" fill="rgb(219,138,53)" fg:x="395" fg:w="2"/><text x="99.7462%" y="366.50"></text></g><g><title>traverse (binary_tree.py:68) (2 samples, 0.50%)</title><rect x="99.4962%" y="372" width="0.5038%" height="15" fill="rgb(211,51,23)" fg:x="395" fg:w="2"/><text x="99.7462%" y="382.50"></text></g><g><title>traverse (binary_tree.py:60) (2 samples, 0.50%)</title><rect x="99.4962%" y="388" width="0.5038%" height="15" fill="rgb(247,221,28)" fg:x="395" fg:w="2"/><text x="99.7462%" y="398.50"></text></g><g><title>traverse (binary_tree.py:68) (2 samples, 0.50%)</title><rect x="99.4962%" y="404" width="0.5038%" height="15" fill="rgb(251,222,45)" fg:x="395" fg:w="2"/><text x="99.7462%" y="414.50"></text></g><g><title>traverse (binary_tree.py:60) (2 samples, 0.50%)</title><rect x="99.4962%" y="420" width="0.5038%" height="15" fill="rgb(217,162,53)" fg:x="395" fg:w="2"/><text x="99.7462%" y="430.50"></text></g><g><title>traverse (binary_tree.py:60) (2 samples, 0.50%)</title><rect x="99.4962%" y="436" width="0.5038%" height="15" fill="rgb(229,93,14)" fg:x="395" fg:w="2"/><text x="99.7462%" y="446.50"></text></g><g><title>traverse (binary_tree.py:69) (1 samples, 0.25%)</title><rect x="99.7481%" y="452" width="0.2519%" height="15" fill="rgb(209,67,49)" fg:x="396" fg:w="1"/><text x="99.9981%" y="462.50"></text></g><g><title>right_child (row.py:184) (1 samples, 0.25%)</title><rect x="99.7481%" y="468" width="0.2519%" height="15" fill="rgb(213,87,29)" fg:x="396" fg:w="1"/><text x="99.9981%" y="478.50"></text></g><g><title>get_row (table.py:43) (1 samples, 0.25%)</title><rect x="99.7481%" y="484" width="0.2519%" height="15" fill="rgb(205,151,52)" fg:x="396" fg:w="1"/><text x="99.9981%" y="494.50"></text></g></svg></svg>