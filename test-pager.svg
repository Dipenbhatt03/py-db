<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="586" onload="init(evt)" viewBox="0 0 1200 586" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="586" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o test-pager.svg python test_bulk_insertion.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="575.00"> </text><svg id="frames" x="10" width="1180" total_samples="2291"><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:38) (8 samples, 0.35%)</title><rect x="0.0436%" y="244" width="0.3492%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="8"/><text x="0.2936%" y="254.50"></text></g><g><title>__init__ (data_types.py:12) (6 samples, 0.26%)</title><rect x="2.3134%" y="260" width="0.2619%" height="15" fill="rgb(217,0,24)" fg:x="53" fg:w="6"/><text x="2.5634%" y="270.50"></text></g><g><title>validate_val (data_types.py:48) (10 samples, 0.44%)</title><rect x="2.8372%" y="276" width="0.4365%" height="15" fill="rgb(221,193,54)" fg:x="65" fg:w="10"/><text x="3.0872%" y="286.50"></text></g><g><title>validate_val (data_types.py:52) (7 samples, 0.31%)</title><rect x="3.3610%" y="276" width="0.3055%" height="15" fill="rgb(248,212,6)" fg:x="77" fg:w="7"/><text x="3.6110%" y="286.50"></text></g><g><title>__init__ (data_types.py:13) (27 samples, 1.18%)</title><rect x="2.5753%" y="260" width="1.1785%" height="15" fill="rgb(208,68,35)" fg:x="59" fg:w="27"/><text x="2.8253%" y="270.50"></text></g><g><title>__init__ (data_types.py:12) (3 samples, 0.13%)</title><rect x="3.9721%" y="276" width="0.1309%" height="15" fill="rgb(232,128,0)" fg:x="91" fg:w="3"/><text x="4.2221%" y="286.50"></text></g><g><title>validate_val (data_types.py:48) (4 samples, 0.17%)</title><rect x="4.1467%" y="292" width="0.1746%" height="15" fill="rgb(207,160,47)" fg:x="95" fg:w="4"/><text x="4.3967%" y="302.50"></text></g><g><title>validate_val (data_types.py:52) (3 samples, 0.13%)</title><rect x="4.3649%" y="292" width="0.1309%" height="15" fill="rgb(228,23,34)" fg:x="100" fg:w="3"/><text x="4.6149%" y="302.50"></text></g><g><title>__init__ (data_types.py:13) (10 samples, 0.44%)</title><rect x="4.1030%" y="276" width="0.4365%" height="15" fill="rgb(218,30,26)" fg:x="94" fg:w="10"/><text x="4.3530%" y="286.50"></text></g><g><title>__init__ (row.py:53) (21 samples, 0.92%)</title><rect x="3.8848%" y="260" width="0.9166%" height="15" fill="rgb(220,122,19)" fg:x="89" fg:w="21"/><text x="4.1348%" y="270.50"></text></g><g><title>__new__ (data_types.py:45) (5 samples, 0.22%)</title><rect x="4.5832%" y="276" width="0.2182%" height="15" fill="rgb(250,228,42)" fg:x="105" fg:w="5"/><text x="4.8332%" y="286.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="4.9323%" y="276" width="0.1309%" height="15" fill="rgb(240,193,28)" fg:x="113" fg:w="3"/><text x="5.1823%" y="286.50"></text></g><g><title>__init__ (row.py:54) (10 samples, 0.44%)</title><rect x="4.8014%" y="260" width="0.4365%" height="15" fill="rgb(216,20,37)" fg:x="110" fg:w="10"/><text x="5.0514%" y="270.50"></text></g><g><title>__new__ (data_types.py:45) (4 samples, 0.17%)</title><rect x="5.0633%" y="276" width="0.1746%" height="15" fill="rgb(206,188,39)" fg:x="116" fg:w="4"/><text x="5.3133%" y="286.50"></text></g><g><title>__init__ (data_types.py:13) (7 samples, 0.31%)</title><rect x="5.4125%" y="276" width="0.3055%" height="15" fill="rgb(217,207,13)" fg:x="124" fg:w="7"/><text x="5.6625%" y="286.50"></text></g><g><title>__init__ (row.py:55) (14 samples, 0.61%)</title><rect x="5.2379%" y="260" width="0.6111%" height="15" fill="rgb(231,73,38)" fg:x="120" fg:w="14"/><text x="5.4879%" y="270.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="5.9799%" y="276" width="0.1746%" height="15" fill="rgb(225,20,46)" fg:x="137" fg:w="4"/><text x="6.2299%" y="286.50"></text></g><g><title>__init__ (row.py:56) (10 samples, 0.44%)</title><rect x="5.8490%" y="260" width="0.4365%" height="15" fill="rgb(210,31,41)" fg:x="134" fg:w="10"/><text x="6.0990%" y="270.50"></text></g><g><title>__new__ (data_types.py:44) (4 samples, 0.17%)</title><rect x="6.2855%" y="260" width="0.1746%" height="15" fill="rgb(221,200,47)" fg:x="144" fg:w="4"/><text x="6.5355%" y="270.50"></text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:39) (155 samples, 6.77%)</title><rect x="0.3928%" y="244" width="6.7656%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="155"/><text x="0.6428%" y="254.50">test_inse..</text></g><g><title>__new__ (data_types.py:45) (16 samples, 0.70%)</title><rect x="6.4601%" y="260" width="0.6984%" height="15" fill="rgb(249,33,26)" fg:x="148" fg:w="16"/><text x="6.7101%" y="270.50"></text></g><g><title>validate_val (data_types.py:52) (4 samples, 0.17%)</title><rect x="8.5116%" y="308" width="0.1746%" height="15" fill="rgb(235,183,28)" fg:x="195" fg:w="4"/><text x="8.7616%" y="318.50"></text></g><g><title>__init__ (data_types.py:13) (8 samples, 0.35%)</title><rect x="8.4243%" y="292" width="0.3492%" height="15" fill="rgb(221,5,38)" fg:x="193" fg:w="8"/><text x="8.6743%" y="302.50"></text></g><g><title>insert (table.py:48) (35 samples, 1.53%)</title><rect x="7.5076%" y="260" width="1.5277%" height="15" fill="rgb(247,18,42)" fg:x="172" fg:w="35"/><text x="7.7576%" y="270.50"></text></g><g><title>offset_for_a_new_row (table.py:72) (29 samples, 1.27%)</title><rect x="7.7695%" y="276" width="1.2658%" height="15" fill="rgb(241,131,45)" fg:x="178" fg:w="29"/><text x="8.0195%" y="286.50"></text></g><g><title>insert (table.py:49) (11 samples, 0.48%)</title><rect x="9.0354%" y="260" width="0.4801%" height="15" fill="rgb(249,31,29)" fg:x="207" fg:w="11"/><text x="9.2854%" y="270.50"></text></g><g><title>__str__ (data_types.py:15) (3 samples, 0.13%)</title><rect x="10.0829%" y="308" width="0.1309%" height="15" fill="rgb(225,111,53)" fg:x="231" fg:w="3"/><text x="10.3329%" y="318.50"></text></g><g><title>__repr__ (row.py:62) (12 samples, 0.52%)</title><rect x="9.8210%" y="292" width="0.5238%" height="15" fill="rgb(238,160,17)" fg:x="225" fg:w="12"/><text x="10.0710%" y="302.50"></text></g><g><title>__str__ (data_types.py:16) (3 samples, 0.13%)</title><rect x="10.2139%" y="308" width="0.1309%" height="15" fill="rgb(214,148,48)" fg:x="234" fg:w="3"/><text x="10.4639%" y="318.50"></text></g><g><title>insert (binary_tree.py:76) (19 samples, 0.83%)</title><rect x="9.6028%" y="276" width="0.8293%" height="15" fill="rgb(232,36,49)" fg:x="220" fg:w="19"/><text x="9.8528%" y="286.50"></text></g><g><title>__repr__ (row.py:62) (4 samples, 0.17%)</title><rect x="10.8250%" y="308" width="0.1746%" height="15" fill="rgb(209,103,24)" fg:x="248" fg:w="4"/><text x="11.0750%" y="318.50"></text></g><g><title>insert (binary_tree.py:76) (6 samples, 0.26%)</title><rect x="10.7813%" y="292" width="0.2619%" height="15" fill="rgb(229,88,8)" fg:x="247" fg:w="6"/><text x="11.0313%" y="302.50"></text></g><g><title>insert (binary_tree.py:76) (3 samples, 0.13%)</title><rect x="11.1742%" y="340" width="0.1309%" height="15" fill="rgb(213,181,19)" fg:x="256" fg:w="3"/><text x="11.4242%" y="350.50"></text></g><g><title>insert (binary_tree.py:117) (3 samples, 0.13%)</title><rect x="11.3051%" y="356" width="0.1309%" height="15" fill="rgb(254,191,54)" fg:x="259" fg:w="3"/><text x="11.5551%" y="366.50"></text></g><g><title>left_rotate (binary_tree.py:67) (3 samples, 0.13%)</title><rect x="11.3051%" y="372" width="0.1309%" height="15" fill="rgb(241,83,37)" fg:x="259" fg:w="3"/><text x="11.5551%" y="382.50"></text></g><g><title>insert (binary_tree.py:117) (3 samples, 0.13%)</title><rect x="11.5234%" y="372" width="0.1309%" height="15" fill="rgb(233,36,39)" fg:x="264" fg:w="3"/><text x="11.7734%" y="382.50"></text></g><g><title>insert (binary_tree.py:117) (4 samples, 0.17%)</title><rect x="11.6979%" y="388" width="0.1746%" height="15" fill="rgb(226,3,54)" fg:x="268" fg:w="4"/><text x="11.9479%" y="398.50"></text></g><g><title>left_rotate (binary_tree.py:67) (4 samples, 0.17%)</title><rect x="11.6979%" y="404" width="0.1746%" height="15" fill="rgb(245,192,40)" fg:x="268" fg:w="4"/><text x="11.9479%" y="414.50"></text></g><g><title>left_subtree_height (row.py:85) (4 samples, 0.17%)</title><rect x="11.6979%" y="420" width="0.1746%" height="15" fill="rgb(238,167,29)" fg:x="268" fg:w="4"/><text x="11.9479%" y="430.50"></text></g><g><title>left_child (row.py:81) (4 samples, 0.17%)</title><rect x="11.6979%" y="436" width="0.1746%" height="15" fill="rgb(232,182,51)" fg:x="268" fg:w="4"/><text x="11.9479%" y="446.50"></text></g><g><title>left_rotate (binary_tree.py:67) (4 samples, 0.17%)</title><rect x="12.0035%" y="420" width="0.1746%" height="15" fill="rgb(231,60,39)" fg:x="275" fg:w="4"/><text x="12.2535%" y="430.50"></text></g><g><title>insert (binary_tree.py:117) (7 samples, 0.31%)</title><rect x="11.9598%" y="404" width="0.3055%" height="15" fill="rgb(208,69,12)" fg:x="274" fg:w="7"/><text x="12.2098%" y="414.50"></text></g><g><title>insert (binary_tree.py:111) (3 samples, 0.13%)</title><rect x="12.2654%" y="420" width="0.1309%" height="15" fill="rgb(235,93,37)" fg:x="281" fg:w="3"/><text x="12.5154%" y="430.50"></text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="12.2654%" y="436" width="0.1309%" height="15" fill="rgb(213,116,39)" fg:x="281" fg:w="3"/><text x="12.5154%" y="446.50"></text></g><g><title>left_rotate (binary_tree.py:62) (3 samples, 0.13%)</title><rect x="12.3963%" y="436" width="0.1309%" height="15" fill="rgb(222,207,29)" fg:x="284" fg:w="3"/><text x="12.6463%" y="446.50"></text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="12.3963%" y="452" width="0.1309%" height="15" fill="rgb(206,96,30)" fg:x="284" fg:w="3"/><text x="12.6463%" y="462.50"></text></g><g><title>fetch_row (row.py:160) (3 samples, 0.13%)</title><rect x="12.3963%" y="468" width="0.1309%" height="15" fill="rgb(218,138,4)" fg:x="284" fg:w="3"/><text x="12.6463%" y="478.50"></text></g><g><title>left_subtree_height (row.py:85) (3 samples, 0.13%)</title><rect x="12.5273%" y="452" width="0.1309%" height="15" fill="rgb(250,191,14)" fg:x="287" fg:w="3"/><text x="12.7773%" y="462.50"></text></g><g><title>left_child (row.py:81) (3 samples, 0.13%)</title><rect x="12.5273%" y="468" width="0.1309%" height="15" fill="rgb(239,60,40)" fg:x="287" fg:w="3"/><text x="12.7773%" y="478.50"></text></g><g><title>left_rotate (binary_tree.py:67) (7 samples, 0.31%)</title><rect x="12.5273%" y="436" width="0.3055%" height="15" fill="rgb(206,27,48)" fg:x="287" fg:w="7"/><text x="12.7773%" y="446.50"></text></g><g><title>right_subtree_height (row.py:89) (4 samples, 0.17%)</title><rect x="12.6582%" y="452" width="0.1746%" height="15" fill="rgb(225,35,8)" fg:x="290" fg:w="4"/><text x="12.9082%" y="462.50"></text></g><g><title>right_child (row.py:77) (4 samples, 0.17%)</title><rect x="12.6582%" y="468" width="0.1746%" height="15" fill="rgb(250,213,24)" fg:x="290" fg:w="4"/><text x="12.9082%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (3 samples, 0.13%)</title><rect x="12.7019%" y="484" width="0.1309%" height="15" fill="rgb(247,123,22)" fg:x="291" fg:w="3"/><text x="12.9519%" y="494.50"></text></g><g><title>insert (binary_tree.py:117) (12 samples, 0.52%)</title><rect x="12.3963%" y="420" width="0.5238%" height="15" fill="rgb(231,138,38)" fg:x="284" fg:w="12"/><text x="12.6463%" y="430.50"></text></g><g><title>left_rotate (binary_tree.py:62) (3 samples, 0.13%)</title><rect x="13.0074%" y="452" width="0.1309%" height="15" fill="rgb(231,145,46)" fg:x="298" fg:w="3"/><text x="13.2574%" y="462.50"></text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="13.0074%" y="468" width="0.1309%" height="15" fill="rgb(251,118,11)" fg:x="298" fg:w="3"/><text x="13.2574%" y="478.50"></text></g><g><title>left_subtree_height (row.py:85) (4 samples, 0.17%)</title><rect x="13.1384%" y="468" width="0.1746%" height="15" fill="rgb(217,147,25)" fg:x="301" fg:w="4"/><text x="13.3884%" y="478.50"></text></g><g><title>left_child (row.py:81) (4 samples, 0.17%)</title><rect x="13.1384%" y="484" width="0.1746%" height="15" fill="rgb(247,81,37)" fg:x="301" fg:w="4"/><text x="13.3884%" y="494.50"></text></g><g><title>fetch_row (row.py:160) (4 samples, 0.17%)</title><rect x="13.1384%" y="500" width="0.1746%" height="15" fill="rgb(209,12,38)" fg:x="301" fg:w="4"/><text x="13.3884%" y="510.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="13.1820%" y="516" width="0.1309%" height="15" fill="rgb(227,1,9)" fg:x="302" fg:w="3"/><text x="13.4320%" y="526.50"></text></g><g><title>left_rotate (binary_tree.py:67) (5 samples, 0.22%)</title><rect x="13.1384%" y="452" width="0.2182%" height="15" fill="rgb(248,47,43)" fg:x="301" fg:w="5"/><text x="13.3884%" y="462.50"></text></g><g><title>insert (binary_tree.py:117) (10 samples, 0.44%)</title><rect x="13.0074%" y="436" width="0.4365%" height="15" fill="rgb(221,10,30)" fg:x="298" fg:w="10"/><text x="13.2574%" y="446.50"></text></g><g><title>insert (binary_tree.py:111) (6 samples, 0.26%)</title><rect x="13.4439%" y="452" width="0.2619%" height="15" fill="rgb(210,229,1)" fg:x="308" fg:w="6"/><text x="13.6939%" y="462.50"></text></g><g><title>right_child (row.py:77) (6 samples, 0.26%)</title><rect x="13.4439%" y="468" width="0.2619%" height="15" fill="rgb(222,148,37)" fg:x="308" fg:w="6"/><text x="13.6939%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (5 samples, 0.22%)</title><rect x="13.4876%" y="484" width="0.2182%" height="15" fill="rgb(234,67,33)" fg:x="309" fg:w="5"/><text x="13.7376%" y="494.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="13.5749%" y="500" width="0.1309%" height="15" fill="rgb(247,98,35)" fg:x="311" fg:w="3"/><text x="13.8249%" y="510.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="13.5749%" y="516" width="0.1309%" height="15" fill="rgb(247,138,52)" fg:x="311" fg:w="3"/><text x="13.8249%" y="526.50"></text></g><g><title>left_rotate (binary_tree.py:62) (5 samples, 0.22%)</title><rect x="13.7058%" y="468" width="0.2182%" height="15" fill="rgb(213,79,30)" fg:x="314" fg:w="5"/><text x="13.9558%" y="478.50"></text></g><g><title>right_child (row.py:77) (5 samples, 0.22%)</title><rect x="13.7058%" y="484" width="0.2182%" height="15" fill="rgb(246,177,23)" fg:x="314" fg:w="5"/><text x="13.9558%" y="494.50"></text></g><g><title>fetch_row (row.py:160) (5 samples, 0.22%)</title><rect x="13.7058%" y="500" width="0.2182%" height="15" fill="rgb(230,62,27)" fg:x="314" fg:w="5"/><text x="13.9558%" y="510.50"></text></g><g><title>left_rotate (binary_tree.py:69) (5 samples, 0.22%)</title><rect x="13.9241%" y="468" width="0.2182%" height="15" fill="rgb(216,154,8)" fg:x="319" fg:w="5"/><text x="14.1741%" y="478.50"></text></g><g><title>right_subtree_height (row.py:89) (5 samples, 0.22%)</title><rect x="13.9241%" y="484" width="0.2182%" height="15" fill="rgb(244,35,45)" fg:x="319" fg:w="5"/><text x="14.1741%" y="494.50"></text></g><g><title>right_child (row.py:77) (5 samples, 0.22%)</title><rect x="13.9241%" y="500" width="0.2182%" height="15" fill="rgb(251,115,12)" fg:x="319" fg:w="5"/><text x="14.1741%" y="510.50"></text></g><g><title>fetch_row (row.py:160) (4 samples, 0.17%)</title><rect x="13.9677%" y="516" width="0.1746%" height="15" fill="rgb(240,54,50)" fg:x="320" fg:w="4"/><text x="14.2177%" y="526.50"></text></g><g><title>insert (binary_tree.py:117) (11 samples, 0.48%)</title><rect x="13.7058%" y="452" width="0.4801%" height="15" fill="rgb(233,84,52)" fg:x="314" fg:w="11"/><text x="13.9558%" y="462.50"></text></g><g><title>insert (binary_tree.py:117) (4 samples, 0.17%)</title><rect x="14.2296%" y="468" width="0.1746%" height="15" fill="rgb(207,117,47)" fg:x="326" fg:w="4"/><text x="14.4796%" y="478.50"></text></g><g><title>insert (binary_tree.py:95) (8 samples, 0.35%)</title><rect x="14.6224%" y="484" width="0.3492%" height="15" fill="rgb(249,43,39)" fg:x="335" fg:w="8"/><text x="14.8724%" y="494.50"></text></g><g><title>right_subtree_height (row.py:89) (7 samples, 0.31%)</title><rect x="14.6661%" y="500" width="0.3055%" height="15" fill="rgb(209,38,44)" fg:x="336" fg:w="7"/><text x="14.9161%" y="510.50"></text></g><g><title>right_child (row.py:77) (7 samples, 0.31%)</title><rect x="14.6661%" y="516" width="0.3055%" height="15" fill="rgb(236,212,23)" fg:x="336" fg:w="7"/><text x="14.9161%" y="526.50"></text></g><g><title>fetch_row (row.py:160) (6 samples, 0.26%)</title><rect x="14.7097%" y="532" width="0.2619%" height="15" fill="rgb(242,79,21)" fg:x="337" fg:w="6"/><text x="14.9597%" y="542.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="14.8407%" y="548" width="0.1309%" height="15" fill="rgb(211,96,35)" fg:x="340" fg:w="3"/><text x="15.0907%" y="558.50"></text></g><g><title>insert (binary_tree.py:89) (14 samples, 0.61%)</title><rect x="14.4042%" y="468" width="0.6111%" height="15" fill="rgb(253,215,40)" fg:x="330" fg:w="14"/><text x="14.6542%" y="478.50"></text></g><g><title>insert (binary_tree.py:92) (8 samples, 0.35%)</title><rect x="15.0153%" y="468" width="0.3492%" height="15" fill="rgb(211,81,21)" fg:x="344" fg:w="8"/><text x="15.2653%" y="478.50"></text></g><g><title>right_subtree_height (row.py:89) (7 samples, 0.31%)</title><rect x="15.0589%" y="484" width="0.3055%" height="15" fill="rgb(208,190,38)" fg:x="345" fg:w="7"/><text x="15.3089%" y="494.50"></text></g><g><title>right_child (row.py:77) (6 samples, 0.26%)</title><rect x="15.1026%" y="500" width="0.2619%" height="15" fill="rgb(235,213,38)" fg:x="346" fg:w="6"/><text x="15.3526%" y="510.50"></text></g><g><title>fetch_row (row.py:160) (6 samples, 0.26%)</title><rect x="15.1026%" y="516" width="0.2619%" height="15" fill="rgb(237,122,38)" fg:x="346" fg:w="6"/><text x="15.3526%" y="526.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="15.6264%" y="532" width="0.1746%" height="15" fill="rgb(244,218,35)" fg:x="358" fg:w="4"/><text x="15.8764%" y="542.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="15.6264%" y="548" width="0.1746%" height="15" fill="rgb(240,68,47)" fg:x="358" fg:w="4"/><text x="15.8764%" y="558.50"></text></g><g><title>insert (binary_tree.py:95) (11 samples, 0.48%)</title><rect x="15.4081%" y="468" width="0.4801%" height="15" fill="rgb(210,16,53)" fg:x="353" fg:w="11"/><text x="15.6581%" y="478.50"></text></g><g><title>right_subtree_height (row.py:89) (10 samples, 0.44%)</title><rect x="15.4518%" y="484" width="0.4365%" height="15" fill="rgb(235,124,12)" fg:x="354" fg:w="10"/><text x="15.7018%" y="494.50"></text></g><g><title>right_child (row.py:77) (10 samples, 0.44%)</title><rect x="15.4518%" y="500" width="0.4365%" height="15" fill="rgb(224,169,11)" fg:x="354" fg:w="10"/><text x="15.7018%" y="510.50"></text></g><g><title>fetch_row (row.py:160) (10 samples, 0.44%)</title><rect x="15.4518%" y="516" width="0.4365%" height="15" fill="rgb(250,166,2)" fg:x="354" fg:w="10"/><text x="15.7018%" y="526.50"></text></g><g><title>insert (binary_tree.py:89) (42 samples, 1.83%)</title><rect x="14.1859%" y="452" width="1.8333%" height="15" fill="rgb(242,216,29)" fg:x="325" fg:w="42"/><text x="14.4359%" y="462.50">i..</text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="15.8883%" y="468" width="0.1309%" height="15" fill="rgb(230,116,27)" fg:x="364" fg:w="3"/><text x="16.1383%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (3 samples, 0.13%)</title><rect x="15.8883%" y="484" width="0.1309%" height="15" fill="rgb(228,99,48)" fg:x="364" fg:w="3"/><text x="16.1383%" y="494.50"></text></g><g><title>insert (binary_tree.py:92) (9 samples, 0.39%)</title><rect x="16.0192%" y="452" width="0.3928%" height="15" fill="rgb(253,11,6)" fg:x="367" fg:w="9"/><text x="16.2692%" y="462.50"></text></g><g><title>right_subtree_height (row.py:89) (7 samples, 0.31%)</title><rect x="16.1065%" y="468" width="0.3055%" height="15" fill="rgb(247,143,39)" fg:x="369" fg:w="7"/><text x="16.3565%" y="478.50"></text></g><g><title>right_child (row.py:77) (7 samples, 0.31%)</title><rect x="16.1065%" y="484" width="0.3055%" height="15" fill="rgb(236,97,10)" fg:x="369" fg:w="7"/><text x="16.3565%" y="494.50"></text></g><g><title>fetch_row (row.py:160) (6 samples, 0.26%)</title><rect x="16.1502%" y="500" width="0.2619%" height="15" fill="rgb(233,208,19)" fg:x="370" fg:w="6"/><text x="16.4002%" y="510.50"></text></g><g><title>insert (binary_tree.py:93) (4 samples, 0.17%)</title><rect x="16.4120%" y="452" width="0.1746%" height="15" fill="rgb(216,164,2)" fg:x="376" fg:w="4"/><text x="16.6620%" y="462.50"></text></g><g><title>write_to_page (row.py:111) (4 samples, 0.17%)</title><rect x="16.4120%" y="468" width="0.1746%" height="15" fill="rgb(220,129,5)" fg:x="376" fg:w="4"/><text x="16.6620%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (4 samples, 0.17%)</title><rect x="16.6303%" y="500" width="0.1746%" height="15" fill="rgb(242,17,10)" fg:x="381" fg:w="4"/><text x="16.8803%" y="510.50"></text></g><g><title>left_subtree_height (row.py:85) (5 samples, 0.22%)</title><rect x="16.6303%" y="468" width="0.2182%" height="15" fill="rgb(242,107,0)" fg:x="381" fg:w="5"/><text x="16.8803%" y="478.50"></text></g><g><title>left_child (row.py:81) (5 samples, 0.22%)</title><rect x="16.6303%" y="484" width="0.2182%" height="15" fill="rgb(251,28,31)" fg:x="381" fg:w="5"/><text x="16.8803%" y="494.50"></text></g><g><title>fetch_row (row.py:158) (3 samples, 0.13%)</title><rect x="16.8485%" y="500" width="0.1309%" height="15" fill="rgb(233,223,10)" fg:x="386" fg:w="3"/><text x="17.0985%" y="510.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (3 samples, 0.13%)</title><rect x="16.8485%" y="516" width="0.1309%" height="15" fill="rgb(215,21,27)" fg:x="386" fg:w="3"/><text x="17.0985%" y="526.50"></text></g><g><title>deserialize (row.py:144) (3 samples, 0.13%)</title><rect x="17.1977%" y="516" width="0.1309%" height="15" fill="rgb(232,23,21)" fg:x="394" fg:w="3"/><text x="17.4477%" y="526.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="17.1977%" y="532" width="0.1309%" height="15" fill="rgb(244,5,23)" fg:x="394" fg:w="3"/><text x="17.4477%" y="542.50"></text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="17.1977%" y="548" width="0.1309%" height="15" fill="rgb(226,81,46)" fg:x="394" fg:w="3"/><text x="17.4477%" y="558.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="17.3723%" y="532" width="0.1309%" height="15" fill="rgb(247,70,30)" fg:x="398" fg:w="3"/><text x="17.6223%" y="542.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="17.3723%" y="548" width="0.1309%" height="15" fill="rgb(212,68,19)" fg:x="398" fg:w="3"/><text x="17.6223%" y="558.50"></text></g><g><title>insert (binary_tree.py:95) (26 samples, 1.13%)</title><rect x="16.5866%" y="452" width="1.1349%" height="15" fill="rgb(240,187,13)" fg:x="380" fg:w="26"/><text x="16.8366%" y="462.50"></text></g><g><title>right_subtree_height (row.py:89) (20 samples, 0.87%)</title><rect x="16.8485%" y="468" width="0.8730%" height="15" fill="rgb(223,113,26)" fg:x="386" fg:w="20"/><text x="17.0985%" y="478.50"></text></g><g><title>right_child (row.py:77) (20 samples, 0.87%)</title><rect x="16.8485%" y="484" width="0.8730%" height="15" fill="rgb(206,192,2)" fg:x="386" fg:w="20"/><text x="17.0985%" y="494.50"></text></g><g><title>fetch_row (row.py:160) (16 samples, 0.70%)</title><rect x="17.0231%" y="500" width="0.6984%" height="15" fill="rgb(241,108,4)" fg:x="390" fg:w="16"/><text x="17.2731%" y="510.50"></text></g><g><title>deserialize (row.py:147) (8 samples, 0.35%)</title><rect x="17.3723%" y="516" width="0.3492%" height="15" fill="rgb(247,173,49)" fg:x="398" fg:w="8"/><text x="17.6223%" y="526.50"></text></g><g><title>insert (binary_tree.py:89) (102 samples, 4.45%)</title><rect x="13.4439%" y="436" width="4.4522%" height="15" fill="rgb(224,114,35)" fg:x="308" fg:w="102"/><text x="13.6939%" y="446.50">inser..</text></g><g><title>right_child (row.py:77) (4 samples, 0.17%)</title><rect x="17.7215%" y="452" width="0.1746%" height="15" fill="rgb(245,159,27)" fg:x="406" fg:w="4"/><text x="17.9715%" y="462.50"></text></g><g><title>insert (binary_tree.py:92) (12 samples, 0.52%)</title><rect x="17.8961%" y="436" width="0.5238%" height="15" fill="rgb(245,172,44)" fg:x="410" fg:w="12"/><text x="18.1461%" y="446.50"></text></g><g><title>right_subtree_height (row.py:89) (11 samples, 0.48%)</title><rect x="17.9398%" y="452" width="0.4801%" height="15" fill="rgb(236,23,11)" fg:x="411" fg:w="11"/><text x="18.1898%" y="462.50"></text></g><g><title>right_child (row.py:77) (11 samples, 0.48%)</title><rect x="17.9398%" y="468" width="0.4801%" height="15" fill="rgb(205,117,38)" fg:x="411" fg:w="11"/><text x="18.1898%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (9 samples, 0.39%)</title><rect x="18.0271%" y="484" width="0.3928%" height="15" fill="rgb(237,72,25)" fg:x="413" fg:w="9"/><text x="18.2771%" y="494.50"></text></g><g><title>insert (binary_tree.py:93) (3 samples, 0.13%)</title><rect x="18.4199%" y="436" width="0.1309%" height="15" fill="rgb(244,70,9)" fg:x="422" fg:w="3"/><text x="18.6699%" y="446.50"></text></g><g><title>write_to_page (row.py:111) (3 samples, 0.13%)</title><rect x="18.4199%" y="452" width="0.1309%" height="15" fill="rgb(217,125,39)" fg:x="422" fg:w="3"/><text x="18.6699%" y="462.50"></text></g><g><title>left_subtree_height (row.py:85) (5 samples, 0.22%)</title><rect x="18.5509%" y="452" width="0.2182%" height="15" fill="rgb(235,36,10)" fg:x="425" fg:w="5"/><text x="18.8009%" y="462.50"></text></g><g><title>left_child (row.py:81) (5 samples, 0.22%)</title><rect x="18.5509%" y="468" width="0.2182%" height="15" fill="rgb(251,123,47)" fg:x="425" fg:w="5"/><text x="18.8009%" y="478.50"></text></g><g><title>fetch_row (row.py:160) (5 samples, 0.22%)</title><rect x="18.5509%" y="484" width="0.2182%" height="15" fill="rgb(221,13,13)" fg:x="425" fg:w="5"/><text x="18.8009%" y="494.50"></text></g><g><title>deserialize (row.py:142) (6 samples, 0.26%)</title><rect x="18.9000%" y="500" width="0.2619%" height="15" fill="rgb(238,131,9)" fg:x="433" fg:w="6"/><text x="19.1500%" y="510.50"></text></g><g><title>deserialize (data_types.py:171) (6 samples, 0.26%)</title><rect x="18.9000%" y="516" width="0.2619%" height="15" fill="rgb(211,50,8)" fg:x="433" fg:w="6"/><text x="19.1500%" y="526.50"></text></g><g><title>__init__ (data_types.py:13) (6 samples, 0.26%)</title><rect x="18.9000%" y="532" width="0.2619%" height="15" fill="rgb(245,182,24)" fg:x="433" fg:w="6"/><text x="19.1500%" y="542.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="19.1619%" y="500" width="0.1746%" height="15" fill="rgb(242,14,37)" fg:x="439" fg:w="4"/><text x="19.4119%" y="510.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="19.1619%" y="516" width="0.1746%" height="15" fill="rgb(246,228,12)" fg:x="439" fg:w="4"/><text x="19.4119%" y="526.50"></text></g><g><title>fetch_row (row.py:160) (15 samples, 0.65%)</title><rect x="18.8127%" y="484" width="0.6547%" height="15" fill="rgb(213,55,15)" fg:x="431" fg:w="15"/><text x="19.0627%" y="494.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="19.3365%" y="500" width="0.1309%" height="15" fill="rgb(209,9,3)" fg:x="443" fg:w="3"/><text x="19.5865%" y="510.50"></text></g><g><title>insert (binary_tree.py:95) (22 samples, 0.96%)</title><rect x="18.5509%" y="436" width="0.9603%" height="15" fill="rgb(230,59,30)" fg:x="425" fg:w="22"/><text x="18.8009%" y="446.50"></text></g><g><title>right_subtree_height (row.py:89) (17 samples, 0.74%)</title><rect x="18.7691%" y="452" width="0.7420%" height="15" fill="rgb(209,121,21)" fg:x="430" fg:w="17"/><text x="19.0191%" y="462.50"></text></g><g><title>right_child (row.py:77) (17 samples, 0.74%)</title><rect x="18.7691%" y="468" width="0.7420%" height="15" fill="rgb(220,109,13)" fg:x="430" fg:w="17"/><text x="19.0191%" y="478.50"></text></g><g><title>insert (binary_tree.py:89) (153 samples, 6.68%)</title><rect x="12.9201%" y="420" width="6.6783%" height="15" fill="rgb(232,18,1)" fg:x="296" fg:w="153"/><text x="13.1701%" y="430.50">insert (b..</text></g><g><title>deserialize (row.py:141) (3 samples, 0.13%)</title><rect x="19.8167%" y="484" width="0.1309%" height="15" fill="rgb(215,41,42)" fg:x="454" fg:w="3"/><text x="20.0667%" y="494.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="19.8167%" y="500" width="0.1309%" height="15" fill="rgb(224,123,36)" fg:x="454" fg:w="3"/><text x="20.0667%" y="510.50"></text></g><g><title>fetch_row (row.py:160) (8 samples, 0.35%)</title><rect x="19.8167%" y="468" width="0.3492%" height="15" fill="rgb(240,125,3)" fg:x="454" fg:w="8"/><text x="20.0667%" y="478.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="20.0349%" y="484" width="0.1309%" height="15" fill="rgb(205,98,50)" fg:x="459" fg:w="3"/><text x="20.2849%" y="494.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="20.0349%" y="500" width="0.1309%" height="15" fill="rgb(205,185,37)" fg:x="459" fg:w="3"/><text x="20.2849%" y="510.50"></text></g><g><title>insert (binary_tree.py:92) (12 samples, 0.52%)</title><rect x="19.6857%" y="420" width="0.5238%" height="15" fill="rgb(238,207,15)" fg:x="451" fg:w="12"/><text x="19.9357%" y="430.50"></text></g><g><title>right_subtree_height (row.py:89) (11 samples, 0.48%)</title><rect x="19.7294%" y="436" width="0.4801%" height="15" fill="rgb(213,199,42)" fg:x="452" fg:w="11"/><text x="19.9794%" y="446.50"></text></g><g><title>right_child (row.py:77) (11 samples, 0.48%)</title><rect x="19.7294%" y="452" width="0.4801%" height="15" fill="rgb(235,201,11)" fg:x="452" fg:w="11"/><text x="19.9794%" y="462.50"></text></g><g><title>insert (binary_tree.py:93) (3 samples, 0.13%)</title><rect x="20.2095%" y="420" width="0.1309%" height="15" fill="rgb(207,46,11)" fg:x="463" fg:w="3"/><text x="20.4595%" y="430.50"></text></g><g><title>write_to_page (row.py:111) (3 samples, 0.13%)</title><rect x="20.2095%" y="436" width="0.1309%" height="15" fill="rgb(241,35,35)" fg:x="463" fg:w="3"/><text x="20.4595%" y="446.50"></text></g><g><title>deserialize (row.py:141) (3 samples, 0.13%)</title><rect x="20.4278%" y="484" width="0.1309%" height="15" fill="rgb(243,32,47)" fg:x="468" fg:w="3"/><text x="20.6778%" y="494.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="20.4278%" y="500" width="0.1309%" height="15" fill="rgb(247,202,23)" fg:x="468" fg:w="3"/><text x="20.6778%" y="510.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="20.4278%" y="516" width="0.1309%" height="15" fill="rgb(219,102,11)" fg:x="468" fg:w="3"/><text x="20.6778%" y="526.50"></text></g><g><title>left_subtree_height (row.py:85) (10 samples, 0.44%)</title><rect x="20.3841%" y="436" width="0.4365%" height="15" fill="rgb(243,110,44)" fg:x="467" fg:w="10"/><text x="20.6341%" y="446.50"></text></g><g><title>left_child (row.py:81) (9 samples, 0.39%)</title><rect x="20.4278%" y="452" width="0.3928%" height="15" fill="rgb(222,74,54)" fg:x="468" fg:w="9"/><text x="20.6778%" y="462.50"></text></g><g><title>fetch_row (row.py:160) (9 samples, 0.39%)</title><rect x="20.4278%" y="468" width="0.3928%" height="15" fill="rgb(216,99,12)" fg:x="468" fg:w="9"/><text x="20.6778%" y="478.50"></text></g><g><title>deserialize (row.py:147) (5 samples, 0.22%)</title><rect x="20.6024%" y="484" width="0.2182%" height="15" fill="rgb(226,22,26)" fg:x="472" fg:w="5"/><text x="20.8524%" y="494.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="20.6897%" y="500" width="0.1309%" height="15" fill="rgb(217,163,10)" fg:x="474" fg:w="3"/><text x="20.9397%" y="510.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="20.6897%" y="516" width="0.1309%" height="15" fill="rgb(213,25,53)" fg:x="474" fg:w="3"/><text x="20.9397%" y="526.50"></text></g><g><title>fetch_row (row.py:158) (6 samples, 0.26%)</title><rect x="20.8206%" y="468" width="0.2619%" height="15" fill="rgb(252,105,26)" fg:x="477" fg:w="6"/><text x="21.0706%" y="478.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (6 samples, 0.26%)</title><rect x="20.8206%" y="484" width="0.2619%" height="15" fill="rgb(220,39,43)" fg:x="477" fg:w="6"/><text x="21.0706%" y="494.50"></text></g><g><title>deserialize (row.py:143) (3 samples, 0.13%)</title><rect x="21.1261%" y="484" width="0.1309%" height="15" fill="rgb(229,68,48)" fg:x="484" fg:w="3"/><text x="21.3761%" y="494.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="21.1261%" y="500" width="0.1309%" height="15" fill="rgb(252,8,32)" fg:x="484" fg:w="3"/><text x="21.3761%" y="510.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="21.1261%" y="516" width="0.1309%" height="15" fill="rgb(223,20,43)" fg:x="484" fg:w="3"/><text x="21.3761%" y="526.50"></text></g><g><title>fetch_row (row.py:160) (14 samples, 0.61%)</title><rect x="21.0825%" y="468" width="0.6111%" height="15" fill="rgb(229,81,49)" fg:x="483" fg:w="14"/><text x="21.3325%" y="478.50"></text></g><g><title>deserialize (row.py:147) (6 samples, 0.26%)</title><rect x="21.4317%" y="484" width="0.2619%" height="15" fill="rgb(236,28,36)" fg:x="491" fg:w="6"/><text x="21.6817%" y="494.50"></text></g><g><title>insert (binary_tree.py:95) (36 samples, 1.57%)</title><rect x="20.3405%" y="420" width="1.5714%" height="15" fill="rgb(249,185,26)" fg:x="466" fg:w="36"/><text x="20.5905%" y="430.50"></text></g><g><title>right_subtree_height (row.py:89) (25 samples, 1.09%)</title><rect x="20.8206%" y="436" width="1.0912%" height="15" fill="rgb(249,174,33)" fg:x="477" fg:w="25"/><text x="21.0706%" y="446.50"></text></g><g><title>right_child (row.py:77) (25 samples, 1.09%)</title><rect x="20.8206%" y="452" width="1.0912%" height="15" fill="rgb(233,201,37)" fg:x="477" fg:w="25"/><text x="21.0706%" y="462.50"></text></g><g><title>fetch_row (row.py:161) (5 samples, 0.22%)</title><rect x="21.6936%" y="468" width="0.2182%" height="15" fill="rgb(221,78,26)" fg:x="497" fg:w="5"/><text x="21.9436%" y="478.50"></text></g><g><title>insert (binary_tree.py:89) (224 samples, 9.78%)</title><rect x="12.2654%" y="404" width="9.7774%" height="15" fill="rgb(250,127,30)" fg:x="281" fg:w="224"/><text x="12.5154%" y="414.50">insert (binary..</text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="21.9118%" y="420" width="0.1309%" height="15" fill="rgb(230,49,44)" fg:x="502" fg:w="3"/><text x="22.1618%" y="430.50"></text></g><g><title>fetch_row (row.py:160) (3 samples, 0.13%)</title><rect x="21.9118%" y="436" width="0.1309%" height="15" fill="rgb(229,67,23)" fg:x="502" fg:w="3"/><text x="22.1618%" y="446.50"></text></g><g><title>fetch_row (row.py:158) (3 samples, 0.13%)</title><rect x="22.1301%" y="452" width="0.1309%" height="15" fill="rgb(249,83,47)" fg:x="507" fg:w="3"/><text x="22.3801%" y="462.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (3 samples, 0.13%)</title><rect x="22.1301%" y="468" width="0.1309%" height="15" fill="rgb(215,43,3)" fg:x="507" fg:w="3"/><text x="22.3801%" y="478.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="22.1301%" y="484" width="0.1309%" height="15" fill="rgb(238,154,13)" fg:x="507" fg:w="3"/><text x="22.3801%" y="494.50"></text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="22.1301%" y="500" width="0.1309%" height="15" fill="rgb(219,56,2)" fg:x="507" fg:w="3"/><text x="22.3801%" y="510.50"></text></g><g><title>deserialize (row.py:141) (4 samples, 0.17%)</title><rect x="22.2610%" y="468" width="0.1746%" height="15" fill="rgb(233,0,4)" fg:x="510" fg:w="4"/><text x="22.5110%" y="478.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="22.2610%" y="484" width="0.1746%" height="15" fill="rgb(235,30,7)" fg:x="510" fg:w="4"/><text x="22.5110%" y="494.50"></text></g><g><title>deserialize (row.py:142) (4 samples, 0.17%)</title><rect x="22.4356%" y="468" width="0.1746%" height="15" fill="rgb(250,79,13)" fg:x="514" fg:w="4"/><text x="22.6856%" y="478.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="22.6975%" y="468" width="0.1309%" height="15" fill="rgb(211,146,34)" fg:x="520" fg:w="3"/><text x="22.9475%" y="478.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="22.6975%" y="484" width="0.1309%" height="15" fill="rgb(228,22,38)" fg:x="520" fg:w="3"/><text x="22.9475%" y="494.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="22.6975%" y="500" width="0.1309%" height="15" fill="rgb(235,168,5)" fg:x="520" fg:w="3"/><text x="22.9475%" y="510.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="22.8721%" y="484" width="0.1309%" height="15" fill="rgb(221,155,16)" fg:x="524" fg:w="3"/><text x="23.1221%" y="494.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="22.8721%" y="500" width="0.1309%" height="15" fill="rgb(215,215,53)" fg:x="524" fg:w="3"/><text x="23.1221%" y="510.50"></text></g><g><title>fetch_row (row.py:160) (18 samples, 0.79%)</title><rect x="22.2610%" y="452" width="0.7857%" height="15" fill="rgb(223,4,10)" fg:x="510" fg:w="18"/><text x="22.5110%" y="462.50"></text></g><g><title>deserialize (row.py:147) (5 samples, 0.22%)</title><rect x="22.8285%" y="468" width="0.2182%" height="15" fill="rgb(234,103,6)" fg:x="523" fg:w="5"/><text x="23.0785%" y="478.50"></text></g><g><title>insert (binary_tree.py:92) (25 samples, 1.09%)</title><rect x="22.0428%" y="404" width="1.0912%" height="15" fill="rgb(227,97,0)" fg:x="505" fg:w="25"/><text x="22.2928%" y="414.50"></text></g><g><title>right_subtree_height (row.py:89) (23 samples, 1.00%)</title><rect x="22.1301%" y="420" width="1.0039%" height="15" fill="rgb(234,150,53)" fg:x="507" fg:w="23"/><text x="22.3801%" y="430.50"></text></g><g><title>right_child (row.py:77) (23 samples, 1.00%)</title><rect x="22.1301%" y="436" width="1.0039%" height="15" fill="rgb(228,201,54)" fg:x="507" fg:w="23"/><text x="22.3801%" y="446.50"></text></g><g><title>insert (binary_tree.py:93) (4 samples, 0.17%)</title><rect x="23.1340%" y="404" width="0.1746%" height="15" fill="rgb(222,22,37)" fg:x="530" fg:w="4"/><text x="23.3840%" y="414.50"></text></g><g><title>write_to_page (row.py:111) (4 samples, 0.17%)</title><rect x="23.1340%" y="420" width="0.1746%" height="15" fill="rgb(237,53,32)" fg:x="530" fg:w="4"/><text x="23.3840%" y="430.50"></text></g><g><title>page_write (pager.py:93) (3 samples, 0.13%)</title><rect x="23.1777%" y="436" width="0.1309%" height="15" fill="rgb(233,25,53)" fg:x="531" fg:w="3"/><text x="23.4277%" y="446.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (3 samples, 0.13%)</title><rect x="23.1777%" y="452" width="0.1309%" height="15" fill="rgb(210,40,34)" fg:x="531" fg:w="3"/><text x="23.4277%" y="462.50"></text></g><g><title>deserialize (row.py:141) (6 samples, 0.26%)</title><rect x="23.4395%" y="468" width="0.2619%" height="15" fill="rgb(241,220,44)" fg:x="537" fg:w="6"/><text x="23.6895%" y="478.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="23.5705%" y="484" width="0.1309%" height="15" fill="rgb(235,28,35)" fg:x="540" fg:w="3"/><text x="23.8205%" y="494.50"></text></g><g><title>deserialize (row.py:145) (4 samples, 0.17%)</title><rect x="23.7451%" y="468" width="0.1746%" height="15" fill="rgb(210,56,17)" fg:x="544" fg:w="4"/><text x="23.9951%" y="478.50"></text></g><g><title>deserialize (data_types.py:90) (4 samples, 0.17%)</title><rect x="23.7451%" y="484" width="0.1746%" height="15" fill="rgb(224,130,29)" fg:x="544" fg:w="4"/><text x="23.9951%" y="494.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="23.7451%" y="500" width="0.1746%" height="15" fill="rgb(235,212,8)" fg:x="544" fg:w="4"/><text x="23.9951%" y="510.50"></text></g><g><title>deserialize (row.py:147) (5 samples, 0.22%)</title><rect x="23.9197%" y="468" width="0.2182%" height="15" fill="rgb(223,33,50)" fg:x="548" fg:w="5"/><text x="24.1697%" y="478.50"></text></g><g><title>left_subtree_height (row.py:85) (18 samples, 0.79%)</title><rect x="23.3959%" y="420" width="0.7857%" height="15" fill="rgb(219,149,13)" fg:x="536" fg:w="18"/><text x="23.6459%" y="430.50"></text></g><g><title>left_child (row.py:81) (17 samples, 0.74%)</title><rect x="23.4395%" y="436" width="0.7420%" height="15" fill="rgb(250,156,29)" fg:x="537" fg:w="17"/><text x="23.6895%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (17 samples, 0.74%)</title><rect x="23.4395%" y="452" width="0.7420%" height="15" fill="rgb(216,193,19)" fg:x="537" fg:w="17"/><text x="23.6895%" y="462.50"></text></g><g><title>fetch_row (row.py:158) (5 samples, 0.22%)</title><rect x="24.1816%" y="452" width="0.2182%" height="15" fill="rgb(216,135,14)" fg:x="554" fg:w="5"/><text x="24.4316%" y="462.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (5 samples, 0.22%)</title><rect x="24.1816%" y="468" width="0.2182%" height="15" fill="rgb(241,47,5)" fg:x="554" fg:w="5"/><text x="24.4316%" y="478.50"></text></g><g><title>validate_val (data_types.py:78) (4 samples, 0.17%)</title><rect x="24.6617%" y="516" width="0.1746%" height="15" fill="rgb(233,42,35)" fg:x="565" fg:w="4"/><text x="24.9117%" y="526.50"></text></g><g><title>deserialize (row.py:145) (6 samples, 0.26%)</title><rect x="24.6181%" y="468" width="0.2619%" height="15" fill="rgb(231,13,6)" fg:x="564" fg:w="6"/><text x="24.8681%" y="478.50"></text></g><g><title>deserialize (data_types.py:90) (6 samples, 0.26%)</title><rect x="24.6181%" y="484" width="0.2619%" height="15" fill="rgb(207,181,40)" fg:x="564" fg:w="6"/><text x="24.8681%" y="494.50"></text></g><g><title>__init__ (data_types.py:13) (6 samples, 0.26%)</title><rect x="24.6181%" y="500" width="0.2619%" height="15" fill="rgb(254,173,49)" fg:x="564" fg:w="6"/><text x="24.8681%" y="510.50"></text></g><g><title>__init__ (row.py:55) (3 samples, 0.13%)</title><rect x="24.9673%" y="484" width="0.1309%" height="15" fill="rgb(221,1,38)" fg:x="572" fg:w="3"/><text x="25.2173%" y="494.50"></text></g><g><title>fetch_row (row.py:160) (18 samples, 0.79%)</title><rect x="24.3998%" y="452" width="0.7857%" height="15" fill="rgb(206,124,46)" fg:x="559" fg:w="18"/><text x="24.6498%" y="462.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="24.8800%" y="468" width="0.3055%" height="15" fill="rgb(249,21,11)" fg:x="570" fg:w="7"/><text x="25.1300%" y="478.50"></text></g><g><title>insert (binary_tree.py:95) (46 samples, 2.01%)</title><rect x="23.3086%" y="404" width="2.0079%" height="15" fill="rgb(222,201,40)" fg:x="534" fg:w="46"/><text x="23.5586%" y="414.50">i..</text></g><g><title>right_subtree_height (row.py:89) (26 samples, 1.13%)</title><rect x="24.1816%" y="420" width="1.1349%" height="15" fill="rgb(235,61,29)" fg:x="554" fg:w="26"/><text x="24.4316%" y="430.50"></text></g><g><title>right_child (row.py:77) (26 samples, 1.13%)</title><rect x="24.1816%" y="436" width="1.1349%" height="15" fill="rgb(219,207,3)" fg:x="554" fg:w="26"/><text x="24.4316%" y="446.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="25.1855%" y="452" width="0.1309%" height="15" fill="rgb(222,56,46)" fg:x="577" fg:w="3"/><text x="25.4355%" y="462.50"></text></g><g><title>insert (binary_tree.py:89) (313 samples, 13.66%)</title><rect x="11.8725%" y="388" width="13.6622%" height="15" fill="rgb(239,76,54)" fg:x="272" fg:w="313"/><text x="12.1225%" y="398.50">insert (binary_tree.p..</text></g><g><title>right_child (row.py:77) (5 samples, 0.22%)</title><rect x="25.3165%" y="404" width="0.2182%" height="15" fill="rgb(231,124,27)" fg:x="580" fg:w="5"/><text x="25.5665%" y="414.50"></text></g><g><title>fetch_row (row.py:160) (4 samples, 0.17%)</title><rect x="25.3601%" y="420" width="0.1746%" height="15" fill="rgb(249,195,6)" fg:x="581" fg:w="4"/><text x="25.6101%" y="430.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="26.0585%" y="468" width="0.1309%" height="15" fill="rgb(237,174,47)" fg:x="597" fg:w="3"/><text x="26.3085%" y="478.50"></text></g><g><title>insert (binary_tree.py:92) (17 samples, 0.74%)</title><rect x="25.5347%" y="388" width="0.7420%" height="15" fill="rgb(206,201,31)" fg:x="585" fg:w="17"/><text x="25.7847%" y="398.50"></text></g><g><title>right_subtree_height (row.py:89) (17 samples, 0.74%)</title><rect x="25.5347%" y="404" width="0.7420%" height="15" fill="rgb(231,57,52)" fg:x="585" fg:w="17"/><text x="25.7847%" y="414.50"></text></g><g><title>right_child (row.py:77) (17 samples, 0.74%)</title><rect x="25.5347%" y="420" width="0.7420%" height="15" fill="rgb(248,177,22)" fg:x="585" fg:w="17"/><text x="25.7847%" y="430.50"></text></g><g><title>fetch_row (row.py:160) (15 samples, 0.65%)</title><rect x="25.6220%" y="436" width="0.6547%" height="15" fill="rgb(215,211,37)" fg:x="587" fg:w="15"/><text x="25.8720%" y="446.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="25.9712%" y="452" width="0.3055%" height="15" fill="rgb(241,128,51)" fg:x="595" fg:w="7"/><text x="26.2212%" y="462.50"></text></g><g><title>fetch_row (row.py:160) (9 samples, 0.39%)</title><rect x="26.5386%" y="436" width="0.3928%" height="15" fill="rgb(227,165,31)" fg:x="608" fg:w="9"/><text x="26.7886%" y="446.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="26.8005%" y="452" width="0.1309%" height="15" fill="rgb(228,167,24)" fg:x="614" fg:w="3"/><text x="27.0505%" y="462.50"></text></g><g><title>left_subtree_height (row.py:85) (14 samples, 0.61%)</title><rect x="26.4077%" y="404" width="0.6111%" height="15" fill="rgb(228,143,12)" fg:x="605" fg:w="14"/><text x="26.6577%" y="414.50"></text></g><g><title>left_child (row.py:81) (13 samples, 0.57%)</title><rect x="26.4513%" y="420" width="0.5674%" height="15" fill="rgb(249,149,8)" fg:x="606" fg:w="13"/><text x="26.7013%" y="430.50"></text></g><g><title>insert (binary_tree.py:95) (26 samples, 1.13%)</title><rect x="26.3640%" y="388" width="1.1349%" height="15" fill="rgb(243,35,44)" fg:x="604" fg:w="26"/><text x="26.6140%" y="398.50"></text></g><g><title>right_subtree_height (row.py:89) (11 samples, 0.48%)</title><rect x="27.0188%" y="404" width="0.4801%" height="15" fill="rgb(246,89,9)" fg:x="619" fg:w="11"/><text x="27.2688%" y="414.50"></text></g><g><title>right_child (row.py:77) (9 samples, 0.39%)</title><rect x="27.1061%" y="420" width="0.3928%" height="15" fill="rgb(233,213,13)" fg:x="621" fg:w="9"/><text x="27.3561%" y="430.50"></text></g><g><title>fetch_row (row.py:160) (9 samples, 0.39%)</title><rect x="27.1061%" y="436" width="0.3928%" height="15" fill="rgb(233,141,41)" fg:x="621" fg:w="9"/><text x="27.3561%" y="446.50"></text></g><g><title>deserialize (row.py:147) (4 samples, 0.17%)</title><rect x="27.3243%" y="452" width="0.1746%" height="15" fill="rgb(239,167,4)" fg:x="626" fg:w="4"/><text x="27.5743%" y="462.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="27.5426%" y="420" width="0.1309%" height="15" fill="rgb(209,217,16)" fg:x="631" fg:w="3"/><text x="27.7926%" y="430.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="27.5426%" y="436" width="0.1309%" height="15" fill="rgb(219,88,35)" fg:x="631" fg:w="3"/><text x="27.7926%" y="446.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="27.5426%" y="452" width="0.1309%" height="15" fill="rgb(220,193,23)" fg:x="631" fg:w="3"/><text x="27.7926%" y="462.50"></text></g><g><title>insert (binary_tree.py:89) (368 samples, 16.06%)</title><rect x="11.6979%" y="372" width="16.0629%" height="15" fill="rgb(230,90,52)" fg:x="268" fg:w="368"/><text x="11.9479%" y="382.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (6 samples, 0.26%)</title><rect x="27.4989%" y="388" width="0.2619%" height="15" fill="rgb(252,106,19)" fg:x="630" fg:w="6"/><text x="27.7489%" y="398.50"></text></g><g><title>fetch_row (row.py:160) (6 samples, 0.26%)</title><rect x="27.4989%" y="404" width="0.2619%" height="15" fill="rgb(206,74,20)" fg:x="630" fg:w="6"/><text x="27.7489%" y="414.50"></text></g><g><title>fetch_row (row.py:158) (4 samples, 0.17%)</title><rect x="27.7608%" y="420" width="0.1746%" height="15" fill="rgb(230,138,44)" fg:x="636" fg:w="4"/><text x="28.0108%" y="430.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="27.7608%" y="436" width="0.1746%" height="15" fill="rgb(235,182,43)" fg:x="636" fg:w="4"/><text x="28.0108%" y="446.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="27.8045%" y="452" width="0.1309%" height="15" fill="rgb(242,16,51)" fg:x="637" fg:w="3"/><text x="28.0545%" y="462.50"></text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="27.8045%" y="468" width="0.1309%" height="15" fill="rgb(248,9,4)" fg:x="637" fg:w="3"/><text x="28.0545%" y="478.50"></text></g><g><title>deserialize (row.py:147) (5 samples, 0.22%)</title><rect x="28.1100%" y="436" width="0.2182%" height="15" fill="rgb(210,31,22)" fg:x="644" fg:w="5"/><text x="28.3600%" y="446.50"></text></g><g><title>__init__ (row.py:54) (3 samples, 0.13%)</title><rect x="28.1973%" y="452" width="0.1309%" height="15" fill="rgb(239,54,39)" fg:x="646" fg:w="3"/><text x="28.4473%" y="462.50"></text></g><g><title>fetch_row (row.py:160) (11 samples, 0.48%)</title><rect x="27.9354%" y="420" width="0.4801%" height="15" fill="rgb(230,99,41)" fg:x="640" fg:w="11"/><text x="28.1854%" y="430.50"></text></g><g><title>insert (binary_tree.py:92) (18 samples, 0.79%)</title><rect x="27.7608%" y="372" width="0.7857%" height="15" fill="rgb(253,106,12)" fg:x="636" fg:w="18"/><text x="28.0108%" y="382.50"></text></g><g><title>right_subtree_height (row.py:89) (18 samples, 0.79%)</title><rect x="27.7608%" y="388" width="0.7857%" height="15" fill="rgb(213,46,41)" fg:x="636" fg:w="18"/><text x="28.0108%" y="398.50"></text></g><g><title>right_child (row.py:77) (18 samples, 0.79%)</title><rect x="27.7608%" y="404" width="0.7857%" height="15" fill="rgb(215,133,35)" fg:x="636" fg:w="18"/><text x="28.0108%" y="414.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="28.4155%" y="420" width="0.1309%" height="15" fill="rgb(213,28,5)" fg:x="651" fg:w="3"/><text x="28.6655%" y="430.50"></text></g><g><title>fetch_row (row.py:158) (4 samples, 0.17%)</title><rect x="28.6774%" y="420" width="0.1746%" height="15" fill="rgb(215,77,49)" fg:x="657" fg:w="4"/><text x="28.9274%" y="430.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="28.6774%" y="436" width="0.1746%" height="15" fill="rgb(248,100,22)" fg:x="657" fg:w="4"/><text x="28.9274%" y="446.50"></text></g><g><title>deserialize (row.py:147) (4 samples, 0.17%)</title><rect x="29.2012%" y="436" width="0.1746%" height="15" fill="rgb(208,67,9)" fg:x="669" fg:w="4"/><text x="29.4512%" y="446.50"></text></g><g><title>__init__ (row.py:55) (3 samples, 0.13%)</title><rect x="29.2449%" y="452" width="0.1309%" height="15" fill="rgb(219,133,21)" fg:x="670" fg:w="3"/><text x="29.4949%" y="462.50"></text></g><g><title>fetch_row (row.py:160) (13 samples, 0.57%)</title><rect x="28.8520%" y="420" width="0.5674%" height="15" fill="rgb(246,46,29)" fg:x="661" fg:w="13"/><text x="29.1020%" y="430.50"></text></g><g><title>left_subtree_height (row.py:85) (21 samples, 0.92%)</title><rect x="28.6338%" y="388" width="0.9166%" height="15" fill="rgb(246,185,52)" fg:x="656" fg:w="21"/><text x="28.8838%" y="398.50"></text></g><g><title>left_child (row.py:81) (20 samples, 0.87%)</title><rect x="28.6774%" y="404" width="0.8730%" height="15" fill="rgb(252,136,11)" fg:x="657" fg:w="20"/><text x="28.9274%" y="414.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="29.4195%" y="420" width="0.1309%" height="15" fill="rgb(219,138,53)" fg:x="674" fg:w="3"/><text x="29.6695%" y="430.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="29.8123%" y="436" width="0.1309%" height="15" fill="rgb(211,51,23)" fg:x="683" fg:w="3"/><text x="30.0623%" y="446.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="29.8123%" y="452" width="0.1309%" height="15" fill="rgb(247,221,28)" fg:x="683" fg:w="3"/><text x="30.0623%" y="462.50"></text></g><g><title>insert (binary_tree.py:95) (34 samples, 1.48%)</title><rect x="28.6338%" y="372" width="1.4841%" height="15" fill="rgb(251,222,45)" fg:x="656" fg:w="34"/><text x="28.8838%" y="382.50"></text></g><g><title>right_subtree_height (row.py:89) (13 samples, 0.57%)</title><rect x="29.5504%" y="388" width="0.5674%" height="15" fill="rgb(217,162,53)" fg:x="677" fg:w="13"/><text x="29.8004%" y="398.50"></text></g><g><title>right_child (row.py:77) (13 samples, 0.57%)</title><rect x="29.5504%" y="404" width="0.5674%" height="15" fill="rgb(229,93,14)" fg:x="677" fg:w="13"/><text x="29.8004%" y="414.50"></text></g><g><title>fetch_row (row.py:160) (10 samples, 0.44%)</title><rect x="29.6814%" y="420" width="0.4365%" height="15" fill="rgb(209,67,49)" fg:x="680" fg:w="10"/><text x="29.9314%" y="430.50"></text></g><g><title>deserialize (row.py:147) (4 samples, 0.17%)</title><rect x="29.9433%" y="436" width="0.1746%" height="15" fill="rgb(213,87,29)" fg:x="686" fg:w="4"/><text x="30.1933%" y="446.50"></text></g><g><title>insert (binary_tree.py:89) (431 samples, 18.81%)</title><rect x="11.4361%" y="356" width="18.8127%" height="15" fill="rgb(205,151,52)" fg:x="262" fg:w="431"/><text x="11.6861%" y="366.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (3 samples, 0.13%)</title><rect x="30.1179%" y="372" width="0.1309%" height="15" fill="rgb(253,215,39)" fg:x="690" fg:w="3"/><text x="30.3679%" y="382.50"></text></g><g><title>fetch_row (row.py:158) (4 samples, 0.17%)</title><rect x="30.4670%" y="404" width="0.1746%" height="15" fill="rgb(221,220,41)" fg:x="698" fg:w="4"/><text x="30.7170%" y="414.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (3 samples, 0.13%)</title><rect x="30.5107%" y="420" width="0.1309%" height="15" fill="rgb(218,133,21)" fg:x="699" fg:w="3"/><text x="30.7607%" y="430.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="30.5107%" y="436" width="0.1309%" height="15" fill="rgb(221,193,43)" fg:x="699" fg:w="3"/><text x="30.7607%" y="446.50"></text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="30.5107%" y="452" width="0.1309%" height="15" fill="rgb(240,128,52)" fg:x="699" fg:w="3"/><text x="30.7607%" y="462.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="30.8599%" y="436" width="0.1309%" height="15" fill="rgb(253,114,12)" fg:x="707" fg:w="3"/><text x="31.1099%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (12 samples, 0.52%)</title><rect x="30.6416%" y="404" width="0.5238%" height="15" fill="rgb(215,223,47)" fg:x="702" fg:w="12"/><text x="30.8916%" y="414.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="30.8599%" y="420" width="0.3055%" height="15" fill="rgb(248,225,23)" fg:x="707" fg:w="7"/><text x="31.1099%" y="430.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="31.0345%" y="436" width="0.1309%" height="15" fill="rgb(250,108,0)" fg:x="711" fg:w="3"/><text x="31.2845%" y="446.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="31.0345%" y="452" width="0.1309%" height="15" fill="rgb(228,208,7)" fg:x="711" fg:w="3"/><text x="31.2845%" y="462.50"></text></g><g><title>insert (binary_tree.py:92) (23 samples, 1.00%)</title><rect x="30.2488%" y="356" width="1.0039%" height="15" fill="rgb(244,45,10)" fg:x="693" fg:w="23"/><text x="30.4988%" y="366.50"></text></g><g><title>right_subtree_height (row.py:89) (21 samples, 0.92%)</title><rect x="30.3361%" y="372" width="0.9166%" height="15" fill="rgb(207,125,25)" fg:x="695" fg:w="21"/><text x="30.5861%" y="382.50"></text></g><g><title>right_child (row.py:77) (18 samples, 0.79%)</title><rect x="30.4670%" y="388" width="0.7857%" height="15" fill="rgb(210,195,18)" fg:x="698" fg:w="18"/><text x="30.7170%" y="398.50"></text></g><g><title>insert (binary_tree.py:93) (5 samples, 0.22%)</title><rect x="31.2527%" y="356" width="0.2182%" height="15" fill="rgb(249,80,12)" fg:x="716" fg:w="5"/><text x="31.5027%" y="366.50"></text></g><g><title>write_to_page (row.py:111) (5 samples, 0.22%)</title><rect x="31.2527%" y="372" width="0.2182%" height="15" fill="rgb(221,65,9)" fg:x="716" fg:w="5"/><text x="31.5027%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="31.7765%" y="452" width="0.1309%" height="15" fill="rgb(235,49,36)" fg:x="728" fg:w="3"/><text x="32.0265%" y="462.50"></text></g><g><title>validate_val (data_types.py:52) (3 samples, 0.13%)</title><rect x="31.7765%" y="468" width="0.1309%" height="15" fill="rgb(225,32,20)" fg:x="728" fg:w="3"/><text x="32.0265%" y="478.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="31.7765%" y="420" width="0.1746%" height="15" fill="rgb(215,141,46)" fg:x="728" fg:w="4"/><text x="32.0265%" y="430.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="31.7765%" y="436" width="0.1746%" height="15" fill="rgb(250,160,47)" fg:x="728" fg:w="4"/><text x="32.0265%" y="446.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="32.0384%" y="420" width="0.1309%" height="15" fill="rgb(216,222,40)" fg:x="734" fg:w="3"/><text x="32.2884%" y="430.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="32.0384%" y="436" width="0.1309%" height="15" fill="rgb(234,217,39)" fg:x="734" fg:w="3"/><text x="32.2884%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (15 samples, 0.65%)</title><rect x="31.6456%" y="404" width="0.6547%" height="15" fill="rgb(207,178,40)" fg:x="725" fg:w="15"/><text x="31.8956%" y="414.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="32.1694%" y="420" width="0.1309%" height="15" fill="rgb(221,136,13)" fg:x="737" fg:w="3"/><text x="32.4194%" y="430.50"></text></g><g><title>left_subtree_height (row.py:85) (18 samples, 0.79%)</title><rect x="31.5583%" y="372" width="0.7857%" height="15" fill="rgb(249,199,10)" fg:x="723" fg:w="18"/><text x="31.8083%" y="382.50"></text></g><g><title>left_child (row.py:81) (18 samples, 0.79%)</title><rect x="31.5583%" y="388" width="0.7857%" height="15" fill="rgb(249,222,13)" fg:x="723" fg:w="18"/><text x="31.8083%" y="398.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="32.4749%" y="436" width="0.1746%" height="15" fill="rgb(244,185,38)" fg:x="744" fg:w="4"/><text x="32.7249%" y="446.50"></text></g><g><title>fetch_row (row.py:158) (6 samples, 0.26%)</title><rect x="32.4749%" y="404" width="0.2619%" height="15" fill="rgb(236,202,9)" fg:x="744" fg:w="6"/><text x="32.7249%" y="414.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (6 samples, 0.26%)</title><rect x="32.4749%" y="420" width="0.2619%" height="15" fill="rgb(250,229,37)" fg:x="744" fg:w="6"/><text x="32.7249%" y="430.50"></text></g><g><title>deserialize (row.py:142) (3 samples, 0.13%)</title><rect x="32.8241%" y="420" width="0.1309%" height="15" fill="rgb(206,174,23)" fg:x="752" fg:w="3"/><text x="33.0741%" y="430.50"></text></g><g><title>deserialize (data_types.py:171) (3 samples, 0.13%)</title><rect x="32.8241%" y="436" width="0.1309%" height="15" fill="rgb(211,33,43)" fg:x="752" fg:w="3"/><text x="33.0741%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (13 samples, 0.57%)</title><rect x="32.7368%" y="404" width="0.5674%" height="15" fill="rgb(245,58,50)" fg:x="750" fg:w="13"/><text x="32.9868%" y="414.50"></text></g><g><title>deserialize (row.py:147) (5 samples, 0.22%)</title><rect x="33.0860%" y="420" width="0.2182%" height="15" fill="rgb(244,68,36)" fg:x="758" fg:w="5"/><text x="33.3360%" y="430.50"></text></g><g><title>insert (binary_tree.py:95) (44 samples, 1.92%)</title><rect x="31.4710%" y="356" width="1.9206%" height="15" fill="rgb(232,229,15)" fg:x="721" fg:w="44"/><text x="31.7210%" y="366.50">i..</text></g><g><title>right_subtree_height (row.py:89) (24 samples, 1.05%)</title><rect x="32.3440%" y="372" width="1.0476%" height="15" fill="rgb(254,30,23)" fg:x="741" fg:w="24"/><text x="32.5940%" y="382.50"></text></g><g><title>right_child (row.py:77) (23 samples, 1.00%)</title><rect x="32.3876%" y="388" width="1.0039%" height="15" fill="rgb(235,160,14)" fg:x="742" fg:w="23"/><text x="32.6376%" y="398.50"></text></g><g><title>fetch_row (row.py:160) (4 samples, 0.17%)</title><rect x="33.3915%" y="372" width="0.1746%" height="15" fill="rgb(212,155,44)" fg:x="765" fg:w="4"/><text x="33.6415%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (511 samples, 22.30%)</title><rect x="11.3051%" y="340" width="22.3047%" height="15" fill="rgb(226,2,50)" fg:x="259" fg:w="511"/><text x="11.5551%" y="350.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (5 samples, 0.22%)</title><rect x="33.3915%" y="356" width="0.2182%" height="15" fill="rgb(234,177,6)" fg:x="765" fg:w="5"/><text x="33.6415%" y="366.50"></text></g><g><title>deserialize (row.py:144) (6 samples, 0.26%)</title><rect x="34.0463%" y="404" width="0.2619%" height="15" fill="rgb(217,24,9)" fg:x="780" fg:w="6"/><text x="34.2963%" y="414.50"></text></g><g><title>deserialize (data_types.py:64) (6 samples, 0.26%)</title><rect x="34.0463%" y="420" width="0.2619%" height="15" fill="rgb(220,13,46)" fg:x="780" fg:w="6"/><text x="34.2963%" y="430.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="34.3082%" y="404" width="0.1309%" height="15" fill="rgb(239,221,27)" fg:x="786" fg:w="3"/><text x="34.5582%" y="414.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="34.3082%" y="420" width="0.1309%" height="15" fill="rgb(222,198,25)" fg:x="786" fg:w="3"/><text x="34.5582%" y="430.50"></text></g><g><title>__init__ (row.py:54) (3 samples, 0.13%)</title><rect x="34.6137%" y="420" width="0.1309%" height="15" fill="rgb(211,99,13)" fg:x="793" fg:w="3"/><text x="34.8637%" y="430.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="34.6137%" y="436" width="0.1309%" height="15" fill="rgb(232,111,31)" fg:x="793" fg:w="3"/><text x="34.8637%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (24 samples, 1.05%)</title><rect x="33.7844%" y="388" width="1.0476%" height="15" fill="rgb(245,82,37)" fg:x="774" fg:w="24"/><text x="34.0344%" y="398.50"></text></g><g><title>deserialize (row.py:147) (9 samples, 0.39%)</title><rect x="34.4391%" y="404" width="0.3928%" height="15" fill="rgb(227,149,46)" fg:x="789" fg:w="9"/><text x="34.6891%" y="414.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="34.8320%" y="404" width="0.1309%" height="15" fill="rgb(218,36,50)" fg:x="798" fg:w="3"/><text x="35.0820%" y="414.50"></text></g><g><title>insert (binary_tree.py:92) (32 samples, 1.40%)</title><rect x="33.6098%" y="340" width="1.3968%" height="15" fill="rgb(226,80,48)" fg:x="770" fg:w="32"/><text x="33.8598%" y="350.50"></text></g><g><title>right_subtree_height (row.py:89) (30 samples, 1.31%)</title><rect x="33.6971%" y="356" width="1.3095%" height="15" fill="rgb(238,224,15)" fg:x="772" fg:w="30"/><text x="33.9471%" y="366.50"></text></g><g><title>right_child (row.py:77) (30 samples, 1.31%)</title><rect x="33.6971%" y="372" width="1.3095%" height="15" fill="rgb(241,136,10)" fg:x="772" fg:w="30"/><text x="33.9471%" y="382.50"></text></g><g><title>fetch_row (row.py:161) (4 samples, 0.17%)</title><rect x="34.8320%" y="388" width="0.1746%" height="15" fill="rgb(208,32,45)" fg:x="798" fg:w="4"/><text x="35.0820%" y="398.50"></text></g><g><title>insert (binary_tree.py:93) (5 samples, 0.22%)</title><rect x="35.0065%" y="340" width="0.2182%" height="15" fill="rgb(207,135,9)" fg:x="802" fg:w="5"/><text x="35.2565%" y="350.50"></text></g><g><title>write_to_page (row.py:111) (5 samples, 0.22%)</title><rect x="35.0065%" y="356" width="0.2182%" height="15" fill="rgb(206,86,44)" fg:x="802" fg:w="5"/><text x="35.2565%" y="366.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="35.3994%" y="420" width="0.1309%" height="15" fill="rgb(245,177,15)" fg:x="811" fg:w="3"/><text x="35.6494%" y="430.50"></text></g><g><title>fetch_row (row.py:158) (8 samples, 0.35%)</title><rect x="35.3557%" y="388" width="0.3492%" height="15" fill="rgb(206,64,50)" fg:x="810" fg:w="8"/><text x="35.6057%" y="398.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (8 samples, 0.35%)</title><rect x="35.3557%" y="404" width="0.3492%" height="15" fill="rgb(234,36,40)" fg:x="810" fg:w="8"/><text x="35.6057%" y="414.50"></text></g><g><title>__new__ (data_types.py:127) (4 samples, 0.17%)</title><rect x="35.5303%" y="420" width="0.1746%" height="15" fill="rgb(213,64,8)" fg:x="814" fg:w="4"/><text x="35.7803%" y="430.50"></text></g><g><title>__init__ (row.py:53) (4 samples, 0.17%)</title><rect x="36.0105%" y="420" width="0.1746%" height="15" fill="rgb(210,75,36)" fg:x="825" fg:w="4"/><text x="36.2605%" y="430.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="36.0541%" y="436" width="0.1309%" height="15" fill="rgb(229,88,21)" fg:x="826" fg:w="3"/><text x="36.3041%" y="446.50"></text></g><g><title>fetch_row (row.py:160) (15 samples, 0.65%)</title><rect x="35.7049%" y="388" width="0.6547%" height="15" fill="rgb(252,204,47)" fg:x="818" fg:w="15"/><text x="35.9549%" y="398.50"></text></g><g><title>deserialize (row.py:147) (8 samples, 0.35%)</title><rect x="36.0105%" y="404" width="0.3492%" height="15" fill="rgb(208,77,27)" fg:x="825" fg:w="8"/><text x="36.2605%" y="414.50"></text></g><g><title>__init__ (row.py:55) (3 samples, 0.13%)</title><rect x="36.2287%" y="420" width="0.1309%" height="15" fill="rgb(221,76,26)" fg:x="830" fg:w="3"/><text x="36.4787%" y="430.50"></text></g><g><title>left_subtree_height (row.py:85) (27 samples, 1.18%)</title><rect x="35.2248%" y="356" width="1.1785%" height="15" fill="rgb(225,139,18)" fg:x="807" fg:w="27"/><text x="35.4748%" y="366.50"></text></g><g><title>left_child (row.py:81) (24 samples, 1.05%)</title><rect x="35.3557%" y="372" width="1.0476%" height="15" fill="rgb(230,137,11)" fg:x="810" fg:w="24"/><text x="35.6057%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="36.5779%" y="420" width="0.1746%" height="15" fill="rgb(212,28,1)" fg:x="838" fg:w="4"/><text x="36.8279%" y="430.50"></text></g><g><title>fetch_row (row.py:158) (7 samples, 0.31%)</title><rect x="36.4906%" y="388" width="0.3055%" height="15" fill="rgb(248,164,17)" fg:x="836" fg:w="7"/><text x="36.7406%" y="398.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (6 samples, 0.26%)</title><rect x="36.5343%" y="404" width="0.2619%" height="15" fill="rgb(222,171,42)" fg:x="837" fg:w="6"/><text x="36.7843%" y="414.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="36.8398%" y="404" width="0.1746%" height="15" fill="rgb(243,84,45)" fg:x="844" fg:w="4"/><text x="37.0898%" y="414.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="36.8398%" y="420" width="0.1746%" height="15" fill="rgb(252,49,23)" fg:x="844" fg:w="4"/><text x="37.0898%" y="430.50"></text></g><g><title>fetch_row (row.py:160) (7 samples, 0.31%)</title><rect x="36.7962%" y="388" width="0.3055%" height="15" fill="rgb(215,19,7)" fg:x="843" fg:w="7"/><text x="37.0462%" y="398.50"></text></g><g><title>insert (binary_tree.py:95) (46 samples, 2.01%)</title><rect x="35.2248%" y="340" width="2.0079%" height="15" fill="rgb(238,81,41)" fg:x="807" fg:w="46"/><text x="35.4748%" y="350.50">i..</text></g><g><title>right_subtree_height (row.py:89) (19 samples, 0.83%)</title><rect x="36.4033%" y="356" width="0.8293%" height="15" fill="rgb(210,199,37)" fg:x="834" fg:w="19"/><text x="36.6533%" y="366.50"></text></g><g><title>right_child (row.py:77) (19 samples, 0.83%)</title><rect x="36.4033%" y="372" width="0.8293%" height="15" fill="rgb(244,192,49)" fg:x="834" fg:w="19"/><text x="36.6533%" y="382.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="37.1017%" y="388" width="0.1309%" height="15" fill="rgb(226,211,11)" fg:x="850" fg:w="3"/><text x="37.3517%" y="398.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="37.1017%" y="404" width="0.1309%" height="15" fill="rgb(236,162,54)" fg:x="850" fg:w="3"/><text x="37.3517%" y="414.50"></text></g><g><title>fetch_row (row.py:160) (5 samples, 0.22%)</title><rect x="37.2763%" y="356" width="0.2182%" height="15" fill="rgb(220,229,9)" fg:x="854" fg:w="5"/><text x="37.5263%" y="366.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="37.3636%" y="372" width="0.1309%" height="15" fill="rgb(250,87,22)" fg:x="856" fg:w="3"/><text x="37.6136%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (605 samples, 26.41%)</title><rect x="11.1742%" y="324" width="26.4077%" height="15" fill="rgb(239,43,17)" fg:x="256" fg:w="605"/><text x="11.4242%" y="334.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (8 samples, 0.35%)</title><rect x="37.2326%" y="340" width="0.3492%" height="15" fill="rgb(231,177,25)" fg:x="853" fg:w="8"/><text x="37.4826%" y="350.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="37.7128%" y="404" width="0.1309%" height="15" fill="rgb(219,179,1)" fg:x="864" fg:w="3"/><text x="37.9628%" y="414.50"></text></g><g><title>validate_val (data_types.py:134) (3 samples, 0.13%)</title><rect x="37.7128%" y="420" width="0.1309%" height="15" fill="rgb(238,219,53)" fg:x="864" fg:w="3"/><text x="37.9628%" y="430.50"></text></g><g><title>fetch_row (row.py:158) (8 samples, 0.35%)</title><rect x="37.6255%" y="372" width="0.3492%" height="15" fill="rgb(232,167,36)" fg:x="862" fg:w="8"/><text x="37.8755%" y="382.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (7 samples, 0.31%)</title><rect x="37.6691%" y="388" width="0.3055%" height="15" fill="rgb(244,19,51)" fg:x="863" fg:w="7"/><text x="37.9191%" y="398.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="37.8437%" y="404" width="0.1309%" height="15" fill="rgb(224,6,22)" fg:x="867" fg:w="3"/><text x="38.0937%" y="414.50"></text></g><g><title>deserialize (row.py:142) (3 samples, 0.13%)</title><rect x="38.0620%" y="388" width="0.1309%" height="15" fill="rgb(224,145,5)" fg:x="872" fg:w="3"/><text x="38.3120%" y="398.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="38.2802%" y="420" width="0.1746%" height="15" fill="rgb(234,130,49)" fg:x="877" fg:w="4"/><text x="38.5302%" y="430.50"></text></g><g><title>deserialize (row.py:145) (5 samples, 0.22%)</title><rect x="38.2802%" y="388" width="0.2182%" height="15" fill="rgb(254,6,2)" fg:x="877" fg:w="5"/><text x="38.5302%" y="398.50"></text></g><g><title>deserialize (data_types.py:90) (5 samples, 0.22%)</title><rect x="38.2802%" y="404" width="0.2182%" height="15" fill="rgb(208,96,46)" fg:x="877" fg:w="5"/><text x="38.5302%" y="414.50"></text></g><g><title>fetch_row (row.py:160) (14 samples, 0.61%)</title><rect x="37.9747%" y="372" width="0.6111%" height="15" fill="rgb(239,3,39)" fg:x="870" fg:w="14"/><text x="38.2247%" y="382.50"></text></g><g><title>insert (binary_tree.py:92) (25 samples, 1.09%)</title><rect x="37.5818%" y="324" width="1.0912%" height="15" fill="rgb(233,210,1)" fg:x="861" fg:w="25"/><text x="37.8318%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (25 samples, 1.09%)</title><rect x="37.5818%" y="340" width="1.0912%" height="15" fill="rgb(244,137,37)" fg:x="861" fg:w="25"/><text x="37.8318%" y="350.50"></text></g><g><title>right_child (row.py:77) (25 samples, 1.09%)</title><rect x="37.5818%" y="356" width="1.0912%" height="15" fill="rgb(240,136,2)" fg:x="861" fg:w="25"/><text x="37.8318%" y="366.50"></text></g><g><title>page_write (pager.py:93) (5 samples, 0.22%)</title><rect x="38.6731%" y="356" width="0.2182%" height="15" fill="rgb(239,18,37)" fg:x="886" fg:w="5"/><text x="38.9231%" y="366.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="38.7167%" y="372" width="0.1746%" height="15" fill="rgb(218,185,22)" fg:x="887" fg:w="4"/><text x="38.9667%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="38.7167%" y="388" width="0.1746%" height="15" fill="rgb(225,218,4)" fg:x="887" fg:w="4"/><text x="38.9667%" y="398.50"></text></g><g><title>insert (binary_tree.py:93) (7 samples, 0.31%)</title><rect x="38.6731%" y="324" width="0.3055%" height="15" fill="rgb(230,182,32)" fg:x="886" fg:w="7"/><text x="38.9231%" y="334.50"></text></g><g><title>write_to_page (row.py:111) (7 samples, 0.31%)</title><rect x="38.6731%" y="340" width="0.3055%" height="15" fill="rgb(242,56,43)" fg:x="886" fg:w="7"/><text x="38.9231%" y="350.50"></text></g><g><title>fetch_row (row.py:158) (4 samples, 0.17%)</title><rect x="39.0223%" y="372" width="0.1746%" height="15" fill="rgb(233,99,24)" fg:x="894" fg:w="4"/><text x="39.2723%" y="382.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="39.0223%" y="388" width="0.1746%" height="15" fill="rgb(234,209,42)" fg:x="894" fg:w="4"/><text x="39.2723%" y="398.50"></text></g><g><title>deserialize (row.py:142) (3 samples, 0.13%)</title><rect x="39.3278%" y="388" width="0.1309%" height="15" fill="rgb(227,7,12)" fg:x="901" fg:w="3"/><text x="39.5778%" y="398.50"></text></g><g><title>fetch_row (row.py:160) (9 samples, 0.39%)</title><rect x="39.1969%" y="372" width="0.3928%" height="15" fill="rgb(245,203,43)" fg:x="898" fg:w="9"/><text x="39.4469%" y="382.50"></text></g><g><title>left_subtree_height (row.py:85) (15 samples, 0.65%)</title><rect x="38.9786%" y="340" width="0.6547%" height="15" fill="rgb(238,205,33)" fg:x="893" fg:w="15"/><text x="39.2286%" y="350.50"></text></g><g><title>left_child (row.py:81) (14 samples, 0.61%)</title><rect x="39.0223%" y="356" width="0.6111%" height="15" fill="rgb(231,56,7)" fg:x="894" fg:w="14"/><text x="39.2723%" y="366.50"></text></g><g><title>fetch_row (row.py:158) (5 samples, 0.22%)</title><rect x="39.6333%" y="372" width="0.2182%" height="15" fill="rgb(244,186,29)" fg:x="908" fg:w="5"/><text x="39.8833%" y="382.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (5 samples, 0.22%)</title><rect x="39.6333%" y="388" width="0.2182%" height="15" fill="rgb(234,111,31)" fg:x="908" fg:w="5"/><text x="39.8833%" y="398.50"></text></g><g><title>deserialize (row.py:145) (6 samples, 0.26%)</title><rect x="40.0262%" y="388" width="0.2619%" height="15" fill="rgb(241,149,10)" fg:x="917" fg:w="6"/><text x="40.2762%" y="398.50"></text></g><g><title>deserialize (data_types.py:90) (6 samples, 0.26%)</title><rect x="40.0262%" y="404" width="0.2619%" height="15" fill="rgb(249,206,44)" fg:x="917" fg:w="6"/><text x="40.2762%" y="414.50"></text></g><g><title>__init__ (row.py:55) (3 samples, 0.13%)</title><rect x="40.4190%" y="404" width="0.1309%" height="15" fill="rgb(251,153,30)" fg:x="926" fg:w="3"/><text x="40.6690%" y="414.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="40.4190%" y="420" width="0.1309%" height="15" fill="rgb(239,152,38)" fg:x="926" fg:w="3"/><text x="40.6690%" y="430.50"></text></g><g><title>fetch_row (row.py:160) (17 samples, 0.74%)</title><rect x="39.8516%" y="372" width="0.7420%" height="15" fill="rgb(249,139,47)" fg:x="913" fg:w="17"/><text x="40.1016%" y="382.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="40.2881%" y="388" width="0.3055%" height="15" fill="rgb(244,64,35)" fg:x="923" fg:w="7"/><text x="40.5381%" y="398.50"></text></g><g><title>insert (binary_tree.py:95) (38 samples, 1.66%)</title><rect x="38.9786%" y="324" width="1.6587%" height="15" fill="rgb(216,46,15)" fg:x="893" fg:w="38"/><text x="39.2286%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (23 samples, 1.00%)</title><rect x="39.6333%" y="340" width="1.0039%" height="15" fill="rgb(250,74,19)" fg:x="908" fg:w="23"/><text x="39.8833%" y="350.50"></text></g><g><title>right_child (row.py:77) (23 samples, 1.00%)</title><rect x="39.6333%" y="356" width="1.0039%" height="15" fill="rgb(249,42,33)" fg:x="908" fg:w="23"/><text x="39.8833%" y="366.50"></text></g><g><title>fetch_row (row.py:158) (3 samples, 0.13%)</title><rect x="40.6373%" y="340" width="0.1309%" height="15" fill="rgb(242,149,17)" fg:x="931" fg:w="3"/><text x="40.8873%" y="350.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (3 samples, 0.13%)</title><rect x="40.6373%" y="356" width="0.1309%" height="15" fill="rgb(244,29,21)" fg:x="931" fg:w="3"/><text x="40.8873%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (689 samples, 30.07%)</title><rect x="11.1742%" y="308" width="30.0742%" height="15" fill="rgb(220,130,37)" fg:x="256" fg:w="689"/><text x="11.4242%" y="318.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (14 samples, 0.61%)</title><rect x="40.6373%" y="324" width="0.6111%" height="15" fill="rgb(211,67,2)" fg:x="931" fg:w="14"/><text x="40.8873%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (11 samples, 0.48%)</title><rect x="40.7682%" y="340" width="0.4801%" height="15" fill="rgb(235,68,52)" fg:x="934" fg:w="11"/><text x="41.0182%" y="350.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="41.1174%" y="356" width="0.1309%" height="15" fill="rgb(246,142,3)" fg:x="942" fg:w="3"/><text x="41.3674%" y="366.50"></text></g><g><title>fetch_row (row.py:158) (5 samples, 0.22%)</title><rect x="41.3357%" y="356" width="0.2182%" height="15" fill="rgb(241,25,7)" fg:x="947" fg:w="5"/><text x="41.5857%" y="366.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="41.3793%" y="372" width="0.1746%" height="15" fill="rgb(242,119,39)" fg:x="948" fg:w="4"/><text x="41.6293%" y="382.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="41.6849%" y="372" width="0.1746%" height="15" fill="rgb(241,98,45)" fg:x="955" fg:w="4"/><text x="41.9349%" y="382.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="41.6849%" y="388" width="0.1746%" height="15" fill="rgb(254,28,30)" fg:x="955" fg:w="4"/><text x="41.9349%" y="398.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="41.9031%" y="388" width="0.1309%" height="15" fill="rgb(241,142,54)" fg:x="960" fg:w="3"/><text x="42.1531%" y="398.50"></text></g><g><title>insert (binary_tree.py:92) (22 samples, 0.96%)</title><rect x="41.2484%" y="308" width="0.9603%" height="15" fill="rgb(222,85,15)" fg:x="945" fg:w="22"/><text x="41.4984%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (21 samples, 0.92%)</title><rect x="41.2920%" y="324" width="0.9166%" height="15" fill="rgb(210,85,47)" fg:x="946" fg:w="21"/><text x="41.5420%" y="334.50"></text></g><g><title>right_child (row.py:77) (20 samples, 0.87%)</title><rect x="41.3357%" y="340" width="0.8730%" height="15" fill="rgb(224,206,25)" fg:x="947" fg:w="20"/><text x="41.5857%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (15 samples, 0.65%)</title><rect x="41.5539%" y="356" width="0.6547%" height="15" fill="rgb(243,201,19)" fg:x="952" fg:w="15"/><text x="41.8039%" y="366.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="41.9031%" y="372" width="0.3055%" height="15" fill="rgb(236,59,4)" fg:x="960" fg:w="7"/><text x="42.1531%" y="382.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="42.0777%" y="388" width="0.1309%" height="15" fill="rgb(254,179,45)" fg:x="964" fg:w="3"/><text x="42.3277%" y="398.50"></text></g><g><title>deserialize (row.py:143) (5 samples, 0.22%)</title><rect x="42.5578%" y="372" width="0.2182%" height="15" fill="rgb(226,14,10)" fg:x="975" fg:w="5"/><text x="42.8078%" y="382.50"></text></g><g><title>deserialize (data_types.py:64) (5 samples, 0.22%)</title><rect x="42.5578%" y="388" width="0.2182%" height="15" fill="rgb(244,27,41)" fg:x="975" fg:w="5"/><text x="42.8078%" y="398.50"></text></g><g><title>__init__ (row.py:53) (3 samples, 0.13%)</title><rect x="42.9070%" y="388" width="0.1309%" height="15" fill="rgb(235,35,32)" fg:x="983" fg:w="3"/><text x="43.1570%" y="398.50"></text></g><g><title>deserialize (row.py:147) (8 samples, 0.35%)</title><rect x="42.8634%" y="372" width="0.3492%" height="15" fill="rgb(218,68,31)" fg:x="982" fg:w="8"/><text x="43.1134%" y="382.50"></text></g><g><title>fetch_row (row.py:160) (18 samples, 0.79%)</title><rect x="42.5142%" y="356" width="0.7857%" height="15" fill="rgb(207,120,37)" fg:x="974" fg:w="18"/><text x="42.7642%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (26 samples, 1.13%)</title><rect x="42.2959%" y="324" width="1.1349%" height="15" fill="rgb(227,98,0)" fg:x="969" fg:w="26"/><text x="42.5459%" y="334.50"></text></g><g><title>left_child (row.py:81) (26 samples, 1.13%)</title><rect x="42.2959%" y="340" width="1.1349%" height="15" fill="rgb(207,7,3)" fg:x="969" fg:w="26"/><text x="42.5459%" y="350.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="43.2999%" y="356" width="0.1309%" height="15" fill="rgb(206,98,19)" fg:x="992" fg:w="3"/><text x="43.5499%" y="366.50"></text></g><g><title>validate_val (data_types.py:134) (3 samples, 0.13%)</title><rect x="43.6927%" y="404" width="0.1309%" height="15" fill="rgb(217,5,26)" fg:x="1001" fg:w="3"/><text x="43.9427%" y="414.50"></text></g><g><title>fetch_row (row.py:158) (7 samples, 0.31%)</title><rect x="43.5618%" y="356" width="0.3055%" height="15" fill="rgb(235,190,38)" fg:x="998" fg:w="7"/><text x="43.8118%" y="366.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (7 samples, 0.31%)</title><rect x="43.5618%" y="372" width="0.3055%" height="15" fill="rgb(247,86,24)" fg:x="998" fg:w="7"/><text x="43.8118%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="43.6927%" y="388" width="0.1746%" height="15" fill="rgb(205,101,16)" fg:x="1001" fg:w="4"/><text x="43.9427%" y="398.50"></text></g><g><title>deserialize (row.py:143) (3 samples, 0.13%)</title><rect x="43.9546%" y="372" width="0.1309%" height="15" fill="rgb(246,168,33)" fg:x="1007" fg:w="3"/><text x="44.2046%" y="382.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="43.9546%" y="388" width="0.1309%" height="15" fill="rgb(231,114,1)" fg:x="1007" fg:w="3"/><text x="44.2046%" y="398.50"></text></g><g><title>fetch_row (row.py:160) (11 samples, 0.48%)</title><rect x="43.8673%" y="356" width="0.4801%" height="15" fill="rgb(207,184,53)" fg:x="1005" fg:w="11"/><text x="44.1173%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (49 samples, 2.14%)</title><rect x="42.2959%" y="308" width="2.1388%" height="15" fill="rgb(224,95,51)" fg:x="969" fg:w="49"/><text x="42.5459%" y="318.50">i..</text></g><g><title>right_subtree_height (row.py:89) (23 samples, 1.00%)</title><rect x="43.4308%" y="324" width="1.0039%" height="15" fill="rgb(212,188,45)" fg:x="995" fg:w="23"/><text x="43.6808%" y="334.50"></text></g><g><title>right_child (row.py:77) (22 samples, 0.96%)</title><rect x="43.4745%" y="340" width="0.9603%" height="15" fill="rgb(223,154,38)" fg:x="996" fg:w="22"/><text x="43.7245%" y="350.50"></text></g><g><title>__init__ (data_types.py:13) (6 samples, 0.26%)</title><rect x="44.7839%" y="356" width="0.2619%" height="15" fill="rgb(251,22,52)" fg:x="1026" fg:w="6"/><text x="45.0339%" y="366.50"></text></g><g><title>fetch_row (row.py:158) (15 samples, 0.65%)</title><rect x="44.4784%" y="324" width="0.6547%" height="15" fill="rgb(229,209,22)" fg:x="1019" fg:w="15"/><text x="44.7284%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (11 samples, 0.48%)</title><rect x="44.6530%" y="340" width="0.4801%" height="15" fill="rgb(234,138,34)" fg:x="1023" fg:w="11"/><text x="44.9030%" y="350.50"></text></g><g><title>deserialize (row.py:144) (4 samples, 0.17%)</title><rect x="45.5260%" y="340" width="0.1746%" height="15" fill="rgb(212,95,11)" fg:x="1043" fg:w="4"/><text x="45.7760%" y="350.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="45.5696%" y="356" width="0.1309%" height="15" fill="rgb(240,179,47)" fg:x="1044" fg:w="3"/><text x="45.8196%" y="366.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="45.8752%" y="372" width="0.1309%" height="15" fill="rgb(240,163,11)" fg:x="1051" fg:w="3"/><text x="46.1252%" y="382.50"></text></g><g><title>__init__ (row.py:55) (4 samples, 0.17%)</title><rect x="45.8752%" y="356" width="0.1746%" height="15" fill="rgb(236,37,12)" fg:x="1051" fg:w="4"/><text x="46.1252%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (23 samples, 1.00%)</title><rect x="45.1331%" y="324" width="1.0039%" height="15" fill="rgb(232,164,16)" fg:x="1034" fg:w="23"/><text x="45.3831%" y="334.50"></text></g><g><title>deserialize (row.py:147) (8 samples, 0.35%)</title><rect x="45.7879%" y="340" width="0.3492%" height="15" fill="rgb(244,205,15)" fg:x="1049" fg:w="8"/><text x="46.0379%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (805 samples, 35.14%)</title><rect x="11.0869%" y="292" width="35.1375%" height="15" fill="rgb(223,117,47)" fg:x="254" fg:w="805"/><text x="11.3369%" y="302.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (41 samples, 1.79%)</title><rect x="44.4347%" y="308" width="1.7896%" height="15" fill="rgb(244,107,35)" fg:x="1018" fg:w="41"/><text x="44.6847%" y="318.50">r..</text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="46.2680%" y="308" width="0.1309%" height="15" fill="rgb(205,140,8)" fg:x="1060" fg:w="3"/><text x="46.5180%" y="318.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="46.5735%" y="372" width="0.1309%" height="15" fill="rgb(228,84,46)" fg:x="1067" fg:w="3"/><text x="46.8235%" y="382.50"></text></g><g><title>fetch_row (row.py:158) (9 samples, 0.39%)</title><rect x="46.4426%" y="340" width="0.3928%" height="15" fill="rgb(254,188,9)" fg:x="1064" fg:w="9"/><text x="46.6926%" y="350.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (9 samples, 0.39%)</title><rect x="46.4426%" y="356" width="0.3928%" height="15" fill="rgb(206,112,54)" fg:x="1064" fg:w="9"/><text x="46.6926%" y="366.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="46.7045%" y="372" width="0.1309%" height="15" fill="rgb(216,84,49)" fg:x="1070" fg:w="3"/><text x="46.9545%" y="382.50"></text></g><g><title>deserialize (row.py:141) (5 samples, 0.22%)</title><rect x="46.8354%" y="356" width="0.2182%" height="15" fill="rgb(214,194,35)" fg:x="1073" fg:w="5"/><text x="47.0854%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="46.8791%" y="372" width="0.1746%" height="15" fill="rgb(249,28,3)" fg:x="1074" fg:w="4"/><text x="47.1291%" y="382.50"></text></g><g><title>deserialize (row.py:144) (3 samples, 0.13%)</title><rect x="47.1410%" y="356" width="0.1309%" height="15" fill="rgb(222,56,52)" fg:x="1080" fg:w="3"/><text x="47.3910%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="47.1410%" y="372" width="0.1309%" height="15" fill="rgb(245,217,50)" fg:x="1080" fg:w="3"/><text x="47.3910%" y="382.50"></text></g><g><title>deserialize (row.py:145) (3 samples, 0.13%)</title><rect x="47.2719%" y="356" width="0.1309%" height="15" fill="rgb(213,201,24)" fg:x="1083" fg:w="3"/><text x="47.5219%" y="366.50"></text></g><g><title>deserialize (data_types.py:90) (3 samples, 0.13%)</title><rect x="47.2719%" y="372" width="0.1309%" height="15" fill="rgb(248,116,28)" fg:x="1083" fg:w="3"/><text x="47.5219%" y="382.50"></text></g><g><title>fetch_row (row.py:160) (21 samples, 0.92%)</title><rect x="46.8354%" y="340" width="0.9166%" height="15" fill="rgb(219,72,43)" fg:x="1073" fg:w="21"/><text x="47.0854%" y="350.50"></text></g><g><title>deserialize (row.py:147) (8 samples, 0.35%)</title><rect x="47.4029%" y="356" width="0.3492%" height="15" fill="rgb(209,138,14)" fg:x="1086" fg:w="8"/><text x="47.6529%" y="366.50"></text></g><g><title>__init__ (row.py:56) (3 samples, 0.13%)</title><rect x="47.6211%" y="372" width="0.1309%" height="15" fill="rgb(222,18,33)" fg:x="1091" fg:w="3"/><text x="47.8711%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="47.6211%" y="388" width="0.1309%" height="15" fill="rgb(213,199,7)" fg:x="1091" fg:w="3"/><text x="47.8711%" y="398.50"></text></g><g><title>insert (binary_tree.py:92) (39 samples, 1.70%)</title><rect x="46.2244%" y="292" width="1.7023%" height="15" fill="rgb(250,110,10)" fg:x="1059" fg:w="39"/><text x="46.4744%" y="302.50"></text></g><g><title>right_subtree_height (row.py:89) (35 samples, 1.53%)</title><rect x="46.3990%" y="308" width="1.5277%" height="15" fill="rgb(248,123,6)" fg:x="1063" fg:w="35"/><text x="46.6490%" y="318.50"></text></g><g><title>right_child (row.py:77) (34 samples, 1.48%)</title><rect x="46.4426%" y="324" width="1.4841%" height="15" fill="rgb(206,91,31)" fg:x="1064" fg:w="34"/><text x="46.6926%" y="334.50"></text></g><g><title>fetch_row (row.py:161) (4 samples, 0.17%)</title><rect x="47.7521%" y="340" width="0.1746%" height="15" fill="rgb(211,154,13)" fg:x="1094" fg:w="4"/><text x="48.0021%" y="350.50"></text></g><g><title>page_write (pager.py:93) (5 samples, 0.22%)</title><rect x="47.9267%" y="324" width="0.2182%" height="15" fill="rgb(225,148,7)" fg:x="1098" fg:w="5"/><text x="48.1767%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (5 samples, 0.22%)</title><rect x="47.9267%" y="340" width="0.2182%" height="15" fill="rgb(220,160,43)" fg:x="1098" fg:w="5"/><text x="48.1767%" y="350.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="48.0140%" y="356" width="0.1309%" height="15" fill="rgb(213,52,39)" fg:x="1100" fg:w="3"/><text x="48.2640%" y="366.50"></text></g><g><title>insert (binary_tree.py:93) (8 samples, 0.35%)</title><rect x="47.9267%" y="292" width="0.3492%" height="15" fill="rgb(243,137,7)" fg:x="1098" fg:w="8"/><text x="48.1767%" y="302.50"></text></g><g><title>write_to_page (row.py:111) (8 samples, 0.35%)</title><rect x="47.9267%" y="308" width="0.3492%" height="15" fill="rgb(230,79,13)" fg:x="1098" fg:w="8"/><text x="48.1767%" y="318.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="48.2759%" y="372" width="0.1309%" height="15" fill="rgb(247,105,23)" fg:x="1106" fg:w="3"/><text x="48.5259%" y="382.50"></text></g><g><title>fetch_row (row.py:158) (6 samples, 0.26%)</title><rect x="48.2759%" y="340" width="0.2619%" height="15" fill="rgb(223,179,41)" fg:x="1106" fg:w="6"/><text x="48.5259%" y="350.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (6 samples, 0.26%)</title><rect x="48.2759%" y="356" width="0.2619%" height="15" fill="rgb(218,9,34)" fg:x="1106" fg:w="6"/><text x="48.5259%" y="366.50"></text></g><g><title>__new__ (data_types.py:127) (3 samples, 0.13%)</title><rect x="48.4068%" y="372" width="0.1309%" height="15" fill="rgb(222,106,8)" fg:x="1109" fg:w="3"/><text x="48.6568%" y="382.50"></text></g><g><title>deserialize (row.py:142) (3 samples, 0.13%)</title><rect x="48.6687%" y="356" width="0.1309%" height="15" fill="rgb(211,220,0)" fg:x="1115" fg:w="3"/><text x="48.9187%" y="366.50"></text></g><g><title>deserialize (data_types.py:171) (3 samples, 0.13%)</title><rect x="48.6687%" y="372" width="0.1309%" height="15" fill="rgb(229,52,16)" fg:x="1115" fg:w="3"/><text x="48.9187%" y="382.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="48.7997%" y="356" width="0.1746%" height="15" fill="rgb(212,155,18)" fg:x="1118" fg:w="4"/><text x="49.0497%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="48.7997%" y="372" width="0.1746%" height="15" fill="rgb(242,21,14)" fg:x="1118" fg:w="4"/><text x="49.0497%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="48.8433%" y="388" width="0.1309%" height="15" fill="rgb(222,19,48)" fg:x="1119" fg:w="3"/><text x="49.0933%" y="398.50"></text></g><g><title>validate_val (data_types.py:52) (3 samples, 0.13%)</title><rect x="48.8433%" y="404" width="0.1309%" height="15" fill="rgb(232,45,27)" fg:x="1119" fg:w="3"/><text x="49.0933%" y="414.50"></text></g><g><title>deserialize (row.py:144) (3 samples, 0.13%)</title><rect x="48.9742%" y="356" width="0.1309%" height="15" fill="rgb(249,103,42)" fg:x="1122" fg:w="3"/><text x="49.2242%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="48.9742%" y="372" width="0.1309%" height="15" fill="rgb(246,81,33)" fg:x="1122" fg:w="3"/><text x="49.2242%" y="382.50"></text></g><g><title>fetch_row (row.py:160) (21 samples, 0.92%)</title><rect x="48.5378%" y="340" width="0.9166%" height="15" fill="rgb(252,33,42)" fg:x="1112" fg:w="21"/><text x="48.7878%" y="350.50"></text></g><g><title>deserialize (row.py:147) (6 samples, 0.26%)</title><rect x="49.1925%" y="356" width="0.2619%" height="15" fill="rgb(209,212,41)" fg:x="1127" fg:w="6"/><text x="49.4425%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (29 samples, 1.27%)</title><rect x="48.2759%" y="308" width="1.2658%" height="15" fill="rgb(207,154,6)" fg:x="1106" fg:w="29"/><text x="48.5259%" y="318.50"></text></g><g><title>left_child (row.py:81) (29 samples, 1.27%)</title><rect x="48.2759%" y="324" width="1.2658%" height="15" fill="rgb(223,64,47)" fg:x="1106" fg:w="29"/><text x="48.5259%" y="334.50"></text></g><g><title>fetch_row (row.py:158) (4 samples, 0.17%)</title><rect x="49.5417%" y="340" width="0.1746%" height="15" fill="rgb(211,161,38)" fg:x="1135" fg:w="4"/><text x="49.7917%" y="350.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (4 samples, 0.17%)</title><rect x="49.5417%" y="356" width="0.1746%" height="15" fill="rgb(219,138,40)" fg:x="1135" fg:w="4"/><text x="49.7917%" y="366.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="49.5853%" y="372" width="0.1309%" height="15" fill="rgb(241,228,46)" fg:x="1136" fg:w="3"/><text x="49.8353%" y="382.50"></text></g><g><title>deserialize (row.py:141) (4 samples, 0.17%)</title><rect x="49.8909%" y="356" width="0.1746%" height="15" fill="rgb(223,209,38)" fg:x="1143" fg:w="4"/><text x="50.1409%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="49.8909%" y="372" width="0.1746%" height="15" fill="rgb(236,164,45)" fg:x="1143" fg:w="4"/><text x="50.1409%" y="382.50"></text></g><g><title>deserialize (row.py:142) (4 samples, 0.17%)</title><rect x="50.0655%" y="356" width="0.1746%" height="15" fill="rgb(231,15,5)" fg:x="1147" fg:w="4"/><text x="50.3155%" y="366.50"></text></g><g><title>deserialize (row.py:143) (3 samples, 0.13%)</title><rect x="50.2401%" y="356" width="0.1309%" height="15" fill="rgb(252,35,15)" fg:x="1151" fg:w="3"/><text x="50.4901%" y="366.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="50.2401%" y="372" width="0.1309%" height="15" fill="rgb(248,181,18)" fg:x="1151" fg:w="3"/><text x="50.4901%" y="382.50"></text></g><g><title>__init__ (row.py:53) (4 samples, 0.17%)</title><rect x="50.5020%" y="372" width="0.1746%" height="15" fill="rgb(233,39,42)" fg:x="1157" fg:w="4"/><text x="50.7520%" y="382.50"></text></g><g><title>fetch_row (row.py:160) (24 samples, 1.05%)</title><rect x="49.7163%" y="340" width="1.0476%" height="15" fill="rgb(238,110,33)" fg:x="1139" fg:w="24"/><text x="49.9663%" y="350.50"></text></g><g><title>deserialize (row.py:147) (6 samples, 0.26%)</title><rect x="50.5020%" y="356" width="0.2619%" height="15" fill="rgb(233,195,10)" fg:x="1157" fg:w="6"/><text x="50.7520%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (59 samples, 2.58%)</title><rect x="48.2759%" y="292" width="2.5753%" height="15" fill="rgb(254,105,3)" fg:x="1106" fg:w="59"/><text x="48.5259%" y="302.50">in..</text></g><g><title>right_subtree_height (row.py:89) (30 samples, 1.31%)</title><rect x="49.5417%" y="308" width="1.3095%" height="15" fill="rgb(221,225,9)" fg:x="1135" fg:w="30"/><text x="49.7917%" y="318.50"></text></g><g><title>right_child (row.py:77) (30 samples, 1.31%)</title><rect x="49.5417%" y="324" width="1.3095%" height="15" fill="rgb(224,227,45)" fg:x="1135" fg:w="30"/><text x="49.7917%" y="334.50"></text></g><g><title>__init__ (data_types.py:13) (6 samples, 0.26%)</title><rect x="51.3313%" y="340" width="0.2619%" height="15" fill="rgb(229,198,43)" fg:x="1176" fg:w="6"/><text x="51.5813%" y="350.50"></text></g><g><title>fetch_row (row.py:158) (22 samples, 0.96%)</title><rect x="51.0694%" y="308" width="0.9603%" height="15" fill="rgb(206,209,35)" fg:x="1170" fg:w="22"/><text x="51.3194%" y="318.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (19 samples, 0.83%)</title><rect x="51.2003%" y="324" width="0.8293%" height="15" fill="rgb(245,195,53)" fg:x="1173" fg:w="19"/><text x="51.4503%" y="334.50"></text></g><g><title>__new__ (data_types.py:127) (10 samples, 0.44%)</title><rect x="51.5932%" y="340" width="0.4365%" height="15" fill="rgb(240,92,26)" fg:x="1182" fg:w="10"/><text x="51.8432%" y="350.50"></text></g><g><title>__new__ (data_types.py:45) (3 samples, 0.13%)</title><rect x="51.8987%" y="356" width="0.1309%" height="15" fill="rgb(207,40,23)" fg:x="1189" fg:w="3"/><text x="52.1487%" y="366.50"></text></g><g><title>fetch_row (row.py:159) (3 samples, 0.13%)</title><rect x="52.0297%" y="308" width="0.1309%" height="15" fill="rgb(223,111,35)" fg:x="1192" fg:w="3"/><text x="52.2797%" y="318.50"></text></g><g><title>get_page (pager.py:79) (3 samples, 0.13%)</title><rect x="52.0297%" y="324" width="0.1309%" height="15" fill="rgb(229,147,28)" fg:x="1192" fg:w="3"/><text x="52.2797%" y="334.50"></text></g><g><title>deserialize (row.py:144) (7 samples, 0.31%)</title><rect x="52.5971%" y="324" width="0.3055%" height="15" fill="rgb(211,29,28)" fg:x="1205" fg:w="7"/><text x="52.8471%" y="334.50"></text></g><g><title>deserialize (data_types.py:64) (7 samples, 0.31%)</title><rect x="52.5971%" y="340" width="0.3055%" height="15" fill="rgb(228,72,33)" fg:x="1205" fg:w="7"/><text x="52.8471%" y="350.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="52.7281%" y="356" width="0.1746%" height="15" fill="rgb(205,214,31)" fg:x="1208" fg:w="4"/><text x="52.9781%" y="366.50"></text></g><g><title>validate_val (data_types.py:55) (3 samples, 0.13%)</title><rect x="52.7717%" y="372" width="0.1309%" height="15" fill="rgb(224,111,15)" fg:x="1209" fg:w="3"/><text x="53.0217%" y="382.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="53.0773%" y="356" width="0.1309%" height="15" fill="rgb(253,21,26)" fg:x="1216" fg:w="3"/><text x="53.3273%" y="366.50"></text></g><g><title>deserialize (row.py:145) (9 samples, 0.39%)</title><rect x="52.9027%" y="324" width="0.3928%" height="15" fill="rgb(245,139,43)" fg:x="1212" fg:w="9"/><text x="53.1527%" y="334.50"></text></g><g><title>deserialize (data_types.py:90) (9 samples, 0.39%)</title><rect x="52.9027%" y="340" width="0.3928%" height="15" fill="rgb(252,170,7)" fg:x="1212" fg:w="9"/><text x="53.1527%" y="350.50"></text></g><g><title>__init__ (row.py:54) (7 samples, 0.31%)</title><rect x="53.3828%" y="340" width="0.3055%" height="15" fill="rgb(231,118,14)" fg:x="1223" fg:w="7"/><text x="53.6328%" y="350.50"></text></g><g><title>deserialize (row.py:147) (12 samples, 0.52%)</title><rect x="53.2955%" y="324" width="0.5238%" height="15" fill="rgb(238,83,0)" fg:x="1221" fg:w="12"/><text x="53.5455%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (39 samples, 1.70%)</title><rect x="52.1606%" y="308" width="1.7023%" height="15" fill="rgb(221,39,39)" fg:x="1195" fg:w="39"/><text x="52.4106%" y="318.50"></text></g><g><title>insert (binary_tree.py:89) (1,001 samples, 43.69%)</title><rect x="10.5194%" y="276" width="43.6927%" height="15" fill="rgb(222,119,46)" fg:x="241" fg:w="1001"/><text x="10.7694%" y="286.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (77 samples, 3.36%)</title><rect x="50.8512%" y="292" width="3.3610%" height="15" fill="rgb(222,165,49)" fg:x="1165" fg:w="77"/><text x="51.1012%" y="302.50">rig..</text></g><g><title>fetch_row (row.py:161) (8 samples, 0.35%)</title><rect x="53.8629%" y="308" width="0.3492%" height="15" fill="rgb(219,113,52)" fg:x="1234" fg:w="8"/><text x="54.1129%" y="318.50"></text></g><g><title>__init__ (data_types.py:13) (3 samples, 0.13%)</title><rect x="54.2994%" y="356" width="0.1309%" height="15" fill="rgb(214,7,15)" fg:x="1244" fg:w="3"/><text x="54.5494%" y="366.50"></text></g><g><title>fetch_row (row.py:158) (6 samples, 0.26%)</title><rect x="54.2558%" y="324" width="0.2619%" height="15" fill="rgb(235,32,4)" fg:x="1243" fg:w="6"/><text x="54.5058%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (6 samples, 0.26%)</title><rect x="54.2558%" y="340" width="0.2619%" height="15" fill="rgb(238,90,54)" fg:x="1243" fg:w="6"/><text x="54.5058%" y="350.50"></text></g><g><title>deserialize (row.py:141) (4 samples, 0.17%)</title><rect x="54.6486%" y="340" width="0.1746%" height="15" fill="rgb(213,208,19)" fg:x="1252" fg:w="4"/><text x="54.8986%" y="350.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="54.6486%" y="356" width="0.1746%" height="15" fill="rgb(233,156,4)" fg:x="1252" fg:w="4"/><text x="54.8986%" y="366.50"></text></g><g><title>deserialize (row.py:142) (4 samples, 0.17%)</title><rect x="54.8232%" y="340" width="0.1746%" height="15" fill="rgb(207,194,5)" fg:x="1256" fg:w="4"/><text x="55.0732%" y="350.50"></text></g><g><title>deserialize (data_types.py:171) (3 samples, 0.13%)</title><rect x="54.8669%" y="356" width="0.1309%" height="15" fill="rgb(206,111,30)" fg:x="1257" fg:w="3"/><text x="55.1169%" y="366.50"></text></g><g><title>deserialize (row.py:144) (4 samples, 0.17%)</title><rect x="55.0851%" y="340" width="0.1746%" height="15" fill="rgb(243,70,54)" fg:x="1262" fg:w="4"/><text x="55.3351%" y="350.50"></text></g><g><title>deserialize (data_types.py:64) (4 samples, 0.17%)</title><rect x="55.0851%" y="356" width="0.1746%" height="15" fill="rgb(242,28,8)" fg:x="1262" fg:w="4"/><text x="55.3351%" y="366.50"></text></g><g><title>__init__ (data_types.py:13) (4 samples, 0.17%)</title><rect x="55.0851%" y="372" width="0.1746%" height="15" fill="rgb(219,106,18)" fg:x="1262" fg:w="4"/><text x="55.3351%" y="382.50"></text></g><g><title>deserialize (row.py:147) (7 samples, 0.31%)</title><rect x="55.3034%" y="340" width="0.3055%" height="15" fill="rgb(244,222,10)" fg:x="1267" fg:w="7"/><text x="55.5534%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (25 samples, 1.09%)</title><rect x="54.5613%" y="324" width="1.0912%" height="15" fill="rgb(236,179,52)" fg:x="1250" fg:w="25"/><text x="54.8113%" y="334.50"></text></g><g><title>insert (binary_tree.py:92) (36 samples, 1.57%)</title><rect x="54.2121%" y="276" width="1.5714%" height="15" fill="rgb(213,23,39)" fg:x="1242" fg:w="36"/><text x="54.4621%" y="286.50"></text></g><g><title>right_subtree_height (row.py:89) (35 samples, 1.53%)</title><rect x="54.2558%" y="292" width="1.5277%" height="15" fill="rgb(238,48,10)" fg:x="1243" fg:w="35"/><text x="54.5058%" y="302.50"></text></g><g><title>right_child (row.py:77) (35 samples, 1.53%)</title><rect x="54.2558%" y="308" width="1.5277%" height="15" fill="rgb(251,196,23)" fg:x="1243" fg:w="35"/><text x="54.5058%" y="318.50"></text></g><g><title>fetch_row (row.py:161) (3 samples, 0.13%)</title><rect x="55.6526%" y="324" width="0.1309%" height="15" fill="rgb(250,152,24)" fg:x="1275" fg:w="3"/><text x="55.9026%" y="334.50"></text></g><g><title>insert (binary_tree.py:93) (4 samples, 0.17%)</title><rect x="55.7835%" y="276" width="0.1746%" height="15" fill="rgb(209,150,17)" fg:x="1278" fg:w="4"/><text x="56.0335%" y="286.50"></text></g><g><title>write_to_page (row.py:111) (4 samples, 0.17%)</title><rect x="55.7835%" y="292" width="0.1746%" height="15" fill="rgb(234,202,34)" fg:x="1278" fg:w="4"/><text x="56.0335%" y="302.50"></text></g><g><title>deserialize (row.py:143) (4 samples, 0.17%)</title><rect x="56.2636%" y="340" width="0.1746%" height="15" fill="rgb(253,148,53)" fg:x="1289" fg:w="4"/><text x="56.5136%" y="350.50"></text></g><g><title>deserialize (data_types.py:64) (3 samples, 0.13%)</title><rect x="56.3073%" y="356" width="0.1309%" height="15" fill="rgb(218,129,16)" fg:x="1290" fg:w="3"/><text x="56.5573%" y="366.50"></text></g><g><title>__init__ (row.py:55) (4 samples, 0.17%)</title><rect x="56.7001%" y="356" width="0.1746%" height="15" fill="rgb(216,85,19)" fg:x="1299" fg:w="4"/><text x="56.9501%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (21 samples, 0.92%)</title><rect x="56.0454%" y="324" width="0.9166%" height="15" fill="rgb(235,228,7)" fg:x="1284" fg:w="21"/><text x="56.2954%" y="334.50"></text></g><g><title>deserialize (row.py:147) (9 samples, 0.39%)</title><rect x="56.5692%" y="340" width="0.3928%" height="15" fill="rgb(245,175,0)" fg:x="1296" fg:w="9"/><text x="56.8192%" y="350.50"></text></g><g><title>left_subtree_height (row.py:85) (26 samples, 1.13%)</title><rect x="56.0017%" y="292" width="1.1349%" height="15" fill="rgb(208,168,36)" fg:x="1283" fg:w="26"/><text x="56.2517%" y="302.50"></text></g><g><title>left_child (row.py:81) (26 samples, 1.13%)</title><rect x="56.0017%" y="308" width="1.1349%" height="15" fill="rgb(246,171,24)" fg:x="1283" fg:w="26"/><text x="56.2517%" y="318.50"></text></g><g><title>fetch_row (row.py:161) (4 samples, 0.17%)</title><rect x="56.9620%" y="324" width="0.1746%" height="15" fill="rgb(215,142,24)" fg:x="1305" fg:w="4"/><text x="57.2120%" y="334.50"></text></g><g><title>fetch_row (row.py:158) (7 samples, 0.31%)</title><rect x="57.1366%" y="324" width="0.3055%" height="15" fill="rgb(250,187,7)" fg:x="1309" fg:w="7"/><text x="57.3866%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (7 samples, 0.31%)</title><rect x="57.1366%" y="340" width="0.3055%" height="15" fill="rgb(228,66,33)" fg:x="1309" fg:w="7"/><text x="57.3866%" y="350.50"></text></g><g><title>deserialize (row.py:142) (4 samples, 0.17%)</title><rect x="57.6604%" y="340" width="0.1746%" height="15" fill="rgb(234,215,21)" fg:x="1321" fg:w="4"/><text x="57.9104%" y="350.50"></text></g><g><title>deserialize (data_types.py:171) (3 samples, 0.13%)</title><rect x="57.7041%" y="356" width="0.1309%" height="15" fill="rgb(222,191,20)" fg:x="1322" fg:w="3"/><text x="57.9541%" y="366.50"></text></g><g><title>deserialize (row.py:145) (5 samples, 0.22%)</title><rect x="57.9660%" y="340" width="0.2182%" height="15" fill="rgb(245,79,54)" fg:x="1328" fg:w="5"/><text x="58.2160%" y="350.50"></text></g><g><title>deserialize (data_types.py:90) (5 samples, 0.22%)</title><rect x="57.9660%" y="356" width="0.2182%" height="15" fill="rgb(240,10,37)" fg:x="1328" fg:w="5"/><text x="58.2160%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (20 samples, 0.87%)</title><rect x="57.4422%" y="324" width="0.8730%" height="15" fill="rgb(214,192,32)" fg:x="1316" fg:w="20"/><text x="57.6922%" y="334.50"></text></g><g><title>deserialize (row.py:147) (3 samples, 0.13%)</title><rect x="58.1842%" y="340" width="0.1309%" height="15" fill="rgb(209,36,54)" fg:x="1333" fg:w="3"/><text x="58.4342%" y="350.50"></text></g><g><title>insert (table.py:51) (1,119 samples, 48.84%)</title><rect x="9.5155%" y="260" width="48.8433%" height="15" fill="rgb(220,10,11)" fg:x="218" fg:w="1119"/><text x="9.7655%" y="270.50">insert (table.py:51)</text></g><g><title>insert (binary_tree.py:95) (55 samples, 2.40%)</title><rect x="55.9581%" y="276" width="2.4007%" height="15" fill="rgb(221,106,17)" fg:x="1282" fg:w="55"/><text x="56.2081%" y="286.50">in..</text></g><g><title>right_subtree_height (row.py:89) (28 samples, 1.22%)</title><rect x="57.1366%" y="292" width="1.2222%" height="15" fill="rgb(251,142,44)" fg:x="1309" fg:w="28"/><text x="57.3866%" y="302.50"></text></g><g><title>right_child (row.py:77) (28 samples, 1.22%)</title><rect x="57.1366%" y="308" width="1.2222%" height="15" fill="rgb(238,13,15)" fg:x="1309" fg:w="28"/><text x="57.3866%" y="318.50"></text></g><g><title>insert (table.py:58) (3 samples, 0.13%)</title><rect x="58.5334%" y="260" width="0.1309%" height="15" fill="rgb(208,107,27)" fg:x="1341" fg:w="3"/><text x="58.7834%" y="270.50"></text></g><g><title>pager_flush (pager.py:124) (4 samples, 0.17%)</title><rect x="58.7516%" y="276" width="0.1746%" height="15" fill="rgb(205,136,37)" fg:x="1346" fg:w="4"/><text x="59.0016%" y="286.50"></text></g><g><title>pager_flush (pager.py:125) (66 samples, 2.88%)</title><rect x="58.9262%" y="276" width="2.8808%" height="15" fill="rgb(250,205,27)" fg:x="1350" fg:w="66"/><text x="59.1762%" y="286.50">pa..</text></g><g><title>pager_flush (pager.py:126) (17 samples, 0.74%)</title><rect x="61.8071%" y="276" width="0.7420%" height="15" fill="rgb(210,80,43)" fg:x="1416" fg:w="17"/><text x="62.0571%" y="286.50"></text></g><g><title>pager_flush (pager.py:127) (13 samples, 0.57%)</title><rect x="62.5491%" y="276" width="0.5674%" height="15" fill="rgb(247,160,36)" fg:x="1433" fg:w="13"/><text x="62.7991%" y="286.50"></text></g><g><title>pager_flush (pager.py:128) (719 samples, 31.38%)</title><rect x="63.1165%" y="276" width="31.3837%" height="15" fill="rgb(234,13,49)" fg:x="1446" fg:w="719"/><text x="63.3665%" y="286.50">pager_flush (pager.py:128)</text></g><g><title>pager_flush (pager.py:129) (40 samples, 1.75%)</title><rect x="94.5002%" y="276" width="1.7460%" height="15" fill="rgb(234,122,0)" fg:x="2165" fg:w="40"/><text x="94.7502%" y="286.50"></text></g><g><title>pager_flush (pager.py:130) (53 samples, 2.31%)</title><rect x="96.2462%" y="276" width="2.3134%" height="15" fill="rgb(207,146,38)" fg:x="2205" fg:w="53"/><text x="96.4962%" y="286.50">p..</text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:41) (2,109 samples, 92.06%)</title><rect x="7.1584%" y="244" width="92.0559%" height="15" fill="rgb(207,177,25)" fg:x="164" fg:w="2109"/><text x="7.4084%" y="254.50">test_insert_lotta_rows (db/test_bulk_insertion.py:41)</text></g><g><title>insert (table.py:61) (929 samples, 40.55%)</title><rect x="58.6643%" y="260" width="40.5500%" height="15" fill="rgb(211,178,42)" fg:x="1344" fg:w="929"/><text x="58.9143%" y="270.50">insert (table.py:61)</text></g><g><title>pager_flush (pager.py:131) (15 samples, 0.65%)</title><rect x="98.5596%" y="276" width="0.6547%" height="15" fill="rgb(230,69,54)" fg:x="2258" fg:w="15"/><text x="98.8096%" y="286.50"></text></g><g><title>traverse (binary_tree.py:140) (3 samples, 0.13%)</title><rect x="99.2143%" y="276" width="0.1309%" height="15" fill="rgb(214,135,41)" fg:x="2273" fg:w="3"/><text x="99.4643%" y="286.50"></text></g><g><title>traverse (binary_tree.py:140) (5 samples, 0.22%)</title><rect x="99.2143%" y="260" width="0.2182%" height="15" fill="rgb(237,67,25)" fg:x="2273" fg:w="5"/><text x="99.4643%" y="270.50"></text></g><g><title>traverse (binary_tree.py:140) (4 samples, 0.17%)</title><rect x="99.4326%" y="276" width="0.1746%" height="15" fill="rgb(222,189,50)" fg:x="2278" fg:w="4"/><text x="99.6826%" y="286.50"></text></g><g><title>traverse (binary_tree.py:148) (3 samples, 0.13%)</title><rect x="99.4762%" y="292" width="0.1309%" height="15" fill="rgb(245,148,34)" fg:x="2279" fg:w="3"/><text x="99.7262%" y="302.50"></text></g><g><title>test_insert_lotta_rows (db/test_bulk_insertion.py:47) (14 samples, 0.61%)</title><rect x="99.2143%" y="244" width="0.6111%" height="15" fill="rgb(222,29,6)" fg:x="2273" fg:w="14"/><text x="99.4643%" y="254.50"></text></g><g><title>traverse (binary_tree.py:148) (9 samples, 0.39%)</title><rect x="99.4326%" y="260" width="0.3928%" height="15" fill="rgb(221,189,43)" fg:x="2278" fg:w="9"/><text x="99.6826%" y="270.50"></text></g><g><title>traverse (binary_tree.py:148) (5 samples, 0.22%)</title><rect x="99.6072%" y="276" width="0.2182%" height="15" fill="rgb(207,36,27)" fg:x="2282" fg:w="5"/><text x="99.8572%" y="286.50"></text></g><g><title>traverse (binary_tree.py:140) (5 samples, 0.22%)</title><rect x="99.6072%" y="292" width="0.2182%" height="15" fill="rgb(217,90,24)" fg:x="2282" fg:w="5"/><text x="99.8572%" y="302.50"></text></g><g><title>traverse (binary_tree.py:148) (3 samples, 0.13%)</title><rect x="99.6945%" y="308" width="0.1309%" height="15" fill="rgb(224,66,35)" fg:x="2284" fg:w="3"/><text x="99.9445%" y="318.50"></text></g><g><title>&lt;module&gt; (db/test_bulk_insertion.py:53) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="68" width="99.8691%" height="15" fill="rgb(221,13,50)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="78.50">&lt;module&gt; (db/test_bulk_insertion.py:53)</text></g><g><title>__init__ (unittest/main.py:102) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="84" width="99.8691%" height="15" fill="rgb(236,68,49)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="94.50">__init__ (unittest/main.py:102)</text></g><g><title>runTests (unittest/main.py:274) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="100" width="99.8691%" height="15" fill="rgb(229,146,28)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="110.50">runTests (unittest/main.py:274)</text></g><g><title>run (unittest/runner.py:217) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="116" width="99.8691%" height="15" fill="rgb(225,31,38)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="126.50">run (unittest/runner.py:217)</text></g><g><title>__call__ (unittest/suite.py:84) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="132" width="99.8691%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="142.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="148" width="99.8691%" height="15" fill="rgb(246,54,23)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="158.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/suite.py:84) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="164" width="99.8691%" height="15" fill="rgb(243,76,11)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="174.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="180" width="99.8691%" height="15" fill="rgb(245,21,50)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="190.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/case.py:678) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="196" width="99.8691%" height="15" fill="rgb(228,9,43)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="206.50">__call__ (unittest/case.py:678)</text></g><g><title>run (unittest/case.py:623) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="212" width="99.8691%" height="15" fill="rgb(208,100,47)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="222.50">run (unittest/case.py:623)</text></g><g><title>_callTestMethod (unittest/case.py:579) (2,288 samples, 99.87%)</title><rect x="0.0000%" y="228" width="99.8691%" height="15" fill="rgb(232,26,8)" fg:x="0" fg:w="2288"/><text x="0.2500%" y="238.50">_callTestMethod (unittest/case.py:579)</text></g><g><title>all (2,291 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(216,166,38)" fg:x="0" fg:w="2291"/><text x="0.2500%" y="62.50"></text></g></svg></svg>