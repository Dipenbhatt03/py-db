<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="442" onload="init(evt)" viewBox="0 0 1200 442" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="442" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o post-pager-module-implementation-flame-graph.svg python test.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="431.00"> </text><svg id="frames" x="10" width="1180" total_samples="17257"><g><title>_randbelow_with_getrandbits (random.py:238) (21 samples, 0.12%)</title><rect x="0.5911%" y="292" width="0.1217%" height="15" fill="rgb(227,0,7)" fg:x="102" fg:w="21"/><text x="0.8411%" y="302.50"></text></g><g><title>test_insert_lotta_rows (db/test.py:107) (124 samples, 0.72%)</title><rect x="0.1159%" y="244" width="0.7185%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="124"/><text x="0.3659%" y="254.50"></text></g><g><title>randint (random.py:362) (115 samples, 0.67%)</title><rect x="0.1680%" y="260" width="0.6664%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="115"/><text x="0.4180%" y="270.50"></text></g><g><title>randrange (random.py:344) (57 samples, 0.33%)</title><rect x="0.5041%" y="276" width="0.3303%" height="15" fill="rgb(248,212,6)" fg:x="87" fg:w="57"/><text x="0.7541%" y="286.50"></text></g><g><title>validate_val (data_types.py:52) (19 samples, 0.11%)</title><rect x="1.5298%" y="276" width="0.1101%" height="15" fill="rgb(208,68,35)" fg:x="264" fg:w="19"/><text x="1.7798%" y="286.50"></text></g><g><title>__init__ (data_types.py:13) (69 samples, 0.40%)</title><rect x="1.2922%" y="260" width="0.3998%" height="15" fill="rgb(232,128,0)" fg:x="223" fg:w="69"/><text x="1.5422%" y="270.50"></text></g><g><title>__init__ (row.py:53) (44 samples, 0.25%)</title><rect x="1.7268%" y="260" width="0.2550%" height="15" fill="rgb(207,160,47)" fg:x="298" fg:w="44"/><text x="1.9768%" y="270.50"></text></g><g><title>__init__ (row.py:54) (19 samples, 0.11%)</title><rect x="1.9818%" y="260" width="0.1101%" height="15" fill="rgb(228,23,34)" fg:x="342" fg:w="19"/><text x="2.2318%" y="270.50"></text></g><g><title>__init__ (data_types.py:13) (20 samples, 0.12%)</title><rect x="2.1325%" y="276" width="0.1159%" height="15" fill="rgb(218,30,26)" fg:x="368" fg:w="20"/><text x="2.3825%" y="286.50"></text></g><g><title>__init__ (row.py:55) (32 samples, 0.19%)</title><rect x="2.0919%" y="260" width="0.1854%" height="15" fill="rgb(220,122,19)" fg:x="361" fg:w="32"/><text x="2.3419%" y="270.50"></text></g><g><title>__init__ (row.py:56) (18 samples, 0.10%)</title><rect x="2.2773%" y="260" width="0.1043%" height="15" fill="rgb(250,228,42)" fg:x="393" fg:w="18"/><text x="2.5273%" y="270.50"></text></g><g><title>test_insert_lotta_rows (db/test.py:109) (303 samples, 1.76%)</title><rect x="0.8402%" y="244" width="1.7558%" height="15" fill="rgb(240,193,28)" fg:x="145" fg:w="303"/><text x="1.0902%" y="254.50"></text></g><g><title>__new__ (data_types.py:45) (32 samples, 0.19%)</title><rect x="2.4106%" y="260" width="0.1854%" height="15" fill="rgb(216,20,37)" fg:x="416" fg:w="32"/><text x="2.6606%" y="270.50"></text></g><g><title>insert (table.py:48) (47 samples, 0.27%)</title><rect x="2.6540%" y="260" width="0.2724%" height="15" fill="rgb(206,188,39)" fg:x="458" fg:w="47"/><text x="2.9040%" y="270.50"></text></g><g><title>offset_for_a_new_row (table.py:72) (39 samples, 0.23%)</title><rect x="2.7004%" y="276" width="0.2260%" height="15" fill="rgb(217,207,13)" fg:x="466" fg:w="39"/><text x="2.9504%" y="286.50"></text></g><g><title>__repr__ (row.py:62) (49 samples, 0.28%)</title><rect x="3.2045%" y="292" width="0.2839%" height="15" fill="rgb(231,73,38)" fg:x="553" fg:w="49"/><text x="3.4545%" y="302.50"></text></g><g><title>insert (binary_tree.py:76) (76 samples, 0.44%)</title><rect x="3.0944%" y="276" width="0.4404%" height="15" fill="rgb(225,20,46)" fg:x="534" fg:w="76"/><text x="3.3444%" y="286.50"></text></g><g><title>__repr__ (row.py:62) (30 samples, 0.17%)</title><rect x="3.6217%" y="308" width="0.1738%" height="15" fill="rgb(210,31,41)" fg:x="625" fg:w="30"/><text x="3.8717%" y="318.50"></text></g><g><title>insert (binary_tree.py:76) (39 samples, 0.23%)</title><rect x="3.5812%" y="292" width="0.2260%" height="15" fill="rgb(221,200,47)" fg:x="618" fg:w="39"/><text x="3.8312%" y="302.50"></text></g><g><title>insert (binary_tree.py:82) (29 samples, 0.17%)</title><rect x="3.8593%" y="372" width="0.1680%" height="15" fill="rgb(226,26,5)" fg:x="666" fg:w="29"/><text x="4.1093%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="4.0505%" y="372" width="0.1333%" height="15" fill="rgb(249,33,26)" fg:x="699" fg:w="23"/><text x="4.3005%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (64 samples, 0.37%)</title><rect x="3.8593%" y="356" width="0.3709%" height="15" fill="rgb(235,183,28)" fg:x="666" fg:w="64"/><text x="4.1093%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="4.2302%" y="372" width="0.1101%" height="15" fill="rgb(221,5,38)" fg:x="730" fg:w="19"/><text x="4.4802%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="4.4098%" y="388" width="0.1043%" height="15" fill="rgb(247,18,42)" fg:x="761" fg:w="18"/><text x="4.6598%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (34 samples, 0.20%)</title><rect x="4.3461%" y="372" width="0.1970%" height="15" fill="rgb(241,131,45)" fg:x="750" fg:w="34"/><text x="4.5961%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (65 samples, 0.38%)</title><rect x="4.2302%" y="356" width="0.3767%" height="15" fill="rgb(249,31,29)" fg:x="730" fg:w="65"/><text x="4.4802%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (143 samples, 0.83%)</title><rect x="3.8593%" y="340" width="0.8286%" height="15" fill="rgb(225,111,53)" fg:x="666" fg:w="143"/><text x="4.1093%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="4.7517%" y="372" width="0.1043%" height="15" fill="rgb(238,160,17)" fg:x="820" fg:w="18"/><text x="5.0017%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (26 samples, 0.15%)</title><rect x="4.8618%" y="372" width="0.1507%" height="15" fill="rgb(214,148,48)" fg:x="839" fg:w="26"/><text x="5.1118%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (52 samples, 0.30%)</title><rect x="4.7517%" y="356" width="0.3013%" height="15" fill="rgb(232,36,49)" fg:x="820" fg:w="52"/><text x="5.0017%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (26 samples, 0.15%)</title><rect x="5.0878%" y="356" width="0.1507%" height="15" fill="rgb(209,103,24)" fg:x="878" fg:w="26"/><text x="5.3378%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (96 samples, 0.56%)</title><rect x="4.7459%" y="340" width="0.5563%" height="15" fill="rgb(229,88,8)" fg:x="819" fg:w="96"/><text x="4.9959%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (273 samples, 1.58%)</title><rect x="3.8593%" y="324" width="1.5820%" height="15" fill="rgb(213,181,19)" fg:x="666" fg:w="273"/><text x="4.1093%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="5.5224%" y="372" width="0.1101%" height="15" fill="rgb(254,191,54)" fg:x="953" fg:w="19"/><text x="5.7724%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (21 samples, 0.12%)</title><rect x="5.6441%" y="372" width="0.1217%" height="15" fill="rgb(241,83,37)" fg:x="974" fg:w="21"/><text x="5.8941%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (43 samples, 0.25%)</title><rect x="5.5224%" y="356" width="0.2492%" height="15" fill="rgb(233,36,39)" fg:x="953" fg:w="43"/><text x="5.7724%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (34 samples, 0.20%)</title><rect x="5.7947%" y="372" width="0.1970%" height="15" fill="rgb(226,3,54)" fg:x="1000" fg:w="34"/><text x="6.0447%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (27 samples, 0.16%)</title><rect x="5.9976%" y="372" width="0.1565%" height="15" fill="rgb(245,192,40)" fg:x="1035" fg:w="27"/><text x="6.2476%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (76 samples, 0.44%)</title><rect x="5.7947%" y="356" width="0.4404%" height="15" fill="rgb(238,167,29)" fg:x="1000" fg:w="76"/><text x="6.0447%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (136 samples, 0.79%)</title><rect x="5.5224%" y="340" width="0.7881%" height="15" fill="rgb(232,182,51)" fg:x="953" fg:w="136"/><text x="5.7724%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (28 samples, 0.16%)</title><rect x="6.3395%" y="372" width="0.1623%" height="15" fill="rgb(231,60,39)" fg:x="1094" fg:w="28"/><text x="6.5895%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (21 samples, 0.12%)</title><rect x="6.5017%" y="372" width="0.1217%" height="15" fill="rgb(208,69,12)" fg:x="1122" fg:w="21"/><text x="6.7517%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (57 samples, 0.33%)</title><rect x="6.3395%" y="356" width="0.3303%" height="15" fill="rgb(235,93,37)" fg:x="1094" fg:w="57"/><text x="6.5895%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (24 samples, 0.14%)</title><rect x="6.6756%" y="356" width="0.1391%" height="15" fill="rgb(213,116,39)" fg:x="1152" fg:w="24"/><text x="6.9256%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (92 samples, 0.53%)</title><rect x="6.3395%" y="340" width="0.5331%" height="15" fill="rgb(222,207,29)" fg:x="1094" fg:w="92"/><text x="6.5895%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (21 samples, 0.12%)</title><rect x="6.9131%" y="340" width="0.1217%" height="15" fill="rgb(206,96,30)" fg:x="1193" fg:w="21"/><text x="7.1631%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (262 samples, 1.52%)</title><rect x="5.5224%" y="324" width="1.5182%" height="15" fill="rgb(218,138,4)" fg:x="953" fg:w="262"/><text x="5.7724%" y="334.50"></text></g><g><title>insert (binary_tree.py:95) (34 samples, 0.20%)</title><rect x="7.1102%" y="324" width="0.1970%" height="15" fill="rgb(250,191,14)" fg:x="1227" fg:w="34"/><text x="7.3602%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (18 samples, 0.10%)</title><rect x="7.2029%" y="340" width="0.1043%" height="15" fill="rgb(239,60,40)" fg:x="1243" fg:w="18"/><text x="7.4529%" y="350.50"></text></g><g><title>right_child (row.py:77) (18 samples, 0.10%)</title><rect x="7.2029%" y="356" width="0.1043%" height="15" fill="rgb(206,27,48)" fg:x="1243" fg:w="18"/><text x="7.4529%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (609 samples, 3.53%)</title><rect x="3.8477%" y="308" width="3.5290%" height="15" fill="rgb(225,35,8)" fg:x="664" fg:w="609"/><text x="4.0977%" y="318.50">ins..</text></g><g><title>insert (binary_tree.py:86) (21 samples, 0.12%)</title><rect x="7.3767%" y="308" width="0.1217%" height="15" fill="rgb(250,213,24)" fg:x="1273" fg:w="21"/><text x="7.6267%" y="318.50"></text></g><g><title>left_subtree_height (row.py:85) (21 samples, 0.12%)</title><rect x="7.3767%" y="324" width="0.1217%" height="15" fill="rgb(247,123,22)" fg:x="1273" fg:w="21"/><text x="7.6267%" y="334.50"></text></g><g><title>left_child (row.py:81) (21 samples, 0.12%)</title><rect x="7.3767%" y="340" width="0.1217%" height="15" fill="rgb(231,138,38)" fg:x="1273" fg:w="21"/><text x="7.6267%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="7.5679%" y="372" width="0.1217%" height="15" fill="rgb(231,145,46)" fg:x="1306" fg:w="21"/><text x="7.8179%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (22 samples, 0.13%)</title><rect x="7.7012%" y="372" width="0.1275%" height="15" fill="rgb(251,118,11)" fg:x="1329" fg:w="22"/><text x="7.9512%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (55 samples, 0.32%)</title><rect x="7.5679%" y="356" width="0.3187%" height="15" fill="rgb(217,147,25)" fg:x="1306" fg:w="55"/><text x="7.8179%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="7.9040%" y="388" width="0.1043%" height="15" fill="rgb(247,81,37)" fg:x="1364" fg:w="18"/><text x="8.1540%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (41 samples, 0.24%)</title><rect x="7.9040%" y="372" width="0.2376%" height="15" fill="rgb(209,12,38)" fg:x="1364" fg:w="41"/><text x="8.1540%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (32 samples, 0.19%)</title><rect x="8.1474%" y="372" width="0.1854%" height="15" fill="rgb(227,1,9)" fg:x="1406" fg:w="32"/><text x="8.3974%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (81 samples, 0.47%)</title><rect x="7.9040%" y="356" width="0.4694%" height="15" fill="rgb(248,47,43)" fg:x="1364" fg:w="81"/><text x="8.1540%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (147 samples, 0.85%)</title><rect x="7.5679%" y="340" width="0.8518%" height="15" fill="rgb(221,10,30)" fg:x="1306" fg:w="147"/><text x="7.8179%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="8.4314%" y="372" width="0.1101%" height="15" fill="rgb(210,229,1)" fg:x="1455" fg:w="19"/><text x="8.6814%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (20 samples, 0.12%)</title><rect x="8.6458%" y="388" width="0.1159%" height="15" fill="rgb(222,148,37)" fg:x="1492" fg:w="20"/><text x="8.8958%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (40 samples, 0.23%)</title><rect x="8.5473%" y="372" width="0.2318%" height="15" fill="rgb(234,67,33)" fg:x="1475" fg:w="40"/><text x="8.7973%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (68 samples, 0.39%)</title><rect x="8.4314%" y="356" width="0.3940%" height="15" fill="rgb(247,98,35)" fg:x="1455" fg:w="68"/><text x="8.6814%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (30 samples, 0.17%)</title><rect x="8.8486%" y="372" width="0.1738%" height="15" fill="rgb(247,138,52)" fg:x="1527" fg:w="30"/><text x="9.0986%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (24 samples, 0.14%)</title><rect x="9.0688%" y="388" width="0.1391%" height="15" fill="rgb(213,79,30)" fg:x="1565" fg:w="24"/><text x="9.3188%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (36 samples, 0.21%)</title><rect x="9.0340%" y="372" width="0.2086%" height="15" fill="rgb(246,177,23)" fg:x="1559" fg:w="36"/><text x="9.2840%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (73 samples, 0.42%)</title><rect x="8.8486%" y="356" width="0.4230%" height="15" fill="rgb(230,62,27)" fg:x="1527" fg:w="73"/><text x="9.0986%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (159 samples, 0.92%)</title><rect x="8.4314%" y="340" width="0.9214%" height="15" fill="rgb(216,154,8)" fg:x="1455" fg:w="159"/><text x="8.6814%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (29 samples, 0.17%)</title><rect x="9.3817%" y="340" width="0.1680%" height="15" fill="rgb(244,35,45)" fg:x="1619" fg:w="29"/><text x="9.6317%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (348 samples, 2.02%)</title><rect x="7.5564%" y="324" width="2.0166%" height="15" fill="rgb(251,115,12)" fg:x="1304" fg:w="348"/><text x="7.8064%" y="334.50">i..</text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="9.6483%" y="372" width="0.1391%" height="15" fill="rgb(240,54,50)" fg:x="1665" fg:w="24"/><text x="9.8983%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (20 samples, 0.12%)</title><rect x="9.7931%" y="388" width="0.1159%" height="15" fill="rgb(233,84,52)" fg:x="1690" fg:w="20"/><text x="10.0431%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (37 samples, 0.21%)</title><rect x="9.7931%" y="372" width="0.2144%" height="15" fill="rgb(207,117,47)" fg:x="1690" fg:w="37"/><text x="10.0431%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (71 samples, 0.41%)</title><rect x="9.6483%" y="356" width="0.4114%" height="15" fill="rgb(249,43,39)" fg:x="1665" fg:w="71"/><text x="9.8983%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (34 samples, 0.20%)</title><rect x="10.0597%" y="372" width="0.1970%" height="15" fill="rgb(209,38,44)" fg:x="1736" fg:w="34"/><text x="10.3097%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (31 samples, 0.18%)</title><rect x="10.2683%" y="372" width="0.1796%" height="15" fill="rgb(236,212,23)" fg:x="1772" fg:w="31"/><text x="10.5183%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (74 samples, 0.43%)</title><rect x="10.0597%" y="356" width="0.4288%" height="15" fill="rgb(242,79,21)" fg:x="1736" fg:w="74"/><text x="10.3097%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (160 samples, 0.93%)</title><rect x="9.6483%" y="340" width="0.9272%" height="15" fill="rgb(211,96,35)" fg:x="1665" fg:w="160"/><text x="9.8983%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (20 samples, 0.12%)</title><rect x="10.5928%" y="372" width="0.1159%" height="15" fill="rgb(253,215,40)" fg:x="1828" fg:w="20"/><text x="10.8428%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (22 samples, 0.13%)</title><rect x="10.7145%" y="372" width="0.1275%" height="15" fill="rgb(211,81,21)" fg:x="1849" fg:w="22"/><text x="10.9645%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (49 samples, 0.28%)</title><rect x="10.5928%" y="356" width="0.2839%" height="15" fill="rgb(208,190,38)" fg:x="1828" fg:w="49"/><text x="10.8428%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (25 samples, 0.14%)</title><rect x="10.8767%" y="356" width="0.1449%" height="15" fill="rgb(235,213,38)" fg:x="1877" fg:w="25"/><text x="11.1267%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (86 samples, 0.50%)</title><rect x="10.5928%" y="340" width="0.4983%" height="15" fill="rgb(237,122,38)" fg:x="1828" fg:w="86"/><text x="10.8428%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (275 samples, 1.59%)</title><rect x="9.6483%" y="324" width="1.5936%" height="15" fill="rgb(244,218,35)" fg:x="1665" fg:w="275"/><text x="9.8983%" y="334.50"></text></g><g><title>insert (binary_tree.py:95) (30 samples, 0.17%)</title><rect x="11.2650%" y="324" width="0.1738%" height="15" fill="rgb(240,68,47)" fg:x="1944" fg:w="30"/><text x="11.5150%" y="334.50"></text></g><g><title>insert (binary_tree.py:89) (685 samples, 3.97%)</title><rect x="7.5506%" y="308" width="3.9694%" height="15" fill="rgb(210,16,53)" fg:x="1303" fg:w="685"/><text x="7.8006%" y="318.50">inse..</text></g><g><title>fetch_row (row.py:160) (26 samples, 0.15%)</title><rect x="11.6474%" y="356" width="0.1507%" height="15" fill="rgb(235,124,12)" fg:x="2010" fg:w="26"/><text x="11.8974%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (31 samples, 0.18%)</title><rect x="11.6243%" y="324" width="0.1796%" height="15" fill="rgb(224,169,11)" fg:x="2006" fg:w="31"/><text x="11.8743%" y="334.50"></text></g><g><title>left_child (row.py:81) (31 samples, 0.18%)</title><rect x="11.6243%" y="340" width="0.1796%" height="15" fill="rgb(250,166,2)" fg:x="2006" fg:w="31"/><text x="11.8743%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (70 samples, 0.41%)</title><rect x="11.6185%" y="308" width="0.4056%" height="15" fill="rgb(242,216,29)" fg:x="2005" fg:w="70"/><text x="11.8685%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (38 samples, 0.22%)</title><rect x="11.8039%" y="324" width="0.2202%" height="15" fill="rgb(230,116,27)" fg:x="2037" fg:w="38"/><text x="12.0539%" y="334.50"></text></g><g><title>right_child (row.py:77) (36 samples, 0.21%)</title><rect x="11.8155%" y="340" width="0.2086%" height="15" fill="rgb(228,99,48)" fg:x="2039" fg:w="36"/><text x="12.0655%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (26 samples, 0.15%)</title><rect x="11.8734%" y="356" width="0.1507%" height="15" fill="rgb(253,11,6)" fg:x="2049" fg:w="26"/><text x="12.1234%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (35 samples, 0.20%)</title><rect x="12.1632%" y="324" width="0.2028%" height="15" fill="rgb(247,143,39)" fg:x="2099" fg:w="35"/><text x="12.4132%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (1,481 samples, 8.58%)</title><rect x="3.8129%" y="292" width="8.5820%" height="15" fill="rgb(236,97,10)" fg:x="658" fg:w="1481"/><text x="4.0629%" y="302.50">insert (bina..</text></g><g><title>left_child (row.py:81) (63 samples, 0.37%)</title><rect x="12.0299%" y="308" width="0.3651%" height="15" fill="rgb(233,208,19)" fg:x="2076" fg:w="63"/><text x="12.2799%" y="318.50"></text></g><g><title>fetch_row (row.py:160) (44 samples, 0.25%)</title><rect x="12.4761%" y="340" width="0.2550%" height="15" fill="rgb(216,164,2)" fg:x="2153" fg:w="44"/><text x="12.7261%" y="350.50"></text></g><g><title>insert (binary_tree.py:86) (63 samples, 0.37%)</title><rect x="12.3950%" y="292" width="0.3651%" height="15" fill="rgb(220,129,5)" fg:x="2139" fg:w="63"/><text x="12.6450%" y="302.50"></text></g><g><title>left_subtree_height (row.py:85) (60 samples, 0.35%)</title><rect x="12.4124%" y="308" width="0.3477%" height="15" fill="rgb(242,17,10)" fg:x="2142" fg:w="60"/><text x="12.6624%" y="318.50"></text></g><g><title>left_child (row.py:81) (58 samples, 0.34%)</title><rect x="12.4239%" y="324" width="0.3361%" height="15" fill="rgb(242,107,0)" fg:x="2144" fg:w="58"/><text x="12.6739%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (32 samples, 0.19%)</title><rect x="12.8528%" y="372" width="0.1854%" height="15" fill="rgb(251,28,31)" fg:x="2218" fg:w="32"/><text x="13.1028%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (21 samples, 0.12%)</title><rect x="13.0498%" y="372" width="0.1217%" height="15" fill="rgb(233,223,10)" fg:x="2252" fg:w="21"/><text x="13.2998%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (60 samples, 0.35%)</title><rect x="12.8528%" y="356" width="0.3477%" height="15" fill="rgb(215,21,27)" fg:x="2218" fg:w="60"/><text x="13.1028%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (28 samples, 0.16%)</title><rect x="13.2120%" y="372" width="0.1623%" height="15" fill="rgb(232,23,21)" fg:x="2280" fg:w="28"/><text x="13.4620%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="13.3801%" y="372" width="0.1101%" height="15" fill="rgb(244,5,23)" fg:x="2309" fg:w="19"/><text x="13.6301%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (52 samples, 0.30%)</title><rect x="13.2120%" y="356" width="0.3013%" height="15" fill="rgb(226,81,46)" fg:x="2280" fg:w="52"/><text x="13.4620%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (123 samples, 0.71%)</title><rect x="12.8528%" y="340" width="0.7128%" height="15" fill="rgb(247,70,30)" fg:x="2218" fg:w="123"/><text x="13.1028%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (25 samples, 0.14%)</title><rect x="13.5713%" y="372" width="0.1449%" height="15" fill="rgb(212,68,19)" fg:x="2342" fg:w="25"/><text x="13.8213%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="13.7509%" y="372" width="0.1043%" height="15" fill="rgb(240,187,13)" fg:x="2373" fg:w="18"/><text x="14.0009%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (55 samples, 0.32%)</title><rect x="13.5713%" y="356" width="0.3187%" height="15" fill="rgb(223,113,26)" fg:x="2342" fg:w="55"/><text x="13.8213%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (29 samples, 0.17%)</title><rect x="13.9074%" y="372" width="0.1680%" height="15" fill="rgb(206,192,2)" fg:x="2400" fg:w="29"/><text x="14.1574%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="14.0870%" y="372" width="0.1333%" height="15" fill="rgb(241,108,4)" fg:x="2431" fg:w="23"/><text x="14.3370%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (59 samples, 0.34%)</title><rect x="13.9074%" y="356" width="0.3419%" height="15" fill="rgb(247,173,49)" fg:x="2400" fg:w="59"/><text x="14.1574%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (136 samples, 0.79%)</title><rect x="13.5713%" y="340" width="0.7881%" height="15" fill="rgb(224,114,35)" fg:x="2342" fg:w="136"/><text x="13.8213%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (27 samples, 0.16%)</title><rect x="14.3942%" y="340" width="0.1565%" height="15" fill="rgb(245,159,27)" fg:x="2484" fg:w="27"/><text x="14.6442%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (298 samples, 1.73%)</title><rect x="12.8528%" y="324" width="1.7268%" height="15" fill="rgb(245,172,44)" fg:x="2218" fg:w="298"/><text x="13.1028%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="14.6317%" y="356" width="0.1217%" height="15" fill="rgb(236,23,11)" fg:x="2525" fg:w="21"/><text x="14.8817%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="14.7650%" y="372" width="0.1391%" height="15" fill="rgb(205,117,38)" fg:x="2548" fg:w="24"/><text x="15.0150%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (21 samples, 0.12%)</title><rect x="14.9099%" y="372" width="0.1217%" height="15" fill="rgb(237,72,25)" fg:x="2573" fg:w="21"/><text x="15.1599%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (56 samples, 0.32%)</title><rect x="14.7650%" y="356" width="0.3245%" height="15" fill="rgb(244,70,9)" fg:x="2548" fg:w="56"/><text x="15.0150%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (85 samples, 0.49%)</title><rect x="14.6317%" y="340" width="0.4926%" height="15" fill="rgb(217,125,39)" fg:x="2525" fg:w="85"/><text x="14.8817%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="15.2518%" y="372" width="0.1043%" height="15" fill="rgb(235,36,10)" fg:x="2632" fg:w="18"/><text x="15.5018%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (38 samples, 0.22%)</title><rect x="15.1591%" y="356" width="0.2202%" height="15" fill="rgb(251,123,47)" fg:x="2616" fg:w="38"/><text x="15.4091%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (20 samples, 0.12%)</title><rect x="15.4024%" y="356" width="0.1159%" height="15" fill="rgb(221,13,13)" fg:x="2658" fg:w="20"/><text x="15.6524%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (66 samples, 0.38%)</title><rect x="15.1533%" y="340" width="0.3825%" height="15" fill="rgb(238,131,9)" fg:x="2615" fg:w="66"/><text x="15.4033%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (170 samples, 0.99%)</title><rect x="14.6317%" y="324" width="0.9851%" height="15" fill="rgb(211,50,8)" fg:x="2525" fg:w="170"/><text x="14.8817%" y="334.50"></text></g><g><title>left_subtree_height (row.py:85) (21 samples, 0.12%)</title><rect x="15.6922%" y="340" width="0.1217%" height="15" fill="rgb(245,182,24)" fg:x="2708" fg:w="21"/><text x="15.9422%" y="350.50"></text></g><g><title>left_child (row.py:81) (20 samples, 0.12%)</title><rect x="15.6980%" y="356" width="0.1159%" height="15" fill="rgb(242,14,37)" fg:x="2709" fg:w="20"/><text x="15.9480%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (36 samples, 0.21%)</title><rect x="15.6922%" y="324" width="0.2086%" height="15" fill="rgb(246,228,12)" fg:x="2708" fg:w="36"/><text x="15.9422%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (537 samples, 3.11%)</title><rect x="12.8528%" y="308" width="3.1118%" height="15" fill="rgb(213,55,15)" fg:x="2218" fg:w="537"/><text x="13.1028%" y="318.50">ins..</text></g><g><title>insert (binary_tree.py:82) (22 samples, 0.13%)</title><rect x="16.0746%" y="388" width="0.1275%" height="15" fill="rgb(209,9,3)" fg:x="2774" fg:w="22"/><text x="16.3246%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (32 samples, 0.19%)</title><rect x="16.0746%" y="372" width="0.1854%" height="15" fill="rgb(230,59,30)" fg:x="2774" fg:w="32"/><text x="16.3246%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (28 samples, 0.16%)</title><rect x="16.2659%" y="372" width="0.1623%" height="15" fill="rgb(209,121,21)" fg:x="2807" fg:w="28"/><text x="16.5159%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (62 samples, 0.36%)</title><rect x="16.0746%" y="356" width="0.3593%" height="15" fill="rgb(220,109,13)" fg:x="2774" fg:w="62"/><text x="16.3246%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (28 samples, 0.16%)</title><rect x="16.4397%" y="372" width="0.1623%" height="15" fill="rgb(232,18,1)" fg:x="2837" fg:w="28"/><text x="16.6897%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (20 samples, 0.12%)</title><rect x="16.6889%" y="388" width="0.1159%" height="15" fill="rgb(215,41,42)" fg:x="2880" fg:w="20"/><text x="16.9389%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (37 samples, 0.21%)</title><rect x="16.6078%" y="372" width="0.2144%" height="15" fill="rgb(224,123,36)" fg:x="2866" fg:w="37"/><text x="16.8578%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (77 samples, 0.45%)</title><rect x="16.4339%" y="356" width="0.4462%" height="15" fill="rgb(240,125,3)" fg:x="2836" fg:w="77"/><text x="16.6839%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (148 samples, 0.86%)</title><rect x="16.0746%" y="340" width="0.8576%" height="15" fill="rgb(205,98,50)" fg:x="2774" fg:w="148"/><text x="16.3246%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (25 samples, 0.14%)</title><rect x="17.0018%" y="388" width="0.1449%" height="15" fill="rgb(205,185,37)" fg:x="2934" fg:w="25"/><text x="17.2518%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (36 samples, 0.21%)</title><rect x="17.0018%" y="372" width="0.2086%" height="15" fill="rgb(238,207,15)" fg:x="2934" fg:w="36"/><text x="17.2518%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (37 samples, 0.21%)</title><rect x="17.2162%" y="372" width="0.2144%" height="15" fill="rgb(213,199,42)" fg:x="2971" fg:w="37"/><text x="17.4662%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (85 samples, 0.49%)</title><rect x="17.0018%" y="356" width="0.4926%" height="15" fill="rgb(235,201,11)" fg:x="2934" fg:w="85"/><text x="17.2518%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (36 samples, 0.21%)</title><rect x="17.5117%" y="372" width="0.2086%" height="15" fill="rgb(207,46,11)" fg:x="3022" fg:w="36"/><text x="17.7617%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (38 samples, 0.22%)</title><rect x="17.7319%" y="372" width="0.2202%" height="15" fill="rgb(241,35,35)" fg:x="3060" fg:w="38"/><text x="17.9819%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (87 samples, 0.50%)</title><rect x="17.5117%" y="356" width="0.5041%" height="15" fill="rgb(243,32,47)" fg:x="3022" fg:w="87"/><text x="17.7617%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (19 samples, 0.11%)</title><rect x="18.0449%" y="356" width="0.1101%" height="15" fill="rgb(247,202,23)" fg:x="3114" fg:w="19"/><text x="18.2949%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (202 samples, 1.17%)</title><rect x="16.9960%" y="340" width="1.1705%" height="15" fill="rgb(219,102,11)" fg:x="2933" fg:w="202"/><text x="17.2460%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (27 samples, 0.16%)</title><rect x="18.1897%" y="340" width="0.1565%" height="15" fill="rgb(243,110,44)" fg:x="3139" fg:w="27"/><text x="18.4397%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (395 samples, 2.29%)</title><rect x="16.0746%" y="324" width="2.2889%" height="15" fill="rgb(222,74,54)" fg:x="2774" fg:w="395"/><text x="16.3246%" y="334.50">i..</text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="18.4621%" y="388" width="0.1391%" height="15" fill="rgb(216,99,12)" fg:x="3186" fg:w="24"/><text x="18.7121%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (31 samples, 0.18%)</title><rect x="18.4621%" y="372" width="0.1796%" height="15" fill="rgb(226,22,26)" fg:x="3186" fg:w="31"/><text x="18.7121%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (48 samples, 0.28%)</title><rect x="18.4621%" y="356" width="0.2781%" height="15" fill="rgb(217,163,10)" fg:x="3186" fg:w="48"/><text x="18.7121%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (22 samples, 0.13%)</title><rect x="18.7692%" y="372" width="0.1275%" height="15" fill="rgb(213,25,53)" fg:x="3239" fg:w="22"/><text x="19.0192%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="18.8967%" y="372" width="0.1333%" height="15" fill="rgb(252,105,26)" fg:x="3261" fg:w="23"/><text x="19.1467%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (55 samples, 0.32%)</title><rect x="18.7692%" y="356" width="0.3187%" height="15" fill="rgb(220,39,43)" fg:x="3239" fg:w="55"/><text x="19.0192%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (117 samples, 0.68%)</title><rect x="18.4621%" y="340" width="0.6780%" height="15" fill="rgb(229,68,48)" fg:x="3186" fg:w="117"/><text x="18.7121%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (32 samples, 0.19%)</title><rect x="19.1864%" y="356" width="0.1854%" height="15" fill="rgb(252,8,32)" fg:x="3311" fg:w="32"/><text x="19.4364%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="19.4704%" y="388" width="0.1101%" height="15" fill="rgb(223,20,43)" fg:x="3360" fg:w="19"/><text x="19.7204%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (29 samples, 0.17%)</title><rect x="19.4704%" y="372" width="0.1680%" height="15" fill="rgb(229,81,49)" fg:x="3360" fg:w="29"/><text x="19.7204%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (57 samples, 0.33%)</title><rect x="19.3892%" y="356" width="0.3303%" height="15" fill="rgb(236,28,36)" fg:x="3346" fg:w="57"/><text x="19.6392%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (108 samples, 0.63%)</title><rect x="19.1864%" y="340" width="0.6258%" height="15" fill="rgb(249,185,26)" fg:x="3311" fg:w="108"/><text x="19.4364%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (261 samples, 1.51%)</title><rect x="18.4621%" y="324" width="1.5124%" height="15" fill="rgb(249,174,33)" fg:x="3186" fg:w="261"/><text x="18.7121%" y="334.50"></text></g><g><title>left_subtree_height (row.py:85) (19 samples, 0.11%)</title><rect x="20.0035%" y="340" width="0.1101%" height="15" fill="rgb(233,201,37)" fg:x="3452" fg:w="19"/><text x="20.2535%" y="350.50"></text></g><g><title>left_child (row.py:81) (19 samples, 0.11%)</title><rect x="20.0035%" y="356" width="0.1101%" height="15" fill="rgb(221,78,26)" fg:x="3452" fg:w="19"/><text x="20.2535%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (46 samples, 0.27%)</title><rect x="20.0035%" y="324" width="0.2666%" height="15" fill="rgb(250,127,30)" fg:x="3452" fg:w="46"/><text x="20.2535%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (27 samples, 0.16%)</title><rect x="20.1136%" y="340" width="0.1565%" height="15" fill="rgb(230,49,44)" fg:x="3471" fg:w="27"/><text x="20.3636%" y="350.50"></text></g><g><title>right_child (row.py:77) (27 samples, 0.16%)</title><rect x="20.1136%" y="356" width="0.1565%" height="15" fill="rgb(229,67,23)" fg:x="3471" fg:w="27"/><text x="20.3636%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (20 samples, 0.12%)</title><rect x="20.1541%" y="372" width="0.1159%" height="15" fill="rgb(249,83,47)" fg:x="3478" fg:w="20"/><text x="20.4041%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (735 samples, 4.26%)</title><rect x="16.0688%" y="308" width="4.2591%" height="15" fill="rgb(215,43,3)" fg:x="2773" fg:w="735"/><text x="16.3188%" y="318.50">inser..</text></g><g><title>fetch_row (row.py:160) (24 samples, 0.14%)</title><rect x="20.4729%" y="356" width="0.1391%" height="15" fill="rgb(238,154,13)" fg:x="3533" fg:w="24"/><text x="20.7229%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (33 samples, 0.19%)</title><rect x="20.4265%" y="324" width="0.1912%" height="15" fill="rgb(219,56,2)" fg:x="3525" fg:w="33"/><text x="20.6765%" y="334.50"></text></g><g><title>left_child (row.py:81) (33 samples, 0.19%)</title><rect x="20.4265%" y="340" width="0.1912%" height="15" fill="rgb(233,0,4)" fg:x="3525" fg:w="33"/><text x="20.6765%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (27 samples, 0.16%)</title><rect x="20.6699%" y="356" width="0.1565%" height="15" fill="rgb(235,30,7)" fg:x="3567" fg:w="27"/><text x="20.9199%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (70 samples, 0.41%)</title><rect x="20.4265%" y="308" width="0.4056%" height="15" fill="rgb(250,79,13)" fg:x="3525" fg:w="70"/><text x="20.6765%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (37 samples, 0.21%)</title><rect x="20.6177%" y="324" width="0.2144%" height="15" fill="rgb(211,146,34)" fg:x="3558" fg:w="37"/><text x="20.8677%" y="334.50"></text></g><g><title>right_child (row.py:77) (36 samples, 0.21%)</title><rect x="20.6235%" y="340" width="0.2086%" height="15" fill="rgb(228,22,38)" fg:x="3559" fg:w="36"/><text x="20.8735%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (25 samples, 0.14%)</title><rect x="20.9306%" y="324" width="0.1449%" height="15" fill="rgb(235,168,5)" fg:x="3612" fg:w="25"/><text x="21.1806%" y="334.50"></text></g><g><title>insert (binary_tree.py:89) (1,431 samples, 8.29%)</title><rect x="12.8238%" y="292" width="8.2923%" height="15" fill="rgb(221,155,16)" fg:x="2213" fg:w="1431"/><text x="13.0738%" y="302.50">insert (bina..</text></g><g><title>right_child (row.py:77) (49 samples, 0.28%)</title><rect x="20.8321%" y="308" width="0.2839%" height="15" fill="rgb(215,215,53)" fg:x="3595" fg:w="49"/><text x="21.0821%" y="318.50"></text></g><g><title>fetch_row (row.py:160) (27 samples, 0.16%)</title><rect x="21.1972%" y="340" width="0.1565%" height="15" fill="rgb(223,4,10)" fg:x="3658" fg:w="27"/><text x="21.4472%" y="350.50"></text></g><g><title>insert (binary_tree.py:92) (42 samples, 0.24%)</title><rect x="21.1161%" y="292" width="0.2434%" height="15" fill="rgb(234,103,6)" fg:x="3644" fg:w="42"/><text x="21.3661%" y="302.50"></text></g><g><title>right_subtree_height (row.py:89) (41 samples, 0.24%)</title><rect x="21.1219%" y="308" width="0.2376%" height="15" fill="rgb(227,97,0)" fg:x="3645" fg:w="41"/><text x="21.3719%" y="318.50"></text></g><g><title>right_child (row.py:77) (39 samples, 0.23%)</title><rect x="21.1335%" y="324" width="0.2260%" height="15" fill="rgb(234,150,53)" fg:x="3647" fg:w="39"/><text x="21.3835%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (50 samples, 0.29%)</title><rect x="21.5275%" y="340" width="0.2897%" height="15" fill="rgb(228,201,54)" fg:x="3715" fg:w="50"/><text x="21.7775%" y="350.50"></text></g><g><title>deserialize (row.py:147) (19 samples, 0.11%)</title><rect x="21.7071%" y="356" width="0.1101%" height="15" fill="rgb(222,22,37)" fg:x="3746" fg:w="19"/><text x="21.9571%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (73 samples, 0.42%)</title><rect x="21.4580%" y="308" width="0.4230%" height="15" fill="rgb(237,53,32)" fg:x="3703" fg:w="73"/><text x="21.7080%" y="318.50"></text></g><g><title>left_child (row.py:81) (73 samples, 0.42%)</title><rect x="21.4580%" y="324" width="0.4230%" height="15" fill="rgb(233,25,53)" fg:x="3703" fg:w="73"/><text x="21.7080%" y="334.50"></text></g><g><title>deserialize (row.py:147) (19 samples, 0.11%)</title><rect x="22.1823%" y="356" width="0.1101%" height="15" fill="rgb(210,40,34)" fg:x="3828" fg:w="19"/><text x="22.4323%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (56 samples, 0.32%)</title><rect x="21.9737%" y="340" width="0.3245%" height="15" fill="rgb(241,220,44)" fg:x="3792" fg:w="56"/><text x="22.2237%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (157 samples, 0.91%)</title><rect x="21.4522%" y="292" width="0.9098%" height="15" fill="rgb(235,28,35)" fg:x="3702" fg:w="157"/><text x="21.7022%" y="302.50"></text></g><g><title>right_subtree_height (row.py:89) (83 samples, 0.48%)</title><rect x="21.8810%" y="308" width="0.4810%" height="15" fill="rgb(210,56,17)" fg:x="3776" fg:w="83"/><text x="22.1310%" y="318.50"></text></g><g><title>right_child (row.py:77) (79 samples, 0.46%)</title><rect x="21.9042%" y="324" width="0.4578%" height="15" fill="rgb(224,130,29)" fg:x="3780" fg:w="79"/><text x="22.1542%" y="334.50"></text></g><g><title>fetch_row (row.py:158) (19 samples, 0.11%)</title><rect x="22.4083%" y="308" width="0.1101%" height="15" fill="rgb(235,212,8)" fg:x="3867" fg:w="19"/><text x="22.6583%" y="318.50"></text></g><g><title>deserialize (row.py:142) (26 samples, 0.15%)</title><rect x="22.6864%" y="324" width="0.1507%" height="15" fill="rgb(223,33,50)" fg:x="3915" fg:w="26"/><text x="22.9364%" y="334.50"></text></g><g><title>deserialize (row.py:147) (36 samples, 0.21%)</title><rect x="22.9878%" y="324" width="0.2086%" height="15" fill="rgb(219,149,13)" fg:x="3967" fg:w="36"/><text x="23.2378%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (117 samples, 0.68%)</title><rect x="22.5416%" y="308" width="0.6780%" height="15" fill="rgb(250,156,29)" fg:x="3890" fg:w="117"/><text x="22.7916%" y="318.50"></text></g><g><title>insert (binary_tree.py:82) (3,404 samples, 19.73%)</title><rect x="3.5464%" y="276" width="19.7253%" height="15" fill="rgb(216,193,19)" fg:x="612" fg:w="3404"/><text x="3.7964%" y="286.50">insert (binary_tree.py:82)</text></g><g><title>left_child (row.py:81) (157 samples, 0.91%)</title><rect x="22.3619%" y="292" width="0.9098%" height="15" fill="rgb(216,135,14)" fg:x="3859" fg:w="157"/><text x="22.6119%" y="302.50"></text></g><g><title>fetch_row (row.py:160) (46 samples, 0.27%)</title><rect x="23.4166%" y="324" width="0.2666%" height="15" fill="rgb(241,47,5)" fg:x="4041" fg:w="46"/><text x="23.6666%" y="334.50"></text></g><g><title>insert (binary_tree.py:86) (78 samples, 0.45%)</title><rect x="23.2717%" y="276" width="0.4520%" height="15" fill="rgb(233,42,35)" fg:x="4016" fg:w="78"/><text x="23.5217%" y="286.50"></text></g><g><title>left_subtree_height (row.py:85) (73 samples, 0.42%)</title><rect x="23.3007%" y="292" width="0.4230%" height="15" fill="rgb(231,13,6)" fg:x="4021" fg:w="73"/><text x="23.5507%" y="302.50"></text></g><g><title>left_child (row.py:81) (69 samples, 0.40%)</title><rect x="23.3239%" y="308" width="0.3998%" height="15" fill="rgb(207,181,40)" fg:x="4025" fg:w="69"/><text x="23.5739%" y="318.50"></text></g><g><title>__repr__ (row.py:62) (26 samples, 0.15%)</title><rect x="23.8686%" y="308" width="0.1507%" height="15" fill="rgb(254,173,49)" fg:x="4119" fg:w="26"/><text x="24.1186%" y="318.50"></text></g><g><title>insert (binary_tree.py:76) (38 samples, 0.22%)</title><rect x="23.8164%" y="292" width="0.2202%" height="15" fill="rgb(221,1,38)" fg:x="4110" fg:w="38"/><text x="24.0664%" y="302.50"></text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="24.1873%" y="388" width="0.1391%" height="15" fill="rgb(206,124,46)" fg:x="4174" fg:w="24"/><text x="24.4373%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (46 samples, 0.27%)</title><rect x="24.1873%" y="372" width="0.2666%" height="15" fill="rgb(249,21,11)" fg:x="4174" fg:w="46"/><text x="24.4373%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (73 samples, 0.42%)</title><rect x="24.0830%" y="356" width="0.4230%" height="15" fill="rgb(222,201,40)" fg:x="4156" fg:w="73"/><text x="24.3330%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="24.5176%" y="372" width="0.1043%" height="15" fill="rgb(235,61,29)" fg:x="4231" fg:w="18"/><text x="24.7676%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (27 samples, 0.16%)</title><rect x="24.6219%" y="372" width="0.1565%" height="15" fill="rgb(219,207,3)" fg:x="4249" fg:w="27"/><text x="24.8719%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (56 samples, 0.32%)</title><rect x="24.5118%" y="356" width="0.3245%" height="15" fill="rgb(222,56,46)" fg:x="4230" fg:w="56"/><text x="24.7618%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (143 samples, 0.83%)</title><rect x="24.0830%" y="340" width="0.8286%" height="15" fill="rgb(239,76,54)" fg:x="4156" fg:w="143"/><text x="24.3330%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (26 samples, 0.15%)</title><rect x="24.9696%" y="372" width="0.1507%" height="15" fill="rgb(231,124,27)" fg:x="4309" fg:w="26"/><text x="25.2196%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (26 samples, 0.15%)</title><rect x="25.1202%" y="388" width="0.1507%" height="15" fill="rgb(249,195,6)" fg:x="4335" fg:w="26"/><text x="25.3702%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (45 samples, 0.26%)</title><rect x="25.1202%" y="372" width="0.2608%" height="15" fill="rgb(237,174,47)" fg:x="4335" fg:w="45"/><text x="25.3702%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (77 samples, 0.45%)</title><rect x="24.9638%" y="356" width="0.4462%" height="15" fill="rgb(206,201,31)" fg:x="4308" fg:w="77"/><text x="25.2138%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (20 samples, 0.12%)</title><rect x="25.4274%" y="388" width="0.1159%" height="15" fill="rgb(231,57,52)" fg:x="4388" fg:w="20"/><text x="25.6774%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="25.5491%" y="388" width="0.1043%" height="15" fill="rgb(248,177,22)" fg:x="4409" fg:w="18"/><text x="25.7991%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (45 samples, 0.26%)</title><rect x="25.4274%" y="372" width="0.2608%" height="15" fill="rgb(215,211,37)" fg:x="4388" fg:w="45"/><text x="25.6774%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="25.6939%" y="388" width="0.1217%" height="15" fill="rgb(241,128,51)" fg:x="4434" fg:w="21"/><text x="25.9439%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (34 samples, 0.20%)</title><rect x="25.6939%" y="372" width="0.1970%" height="15" fill="rgb(227,165,31)" fg:x="4434" fg:w="34"/><text x="25.9439%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (96 samples, 0.56%)</title><rect x="25.4274%" y="356" width="0.5563%" height="15" fill="rgb(228,167,24)" fg:x="4388" fg:w="96"/><text x="25.6774%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (193 samples, 1.12%)</title><rect x="24.9638%" y="340" width="1.1184%" height="15" fill="rgb(228,143,12)" fg:x="4308" fg:w="193"/><text x="25.2138%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (370 samples, 2.14%)</title><rect x="24.0714%" y="324" width="2.1441%" height="15" fill="rgb(249,149,8)" fg:x="4154" fg:w="370"/><text x="24.3214%" y="334.50">i..</text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="26.3661%" y="372" width="0.1333%" height="15" fill="rgb(243,35,44)" fg:x="4550" fg:w="23"/><text x="26.6161%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (50 samples, 0.29%)</title><rect x="26.2618%" y="356" width="0.2897%" height="15" fill="rgb(246,89,9)" fg:x="4532" fg:w="50"/><text x="26.5118%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (37 samples, 0.21%)</title><rect x="26.5747%" y="372" width="0.2144%" height="15" fill="rgb(233,213,13)" fg:x="4586" fg:w="37"/><text x="26.8247%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="26.7949%" y="372" width="0.1101%" height="15" fill="rgb(233,141,41)" fg:x="4624" fg:w="19"/><text x="27.0449%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (65 samples, 0.38%)</title><rect x="26.5689%" y="356" width="0.3767%" height="15" fill="rgb(239,167,4)" fg:x="4585" fg:w="65"/><text x="26.8189%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (132 samples, 0.76%)</title><rect x="26.2618%" y="340" width="0.7649%" height="15" fill="rgb(209,217,16)" fg:x="4532" fg:w="132"/><text x="26.5118%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (23 samples, 0.13%)</title><rect x="27.0557%" y="372" width="0.1333%" height="15" fill="rgb(219,88,35)" fg:x="4669" fg:w="23"/><text x="27.3057%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (20 samples, 0.12%)</title><rect x="27.1890%" y="372" width="0.1159%" height="15" fill="rgb(220,193,23)" fg:x="4692" fg:w="20"/><text x="27.4390%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (51 samples, 0.30%)</title><rect x="27.0557%" y="356" width="0.2955%" height="15" fill="rgb(230,90,52)" fg:x="4669" fg:w="51"/><text x="27.3057%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (28 samples, 0.16%)</title><rect x="27.3512%" y="372" width="0.1623%" height="15" fill="rgb(252,106,19)" fg:x="4720" fg:w="28"/><text x="27.6012%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (47 samples, 0.27%)</title><rect x="27.3512%" y="356" width="0.2724%" height="15" fill="rgb(206,74,20)" fg:x="4720" fg:w="47"/><text x="27.6012%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (115 samples, 0.67%)</title><rect x="27.0557%" y="340" width="0.6664%" height="15" fill="rgb(230,138,44)" fg:x="4669" fg:w="115"/><text x="27.3057%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (272 samples, 1.58%)</title><rect x="26.2618%" y="324" width="1.5762%" height="15" fill="rgb(235,182,43)" fg:x="4532" fg:w="272"/><text x="26.5118%" y="334.50"></text></g><g><title>insert (binary_tree.py:95) (33 samples, 0.19%)</title><rect x="27.9017%" y="324" width="0.1912%" height="15" fill="rgb(242,16,51)" fg:x="4815" fg:w="33"/><text x="28.1517%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (22 samples, 0.13%)</title><rect x="27.9655%" y="340" width="0.1275%" height="15" fill="rgb(248,9,4)" fg:x="4826" fg:w="22"/><text x="28.2155%" y="350.50"></text></g><g><title>right_child (row.py:77) (22 samples, 0.13%)</title><rect x="27.9655%" y="356" width="0.1275%" height="15" fill="rgb(210,31,22)" fg:x="4826" fg:w="22"/><text x="28.2155%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (704 samples, 4.08%)</title><rect x="24.0714%" y="308" width="4.0795%" height="15" fill="rgb(239,54,39)" fg:x="4154" fg:w="704"/><text x="24.3214%" y="318.50">inse..</text></g><g><title>insert (binary_tree.py:86) (18 samples, 0.10%)</title><rect x="28.1509%" y="308" width="0.1043%" height="15" fill="rgb(230,99,41)" fg:x="4858" fg:w="18"/><text x="28.4009%" y="318.50"></text></g><g><title>insert (binary_tree.py:82) (23 samples, 0.13%)</title><rect x="28.2842%" y="388" width="0.1333%" height="15" fill="rgb(253,106,12)" fg:x="4881" fg:w="23"/><text x="28.5342%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="28.4175%" y="388" width="0.1043%" height="15" fill="rgb(213,46,41)" fg:x="4904" fg:w="18"/><text x="28.6675%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (43 samples, 0.25%)</title><rect x="28.2842%" y="372" width="0.2492%" height="15" fill="rgb(215,133,35)" fg:x="4881" fg:w="43"/><text x="28.5342%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (26 samples, 0.15%)</title><rect x="28.5507%" y="372" width="0.1507%" height="15" fill="rgb(213,28,5)" fg:x="4927" fg:w="26"/><text x="28.8007%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (81 samples, 0.47%)</title><rect x="28.2842%" y="356" width="0.4694%" height="15" fill="rgb(215,77,49)" fg:x="4881" fg:w="81"/><text x="28.5342%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (34 samples, 0.20%)</title><rect x="28.7767%" y="372" width="0.1970%" height="15" fill="rgb(248,100,22)" fg:x="4966" fg:w="34"/><text x="29.0267%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (22 samples, 0.13%)</title><rect x="28.9737%" y="388" width="0.1275%" height="15" fill="rgb(208,67,9)" fg:x="5000" fg:w="22"/><text x="29.2237%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="29.1012%" y="388" width="0.1333%" height="15" fill="rgb(219,133,21)" fg:x="5022" fg:w="23"/><text x="29.3512%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (49 samples, 0.28%)</title><rect x="28.9737%" y="372" width="0.2839%" height="15" fill="rgb(246,46,29)" fg:x="5000" fg:w="49"/><text x="29.2237%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (91 samples, 0.53%)</title><rect x="28.7709%" y="356" width="0.5273%" height="15" fill="rgb(246,185,52)" fg:x="4965" fg:w="91"/><text x="29.0209%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (192 samples, 1.11%)</title><rect x="28.2784%" y="340" width="1.1126%" height="15" fill="rgb(252,136,11)" fg:x="4880" fg:w="192"/><text x="28.5284%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (29 samples, 0.17%)</title><rect x="29.4142%" y="388" width="0.1680%" height="15" fill="rgb(219,138,53)" fg:x="5076" fg:w="29"/><text x="29.6642%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (45 samples, 0.26%)</title><rect x="29.4142%" y="372" width="0.2608%" height="15" fill="rgb(211,51,23)" fg:x="5076" fg:w="45"/><text x="29.6642%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (21 samples, 0.12%)</title><rect x="29.6865%" y="372" width="0.1217%" height="15" fill="rgb(247,221,28)" fg:x="5123" fg:w="21"/><text x="29.9365%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (71 samples, 0.41%)</title><rect x="29.4142%" y="356" width="0.4114%" height="15" fill="rgb(251,222,45)" fg:x="5076" fg:w="71"/><text x="29.6642%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="29.8430%" y="388" width="0.1391%" height="15" fill="rgb(217,162,53)" fg:x="5150" fg:w="24"/><text x="30.0930%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (41 samples, 0.24%)</title><rect x="29.8430%" y="372" width="0.2376%" height="15" fill="rgb(229,93,14)" fg:x="5150" fg:w="41"/><text x="30.0930%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (25 samples, 0.14%)</title><rect x="30.0921%" y="372" width="0.1449%" height="15" fill="rgb(209,67,49)" fg:x="5193" fg:w="25"/><text x="30.3421%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (73 samples, 0.42%)</title><rect x="29.8430%" y="356" width="0.4230%" height="15" fill="rgb(213,87,29)" fg:x="5150" fg:w="73"/><text x="30.0930%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (155 samples, 0.90%)</title><rect x="29.4142%" y="340" width="0.8982%" height="15" fill="rgb(205,151,52)" fg:x="5076" fg:w="155"/><text x="29.6642%" y="350.50"></text></g><g><title>left_subtree_height (row.py:85) (20 samples, 0.12%)</title><rect x="30.3297%" y="356" width="0.1159%" height="15" fill="rgb(253,215,39)" fg:x="5234" fg:w="20"/><text x="30.5797%" y="366.50"></text></g><g><title>left_child (row.py:81) (20 samples, 0.12%)</title><rect x="30.3297%" y="372" width="0.1159%" height="15" fill="rgb(221,220,41)" fg:x="5234" fg:w="20"/><text x="30.5797%" y="382.50"></text></g><g><title>insert (binary_tree.py:95) (35 samples, 0.20%)</title><rect x="30.3297%" y="340" width="0.2028%" height="15" fill="rgb(218,133,21)" fg:x="5234" fg:w="35"/><text x="30.5797%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (393 samples, 2.28%)</title><rect x="28.2784%" y="324" width="2.2773%" height="15" fill="rgb(221,193,43)" fg:x="4880" fg:w="393"/><text x="28.5284%" y="334.50">i..</text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="30.6368%" y="388" width="0.1043%" height="15" fill="rgb(240,128,52)" fg:x="5287" fg:w="18"/><text x="30.8868%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (34 samples, 0.20%)</title><rect x="30.6368%" y="372" width="0.1970%" height="15" fill="rgb(253,114,12)" fg:x="5287" fg:w="34"/><text x="30.8868%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (29 samples, 0.17%)</title><rect x="30.8339%" y="372" width="0.1680%" height="15" fill="rgb(215,223,47)" fg:x="5321" fg:w="29"/><text x="31.0839%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (75 samples, 0.43%)</title><rect x="30.6368%" y="356" width="0.4346%" height="15" fill="rgb(248,225,23)" fg:x="5287" fg:w="75"/><text x="30.8868%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="31.0714%" y="372" width="0.1043%" height="15" fill="rgb(250,108,0)" fg:x="5362" fg:w="18"/><text x="31.3214%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="31.1758%" y="372" width="0.1101%" height="15" fill="rgb(228,208,7)" fg:x="5380" fg:w="19"/><text x="31.4258%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (41 samples, 0.24%)</title><rect x="31.0714%" y="356" width="0.2376%" height="15" fill="rgb(244,45,10)" fg:x="5362" fg:w="41"/><text x="31.3214%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (122 samples, 0.71%)</title><rect x="30.6368%" y="340" width="0.7070%" height="15" fill="rgb(207,125,25)" fg:x="5287" fg:w="122"/><text x="30.8868%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="31.4018%" y="372" width="0.1391%" height="15" fill="rgb(210,195,18)" fg:x="5419" fg:w="24"/><text x="31.6518%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (20 samples, 0.12%)</title><rect x="31.5524%" y="388" width="0.1159%" height="15" fill="rgb(249,80,12)" fg:x="5445" fg:w="20"/><text x="31.8024%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="31.6799%" y="388" width="0.1333%" height="15" fill="rgb(221,65,9)" fg:x="5467" fg:w="23"/><text x="31.9299%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (48 samples, 0.28%)</title><rect x="31.5466%" y="372" width="0.2781%" height="15" fill="rgb(235,49,36)" fg:x="5444" fg:w="48"/><text x="31.7966%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (81 samples, 0.47%)</title><rect x="31.4018%" y="356" width="0.4694%" height="15" fill="rgb(225,32,20)" fg:x="5419" fg:w="81"/><text x="31.6518%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (29 samples, 0.17%)</title><rect x="31.9812%" y="388" width="0.1680%" height="15" fill="rgb(215,141,46)" fg:x="5519" fg:w="29"/><text x="32.2312%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (54 samples, 0.31%)</title><rect x="31.8827%" y="372" width="0.3129%" height="15" fill="rgb(250,160,47)" fg:x="5502" fg:w="54"/><text x="32.1327%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (35 samples, 0.20%)</title><rect x="32.2188%" y="372" width="0.2028%" height="15" fill="rgb(216,222,40)" fg:x="5560" fg:w="35"/><text x="32.4688%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (109 samples, 0.63%)</title><rect x="31.8827%" y="356" width="0.6316%" height="15" fill="rgb(234,217,39)" fg:x="5502" fg:w="109"/><text x="32.1327%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (209 samples, 1.21%)</title><rect x="31.3960%" y="340" width="1.2111%" height="15" fill="rgb(207,178,40)" fg:x="5418" fg:w="209"/><text x="31.6460%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (29 samples, 0.17%)</title><rect x="32.6766%" y="340" width="0.1680%" height="15" fill="rgb(221,136,13)" fg:x="5639" fg:w="29"/><text x="32.9266%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (385 samples, 2.23%)</title><rect x="30.6310%" y="324" width="2.2310%" height="15" fill="rgb(249,199,10)" fg:x="5286" fg:w="385"/><text x="30.8810%" y="334.50">i..</text></g><g><title>fetch_row (row.py:160) (18 samples, 0.10%)</title><rect x="33.1054%" y="372" width="0.1043%" height="15" fill="rgb(249,222,13)" fg:x="5713" fg:w="18"/><text x="33.3554%" y="382.50"></text></g><g><title>insert (binary_tree.py:95) (40 samples, 0.23%)</title><rect x="32.9953%" y="324" width="0.2318%" height="15" fill="rgb(244,185,38)" fg:x="5694" fg:w="40"/><text x="33.2453%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (23 samples, 0.13%)</title><rect x="33.0938%" y="340" width="0.1333%" height="15" fill="rgb(236,202,9)" fg:x="5711" fg:w="23"/><text x="33.3438%" y="350.50"></text></g><g><title>right_child (row.py:77) (23 samples, 0.13%)</title><rect x="33.0938%" y="356" width="0.1333%" height="15" fill="rgb(250,229,37)" fg:x="5711" fg:w="23"/><text x="33.3438%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (864 samples, 5.01%)</title><rect x="28.2726%" y="308" width="5.0067%" height="15" fill="rgb(206,174,23)" fg:x="4879" fg:w="864"/><text x="28.5226%" y="318.50">insert..</text></g><g><title>insert (binary_tree.py:92) (20 samples, 0.12%)</title><rect x="33.2792%" y="308" width="0.1159%" height="15" fill="rgb(211,33,43)" fg:x="5743" fg:w="20"/><text x="33.5292%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (19 samples, 0.11%)</title><rect x="33.2850%" y="324" width="0.1101%" height="15" fill="rgb(245,58,50)" fg:x="5744" fg:w="19"/><text x="33.5350%" y="334.50"></text></g><g><title>right_child (row.py:77) (19 samples, 0.11%)</title><rect x="33.2850%" y="340" width="0.1101%" height="15" fill="rgb(244,68,36)" fg:x="5744" fg:w="19"/><text x="33.5350%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (32 samples, 0.19%)</title><rect x="33.5168%" y="356" width="0.1854%" height="15" fill="rgb(232,229,15)" fg:x="5784" fg:w="32"/><text x="33.7668%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (53 samples, 0.31%)</title><rect x="33.4125%" y="324" width="0.3071%" height="15" fill="rgb(254,30,23)" fg:x="5766" fg:w="53"/><text x="33.6625%" y="334.50"></text></g><g><title>left_child (row.py:81) (48 samples, 0.28%)</title><rect x="33.4415%" y="340" width="0.2781%" height="15" fill="rgb(235,160,14)" fg:x="5771" fg:w="48"/><text x="33.6915%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (42 samples, 0.24%)</title><rect x="33.7486%" y="356" width="0.2434%" height="15" fill="rgb(212,155,44)" fg:x="5824" fg:w="42"/><text x="33.9986%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (107 samples, 0.62%)</title><rect x="33.4125%" y="308" width="0.6200%" height="15" fill="rgb(226,2,50)" fg:x="5766" fg:w="107"/><text x="33.6625%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (54 samples, 0.31%)</title><rect x="33.7196%" y="324" width="0.3129%" height="15" fill="rgb(234,177,6)" fg:x="5819" fg:w="54"/><text x="33.9696%" y="334.50"></text></g><g><title>right_child (row.py:77) (53 samples, 0.31%)</title><rect x="33.7254%" y="340" width="0.3071%" height="15" fill="rgb(217,24,9)" fg:x="5820" fg:w="53"/><text x="33.9754%" y="350.50"></text></g><g><title>fetch_row (row.py:158) (21 samples, 0.12%)</title><rect x="34.0442%" y="324" width="0.1217%" height="15" fill="rgb(220,13,46)" fg:x="5875" fg:w="21"/><text x="34.2942%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (20 samples, 0.12%)</title><rect x="34.0500%" y="340" width="0.1159%" height="15" fill="rgb(239,221,27)" fg:x="5876" fg:w="20"/><text x="34.3000%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (28 samples, 0.16%)</title><rect x="34.1832%" y="324" width="0.1623%" height="15" fill="rgb(222,198,25)" fg:x="5899" fg:w="28"/><text x="34.4332%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (1,790 samples, 10.37%)</title><rect x="24.0424%" y="292" width="10.3726%" height="15" fill="rgb(211,99,13)" fg:x="4149" fg:w="1790"/><text x="24.2924%" y="302.50">insert (binary_..</text></g><g><title>left_child (row.py:81) (66 samples, 0.38%)</title><rect x="34.0326%" y="308" width="0.3825%" height="15" fill="rgb(232,111,31)" fg:x="5873" fg:w="66"/><text x="34.2826%" y="318.50"></text></g><g><title>fetch_row (row.py:160) (39 samples, 0.23%)</title><rect x="34.4904%" y="340" width="0.2260%" height="15" fill="rgb(245,82,37)" fg:x="5952" fg:w="39"/><text x="34.7404%" y="350.50"></text></g><g><title>insert (binary_tree.py:86) (56 samples, 0.32%)</title><rect x="34.4150%" y="292" width="0.3245%" height="15" fill="rgb(227,149,46)" fg:x="5939" fg:w="56"/><text x="34.6650%" y="302.50"></text></g><g><title>left_subtree_height (row.py:85) (51 samples, 0.30%)</title><rect x="34.4440%" y="308" width="0.2955%" height="15" fill="rgb(218,36,50)" fg:x="5944" fg:w="51"/><text x="34.6940%" y="318.50"></text></g><g><title>left_child (row.py:81) (49 samples, 0.28%)</title><rect x="34.4556%" y="324" width="0.2839%" height="15" fill="rgb(226,80,48)" fg:x="5946" fg:w="49"/><text x="34.7056%" y="334.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="34.7859%" y="388" width="0.1043%" height="15" fill="rgb(238,224,15)" fg:x="6003" fg:w="18"/><text x="35.0359%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (38 samples, 0.22%)</title><rect x="34.7859%" y="372" width="0.2202%" height="15" fill="rgb(241,136,10)" fg:x="6003" fg:w="38"/><text x="35.0359%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (30 samples, 0.17%)</title><rect x="35.0177%" y="372" width="0.1738%" height="15" fill="rgb(208,32,45)" fg:x="6043" fg:w="30"/><text x="35.2677%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (75 samples, 0.43%)</title><rect x="34.7859%" y="356" width="0.4346%" height="15" fill="rgb(207,135,9)" fg:x="6003" fg:w="75"/><text x="35.0359%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="35.2379%" y="404" width="0.1043%" height="15" fill="rgb(206,86,44)" fg:x="6081" fg:w="18"/><text x="35.4879%" y="414.50"></text></g><g><title>insert (binary_tree.py:82) (26 samples, 0.15%)</title><rect x="35.2379%" y="388" width="0.1507%" height="15" fill="rgb(245,177,15)" fg:x="6081" fg:w="26"/><text x="35.4879%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (47 samples, 0.27%)</title><rect x="35.2379%" y="372" width="0.2724%" height="15" fill="rgb(206,64,50)" fg:x="6081" fg:w="47"/><text x="35.4879%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="35.6029%" y="388" width="0.1101%" height="15" fill="rgb(234,36,40)" fg:x="6144" fg:w="19"/><text x="35.8529%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (34 samples, 0.20%)</title><rect x="35.5276%" y="372" width="0.1970%" height="15" fill="rgb(213,64,8)" fg:x="6131" fg:w="34"/><text x="35.7776%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (92 samples, 0.53%)</title><rect x="35.2321%" y="356" width="0.5331%" height="15" fill="rgb(210,75,36)" fg:x="6080" fg:w="92"/><text x="35.4821%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (189 samples, 1.10%)</title><rect x="34.7859%" y="340" width="1.0952%" height="15" fill="rgb(229,88,21)" fg:x="6003" fg:w="189"/><text x="35.0359%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="35.9217%" y="388" width="0.1101%" height="15" fill="rgb(252,204,47)" fg:x="6199" fg:w="19"/><text x="36.1717%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (36 samples, 0.21%)</title><rect x="36.0491%" y="388" width="0.2086%" height="15" fill="rgb(208,77,27)" fg:x="6221" fg:w="36"/><text x="36.2991%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (59 samples, 0.34%)</title><rect x="35.9217%" y="372" width="0.3419%" height="15" fill="rgb(221,76,26)" fg:x="6199" fg:w="59"/><text x="36.1717%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="36.2751%" y="388" width="0.1101%" height="15" fill="rgb(225,139,18)" fg:x="6260" fg:w="19"/><text x="36.5251%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="36.4316%" y="388" width="0.1101%" height="15" fill="rgb(230,137,11)" fg:x="6287" fg:w="19"/><text x="36.6816%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (50 samples, 0.29%)</title><rect x="36.2751%" y="372" width="0.2897%" height="15" fill="rgb(212,28,1)" fg:x="6260" fg:w="50"/><text x="36.5251%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (120 samples, 0.70%)</title><rect x="35.9217%" y="356" width="0.6954%" height="15" fill="rgb(248,164,17)" fg:x="6199" fg:w="120"/><text x="36.1717%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="36.7677%" y="388" width="0.1101%" height="15" fill="rgb(222,171,42)" fg:x="6345" fg:w="19"/><text x="37.0177%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (39 samples, 0.23%)</title><rect x="36.6692%" y="372" width="0.2260%" height="15" fill="rgb(243,84,45)" fg:x="6328" fg:w="39"/><text x="36.9192%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (19 samples, 0.11%)</title><rect x="36.9010%" y="388" width="0.1101%" height="15" fill="rgb(252,49,23)" fg:x="6368" fg:w="19"/><text x="37.1510%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (44 samples, 0.25%)</title><rect x="36.9010%" y="372" width="0.2550%" height="15" fill="rgb(215,19,7)" fg:x="6368" fg:w="44"/><text x="37.1510%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (94 samples, 0.54%)</title><rect x="36.6692%" y="356" width="0.5447%" height="15" fill="rgb(238,81,41)" fg:x="6328" fg:w="94"/><text x="36.9192%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (248 samples, 1.44%)</title><rect x="35.9217%" y="340" width="1.4371%" height="15" fill="rgb(210,199,37)" fg:x="6199" fg:w="248"/><text x="36.1717%" y="350.50"></text></g><g><title>left_subtree_height (row.py:85) (20 samples, 0.12%)</title><rect x="37.4167%" y="356" width="0.1159%" height="15" fill="rgb(244,192,49)" fg:x="6457" fg:w="20"/><text x="37.6667%" y="366.50"></text></g><g><title>left_child (row.py:81) (20 samples, 0.12%)</title><rect x="37.4167%" y="372" width="0.1159%" height="15" fill="rgb(226,211,11)" fg:x="6457" fg:w="20"/><text x="37.6667%" y="382.50"></text></g><g><title>insert (binary_tree.py:95) (27 samples, 0.16%)</title><rect x="37.4167%" y="340" width="0.1565%" height="15" fill="rgb(236,162,54)" fg:x="6457" fg:w="27"/><text x="37.6667%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (485 samples, 2.81%)</title><rect x="34.7801%" y="324" width="2.8105%" height="15" fill="rgb(220,229,9)" fg:x="6002" fg:w="485"/><text x="35.0301%" y="334.50">in..</text></g><g><title>insert (binary_tree.py:82) (22 samples, 0.13%)</title><rect x="37.6485%" y="388" width="0.1275%" height="15" fill="rgb(250,87,22)" fg:x="6497" fg:w="22"/><text x="37.8985%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (41 samples, 0.24%)</title><rect x="37.6485%" y="372" width="0.2376%" height="15" fill="rgb(239,43,17)" fg:x="6497" fg:w="41"/><text x="37.8985%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (28 samples, 0.16%)</title><rect x="37.9498%" y="388" width="0.1623%" height="15" fill="rgb(231,177,25)" fg:x="6549" fg:w="28"/><text x="38.1998%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (40 samples, 0.23%)</title><rect x="37.8977%" y="372" width="0.2318%" height="15" fill="rgb(219,179,1)" fg:x="6540" fg:w="40"/><text x="38.1477%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (90 samples, 0.52%)</title><rect x="37.6485%" y="356" width="0.5215%" height="15" fill="rgb(238,219,53)" fg:x="6497" fg:w="90"/><text x="37.8985%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="38.1816%" y="372" width="0.1217%" height="15" fill="rgb(232,167,36)" fg:x="6589" fg:w="21"/><text x="38.4316%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (45 samples, 0.26%)</title><rect x="38.1816%" y="356" width="0.2608%" height="15" fill="rgb(244,19,51)" fg:x="6589" fg:w="45"/><text x="38.4316%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (156 samples, 0.90%)</title><rect x="37.6485%" y="340" width="0.9040%" height="15" fill="rgb(224,6,22)" fg:x="6497" fg:w="156"/><text x="37.8985%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (32 samples, 0.19%)</title><rect x="38.6162%" y="372" width="0.1854%" height="15" fill="rgb(224,145,5)" fg:x="6664" fg:w="32"/><text x="38.8662%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (58 samples, 0.34%)</title><rect x="38.6162%" y="356" width="0.3361%" height="15" fill="rgb(234,130,49)" fg:x="6664" fg:w="58"/><text x="38.8662%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (24 samples, 0.14%)</title><rect x="38.9697%" y="388" width="0.1391%" height="15" fill="rgb(254,6,2)" fg:x="6725" fg:w="24"/><text x="39.2197%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (44 samples, 0.25%)</title><rect x="38.9697%" y="372" width="0.2550%" height="15" fill="rgb(208,96,46)" fg:x="6725" fg:w="44"/><text x="39.2197%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (28 samples, 0.16%)</title><rect x="39.2420%" y="372" width="0.1623%" height="15" fill="rgb(239,3,39)" fg:x="6772" fg:w="28"/><text x="39.4920%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (79 samples, 0.46%)</title><rect x="38.9697%" y="356" width="0.4578%" height="15" fill="rgb(233,210,1)" fg:x="6725" fg:w="79"/><text x="39.2197%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (154 samples, 0.89%)</title><rect x="38.6162%" y="340" width="0.8924%" height="15" fill="rgb(244,137,37)" fg:x="6664" fg:w="154"/><text x="38.8662%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (22 samples, 0.13%)</title><rect x="39.5260%" y="340" width="0.1275%" height="15" fill="rgb(240,136,2)" fg:x="6821" fg:w="22"/><text x="39.7760%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (349 samples, 2.02%)</title><rect x="37.6485%" y="324" width="2.0224%" height="15" fill="rgb(239,18,37)" fg:x="6497" fg:w="349"/><text x="37.8985%" y="334.50">i..</text></g><g><title>fetch_row (row.py:160) (25 samples, 0.14%)</title><rect x="39.8099%" y="372" width="0.1449%" height="15" fill="rgb(218,185,22)" fg:x="6870" fg:w="25"/><text x="40.0599%" y="382.50"></text></g><g><title>left_subtree_height (row.py:85) (34 samples, 0.20%)</title><rect x="39.7636%" y="340" width="0.1970%" height="15" fill="rgb(225,218,4)" fg:x="6862" fg:w="34"/><text x="40.0136%" y="350.50"></text></g><g><title>left_child (row.py:81) (34 samples, 0.20%)</title><rect x="39.7636%" y="356" width="0.1970%" height="15" fill="rgb(230,182,32)" fg:x="6862" fg:w="34"/><text x="40.0136%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (60 samples, 0.35%)</title><rect x="39.7578%" y="324" width="0.3477%" height="15" fill="rgb(242,56,43)" fg:x="6861" fg:w="60"/><text x="40.0078%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (25 samples, 0.14%)</title><rect x="39.9606%" y="340" width="0.1449%" height="15" fill="rgb(233,99,24)" fg:x="6896" fg:w="25"/><text x="40.2106%" y="350.50"></text></g><g><title>right_child (row.py:77) (25 samples, 0.14%)</title><rect x="39.9606%" y="356" width="0.1449%" height="15" fill="rgb(234,209,42)" fg:x="6896" fg:w="25"/><text x="40.2106%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (934 samples, 5.41%)</title><rect x="34.7743%" y="308" width="5.4123%" height="15" fill="rgb(227,7,12)" fg:x="6001" fg:w="934"/><text x="35.0243%" y="318.50">insert ..</text></g><g><title>fetch_row (row.py:160) (32 samples, 0.19%)</title><rect x="40.2098%" y="356" width="0.1854%" height="15" fill="rgb(245,203,43)" fg:x="6939" fg:w="32"/><text x="40.4598%" y="366.50"></text></g><g><title>insert (binary_tree.py:86) (37 samples, 0.21%)</title><rect x="40.1866%" y="308" width="0.2144%" height="15" fill="rgb(238,205,33)" fg:x="6935" fg:w="37"/><text x="40.4366%" y="318.50"></text></g><g><title>left_subtree_height (row.py:85) (36 samples, 0.21%)</title><rect x="40.1924%" y="324" width="0.2086%" height="15" fill="rgb(231,56,7)" fg:x="6936" fg:w="36"/><text x="40.4424%" y="334.50"></text></g><g><title>left_child (row.py:81) (34 samples, 0.20%)</title><rect x="40.2040%" y="340" width="0.1970%" height="15" fill="rgb(244,186,29)" fg:x="6938" fg:w="34"/><text x="40.4540%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="40.4879%" y="388" width="0.1217%" height="15" fill="rgb(234,111,31)" fg:x="6987" fg:w="21"/><text x="40.7379%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="40.6096%" y="388" width="0.1101%" height="15" fill="rgb(241,149,10)" fg:x="7008" fg:w="19"/><text x="40.8596%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (46 samples, 0.27%)</title><rect x="40.4879%" y="372" width="0.2666%" height="15" fill="rgb(249,206,44)" fg:x="6987" fg:w="46"/><text x="40.7379%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (19 samples, 0.11%)</title><rect x="40.9747%" y="404" width="0.1101%" height="15" fill="rgb(251,153,30)" fg:x="7071" fg:w="19"/><text x="41.2247%" y="414.50"></text></g><g><title>insert (binary_tree.py:89) (34 samples, 0.20%)</title><rect x="40.8936%" y="388" width="0.1970%" height="15" fill="rgb(239,152,38)" fg:x="7057" fg:w="34"/><text x="41.1436%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (61 samples, 0.35%)</title><rect x="40.7835%" y="372" width="0.3535%" height="15" fill="rgb(249,139,47)" fg:x="7038" fg:w="61"/><text x="41.0335%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (128 samples, 0.74%)</title><rect x="40.4879%" y="356" width="0.7417%" height="15" fill="rgb(244,64,35)" fg:x="6987" fg:w="128"/><text x="40.7379%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (32 samples, 0.19%)</title><rect x="41.2354%" y="372" width="0.1854%" height="15" fill="rgb(216,46,15)" fg:x="7116" fg:w="32"/><text x="41.4854%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (22 samples, 0.13%)</title><rect x="41.5252%" y="388" width="0.1275%" height="15" fill="rgb(250,74,19)" fg:x="7166" fg:w="22"/><text x="41.7752%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (38 samples, 0.22%)</title><rect x="41.4441%" y="372" width="0.2202%" height="15" fill="rgb(249,42,33)" fg:x="7152" fg:w="38"/><text x="41.6941%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (77 samples, 0.45%)</title><rect x="41.2354%" y="356" width="0.4462%" height="15" fill="rgb(242,149,17)" fg:x="7116" fg:w="77"/><text x="41.4854%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (222 samples, 1.29%)</title><rect x="40.4879%" y="340" width="1.2864%" height="15" fill="rgb(244,29,21)" fg:x="6987" fg:w="222"/><text x="40.7379%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (29 samples, 0.17%)</title><rect x="41.8207%" y="372" width="0.1680%" height="15" fill="rgb(220,130,37)" fg:x="7217" fg:w="29"/><text x="42.0707%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (25 samples, 0.14%)</title><rect x="41.9946%" y="372" width="0.1449%" height="15" fill="rgb(211,67,2)" fg:x="7247" fg:w="25"/><text x="42.2446%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (66 samples, 0.38%)</title><rect x="41.8207%" y="356" width="0.3825%" height="15" fill="rgb(235,68,52)" fg:x="7217" fg:w="66"/><text x="42.0707%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (22 samples, 0.13%)</title><rect x="42.2148%" y="372" width="0.1275%" height="15" fill="rgb(246,142,3)" fg:x="7285" fg:w="22"/><text x="42.4648%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (25 samples, 0.14%)</title><rect x="42.3422%" y="372" width="0.1449%" height="15" fill="rgb(241,25,7)" fg:x="7307" fg:w="25"/><text x="42.5922%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (48 samples, 0.28%)</title><rect x="42.2148%" y="356" width="0.2781%" height="15" fill="rgb(242,119,39)" fg:x="7285" fg:w="48"/><text x="42.4648%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (135 samples, 0.78%)</title><rect x="41.8207%" y="340" width="0.7823%" height="15" fill="rgb(241,98,45)" fg:x="7217" fg:w="135"/><text x="42.0707%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (18 samples, 0.10%)</title><rect x="42.6725%" y="340" width="0.1043%" height="15" fill="rgb(254,28,30)" fg:x="7364" fg:w="18"/><text x="42.9225%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (401 samples, 2.32%)</title><rect x="40.4879%" y="324" width="2.3237%" height="15" fill="rgb(241,142,54)" fg:x="6987" fg:w="401"/><text x="40.7379%" y="334.50">i..</text></g><g><title>insert (binary_tree.py:82) (21 samples, 0.12%)</title><rect x="42.8869%" y="388" width="0.1217%" height="15" fill="rgb(222,85,15)" fg:x="7401" fg:w="21"/><text x="43.1369%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (36 samples, 0.21%)</title><rect x="43.0086%" y="388" width="0.2086%" height="15" fill="rgb(210,85,47)" fg:x="7422" fg:w="36"/><text x="43.2586%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (59 samples, 0.34%)</title><rect x="42.8869%" y="372" width="0.3419%" height="15" fill="rgb(224,206,25)" fg:x="7401" fg:w="59"/><text x="43.1369%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (23 samples, 0.13%)</title><rect x="43.3331%" y="388" width="0.1333%" height="15" fill="rgb(243,201,19)" fg:x="7478" fg:w="23"/><text x="43.5831%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (43 samples, 0.25%)</title><rect x="43.2346%" y="372" width="0.2492%" height="15" fill="rgb(236,59,4)" fg:x="7461" fg:w="43"/><text x="43.4846%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (116 samples, 0.67%)</title><rect x="42.8869%" y="356" width="0.6722%" height="15" fill="rgb(254,179,45)" fg:x="7401" fg:w="116"/><text x="43.1369%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="43.5939%" y="372" width="0.1043%" height="15" fill="rgb(226,14,10)" fg:x="7523" fg:w="18"/><text x="43.8439%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="43.7677%" y="388" width="0.1043%" height="15" fill="rgb(244,27,41)" fg:x="7553" fg:w="18"/><text x="44.0177%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (35 samples, 0.20%)</title><rect x="43.7040%" y="372" width="0.2028%" height="15" fill="rgb(235,35,32)" fg:x="7542" fg:w="35"/><text x="43.9540%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (64 samples, 0.37%)</title><rect x="43.5881%" y="356" width="0.3709%" height="15" fill="rgb(218,68,31)" fg:x="7522" fg:w="64"/><text x="43.8381%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (202 samples, 1.17%)</title><rect x="42.8869%" y="340" width="1.1705%" height="15" fill="rgb(207,120,37)" fg:x="7401" fg:w="202"/><text x="43.1369%" y="350.50"></text></g><g><title>insert (binary_tree.py:82) (30 samples, 0.17%)</title><rect x="44.1328%" y="388" width="0.1738%" height="15" fill="rgb(227,98,0)" fg:x="7616" fg:w="30"/><text x="44.3828%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (49 samples, 0.28%)</title><rect x="44.1328%" y="372" width="0.2839%" height="15" fill="rgb(207,7,3)" fg:x="7616" fg:w="49"/><text x="44.3828%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (34 samples, 0.20%)</title><rect x="44.4283%" y="388" width="0.1970%" height="15" fill="rgb(206,98,19)" fg:x="7667" fg:w="34"/><text x="44.6783%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (18 samples, 0.10%)</title><rect x="44.6370%" y="388" width="0.1043%" height="15" fill="rgb(217,5,26)" fg:x="7703" fg:w="18"/><text x="44.8870%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (60 samples, 0.35%)</title><rect x="44.4283%" y="372" width="0.3477%" height="15" fill="rgb(235,190,38)" fg:x="7667" fg:w="60"/><text x="44.6783%" y="382.50"></text></g><g><title>insert (binary_tree.py:82) (124 samples, 0.72%)</title><rect x="44.1328%" y="356" width="0.7185%" height="15" fill="rgb(247,86,24)" fg:x="7616" fg:w="124"/><text x="44.3828%" y="366.50"></text></g><g><title>insert (binary_tree.py:82) (18 samples, 0.10%)</title><rect x="44.8630%" y="404" width="0.1043%" height="15" fill="rgb(205,101,16)" fg:x="7742" fg:w="18"/><text x="45.1130%" y="414.50"></text></g><g><title>insert (binary_tree.py:82) (29 samples, 0.17%)</title><rect x="44.8630%" y="388" width="0.1680%" height="15" fill="rgb(246,168,33)" fg:x="7742" fg:w="29"/><text x="45.1130%" y="398.50"></text></g><g><title>insert (binary_tree.py:82) (58 samples, 0.34%)</title><rect x="44.8630%" y="372" width="0.3361%" height="15" fill="rgb(231,114,1)" fg:x="7742" fg:w="58"/><text x="45.1130%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (25 samples, 0.14%)</title><rect x="45.3207%" y="388" width="0.1449%" height="15" fill="rgb(207,184,53)" fg:x="7821" fg:w="25"/><text x="45.5707%" y="398.50"></text></g><g><title>insert (binary_tree.py:89) (47 samples, 0.27%)</title><rect x="45.2164%" y="372" width="0.2724%" height="15" fill="rgb(224,95,51)" fg:x="7803" fg:w="47"/><text x="45.4664%" y="382.50"></text></g><g><title>insert (binary_tree.py:89) (114 samples, 0.66%)</title><rect x="44.8630%" y="356" width="0.6606%" height="15" fill="rgb(212,188,45)" fg:x="7742" fg:w="114"/><text x="45.1130%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (263 samples, 1.52%)</title><rect x="44.1328%" y="340" width="1.5240%" height="15" fill="rgb(223,154,38)" fg:x="7616" fg:w="263"/><text x="44.3828%" y="350.50"></text></g><g><title>insert (binary_tree.py:95) (24 samples, 0.14%)</title><rect x="45.7032%" y="340" width="0.1391%" height="15" fill="rgb(251,22,52)" fg:x="7887" fg:w="24"/><text x="45.9532%" y="350.50"></text></g><g><title>insert (binary_tree.py:89) (511 samples, 2.96%)</title><rect x="42.8869%" y="324" width="2.9611%" height="15" fill="rgb(229,209,22)" fg:x="7401" fg:w="511"/><text x="43.1369%" y="334.50">ins..</text></g><g><title>fetch_row (row.py:160) (21 samples, 0.12%)</title><rect x="45.9755%" y="372" width="0.1217%" height="15" fill="rgb(234,138,34)" fg:x="7934" fg:w="21"/><text x="46.2255%" y="382.50"></text></g><g><title>left_subtree_height (row.py:85) (29 samples, 0.17%)</title><rect x="45.9524%" y="340" width="0.1680%" height="15" fill="rgb(212,95,11)" fg:x="7930" fg:w="29"/><text x="46.2024%" y="350.50"></text></g><g><title>left_child (row.py:81) (28 samples, 0.16%)</title><rect x="45.9582%" y="356" width="0.1623%" height="15" fill="rgb(240,179,47)" fg:x="7931" fg:w="28"/><text x="46.2082%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (55 samples, 0.32%)</title><rect x="45.9524%" y="324" width="0.3187%" height="15" fill="rgb(240,163,11)" fg:x="7930" fg:w="55"/><text x="46.2024%" y="334.50"></text></g><g><title>right_subtree_height (row.py:89) (26 samples, 0.15%)</title><rect x="46.1204%" y="340" width="0.1507%" height="15" fill="rgb(236,37,12)" fg:x="7959" fg:w="26"/><text x="46.3704%" y="350.50"></text></g><g><title>right_child (row.py:77) (25 samples, 0.14%)</title><rect x="46.1262%" y="356" width="0.1449%" height="15" fill="rgb(232,164,16)" fg:x="7960" fg:w="25"/><text x="46.3762%" y="366.50"></text></g><g><title>insert (binary_tree.py:89) (1,010 samples, 5.85%)</title><rect x="40.4589%" y="308" width="5.8527%" height="15" fill="rgb(244,205,15)" fg:x="6982" fg:w="1010"/><text x="40.7089%" y="318.50">insert ..</text></g><g><title>fetch_row (row.py:160) (18 samples, 0.10%)</title><rect x="46.3348%" y="356" width="0.1043%" height="15" fill="rgb(223,117,47)" fg:x="7996" fg:w="18"/><text x="46.5848%" y="366.50"></text></g><g><title>insert (binary_tree.py:92) (25 samples, 0.14%)</title><rect x="46.3116%" y="308" width="0.1449%" height="15" fill="rgb(244,107,35)" fg:x="7992" fg:w="25"/><text x="46.5616%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (25 samples, 0.14%)</title><rect x="46.3116%" y="324" width="0.1449%" height="15" fill="rgb(205,140,8)" fg:x="7992" fg:w="25"/><text x="46.5616%" y="334.50"></text></g><g><title>right_child (row.py:77) (25 samples, 0.14%)</title><rect x="46.3116%" y="340" width="0.1449%" height="15" fill="rgb(228,84,46)" fg:x="7992" fg:w="25"/><text x="46.5616%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (42 samples, 0.24%)</title><rect x="46.5434%" y="356" width="0.2434%" height="15" fill="rgb(254,188,9)" fg:x="8032" fg:w="42"/><text x="46.7934%" y="366.50"></text></g><g><title>left_subtree_height (row.py:85) (59 samples, 0.34%)</title><rect x="46.4797%" y="324" width="0.3419%" height="15" fill="rgb(206,112,54)" fg:x="8021" fg:w="59"/><text x="46.7297%" y="334.50"></text></g><g><title>left_child (row.py:81) (56 samples, 0.32%)</title><rect x="46.4971%" y="340" width="0.3245%" height="15" fill="rgb(216,84,49)" fg:x="8024" fg:w="56"/><text x="46.7471%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (27 samples, 0.16%)</title><rect x="46.9143%" y="356" width="0.1565%" height="15" fill="rgb(214,194,35)" fg:x="8096" fg:w="27"/><text x="47.1643%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (110 samples, 0.64%)</title><rect x="46.4739%" y="308" width="0.6374%" height="15" fill="rgb(249,28,3)" fg:x="8020" fg:w="110"/><text x="46.7239%" y="318.50"></text></g><g><title>right_subtree_height (row.py:89) (50 samples, 0.29%)</title><rect x="46.8216%" y="324" width="0.2897%" height="15" fill="rgb(222,56,52)" fg:x="8080" fg:w="50"/><text x="47.0716%" y="334.50"></text></g><g><title>right_child (row.py:77) (50 samples, 0.29%)</title><rect x="46.8216%" y="340" width="0.2897%" height="15" fill="rgb(245,217,50)" fg:x="8080" fg:w="50"/><text x="47.0716%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (40 samples, 0.23%)</title><rect x="47.2794%" y="324" width="0.2318%" height="15" fill="rgb(213,201,24)" fg:x="8159" fg:w="40"/><text x="47.5294%" y="334.50"></text></g><g><title>insert (binary_tree.py:89) (2,217 samples, 12.85%)</title><rect x="34.7569%" y="292" width="12.8470%" height="15" fill="rgb(248,116,28)" fg:x="5998" fg:w="2217"/><text x="35.0069%" y="302.50">insert (binary_tree..</text></g><g><title>right_child (row.py:77) (85 samples, 0.49%)</title><rect x="47.1113%" y="308" width="0.4926%" height="15" fill="rgb(219,72,43)" fg:x="8130" fg:w="85"/><text x="47.3613%" y="318.50"></text></g><g><title>fetch_row (row.py:160) (31 samples, 0.18%)</title><rect x="47.7140%" y="340" width="0.1796%" height="15" fill="rgb(209,138,14)" fg:x="8234" fg:w="31"/><text x="47.9640%" y="350.50"></text></g><g><title>insert (binary_tree.py:92) (54 samples, 0.31%)</title><rect x="47.6039%" y="292" width="0.3129%" height="15" fill="rgb(222,18,33)" fg:x="8215" fg:w="54"/><text x="47.8539%" y="302.50"></text></g><g><title>right_subtree_height (row.py:89) (51 samples, 0.30%)</title><rect x="47.6213%" y="308" width="0.2955%" height="15" fill="rgb(213,199,7)" fg:x="8218" fg:w="51"/><text x="47.8713%" y="318.50"></text></g><g><title>right_child (row.py:77) (47 samples, 0.27%)</title><rect x="47.6444%" y="324" width="0.2724%" height="15" fill="rgb(250,110,10)" fg:x="8222" fg:w="47"/><text x="47.8944%" y="334.50"></text></g><g><title>deserialize (row.py:147) (22 samples, 0.13%)</title><rect x="48.3050%" y="356" width="0.1275%" height="15" fill="rgb(248,123,6)" fg:x="8336" fg:w="22"/><text x="48.5550%" y="366.50"></text></g><g><title>fetch_row (row.py:160) (66 samples, 0.38%)</title><rect x="48.0675%" y="340" width="0.3825%" height="15" fill="rgb(206,91,31)" fg:x="8295" fg:w="66"/><text x="48.3175%" y="350.50"></text></g><g><title>left_subtree_height (row.py:85) (88 samples, 0.51%)</title><rect x="47.9747%" y="308" width="0.5099%" height="15" fill="rgb(211,154,13)" fg:x="8279" fg:w="88"/><text x="48.2247%" y="318.50"></text></g><g><title>left_child (row.py:81) (87 samples, 0.50%)</title><rect x="47.9805%" y="324" width="0.5041%" height="15" fill="rgb(225,148,7)" fg:x="8280" fg:w="87"/><text x="48.2305%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (59 samples, 0.34%)</title><rect x="48.5716%" y="340" width="0.3419%" height="15" fill="rgb(220,160,43)" fg:x="8382" fg:w="59"/><text x="48.8216%" y="350.50"></text></g><g><title>deserialize (row.py:147) (19 samples, 0.11%)</title><rect x="48.8034%" y="356" width="0.1101%" height="15" fill="rgb(213,52,39)" fg:x="8422" fg:w="19"/><text x="49.0534%" y="366.50"></text></g><g><title>insert (binary_tree.py:95) (171 samples, 0.99%)</title><rect x="47.9747%" y="292" width="0.9909%" height="15" fill="rgb(243,137,7)" fg:x="8279" fg:w="171"/><text x="48.2247%" y="302.50"></text></g><g><title>right_subtree_height (row.py:89) (83 samples, 0.48%)</title><rect x="48.4847%" y="308" width="0.4810%" height="15" fill="rgb(230,79,13)" fg:x="8367" fg:w="83"/><text x="48.7347%" y="318.50"></text></g><g><title>right_child (row.py:77) (81 samples, 0.47%)</title><rect x="48.4963%" y="324" width="0.4694%" height="15" fill="rgb(247,105,23)" fg:x="8369" fg:w="81"/><text x="48.7463%" y="334.50"></text></g><g><title>fetch_row (row.py:158) (30 samples, 0.17%)</title><rect x="49.0236%" y="308" width="0.1738%" height="15" fill="rgb(223,179,41)" fg:x="8460" fg:w="30"/><text x="49.2736%" y="318.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (28 samples, 0.16%)</title><rect x="49.0352%" y="324" width="0.1623%" height="15" fill="rgb(218,9,34)" fg:x="8462" fg:w="28"/><text x="49.2852%" y="334.50"></text></g><g><title>fetch_row (row.py:160) (107 samples, 0.62%)</title><rect x="49.2148%" y="308" width="0.6200%" height="15" fill="rgb(222,106,8)" fg:x="8493" fg:w="107"/><text x="49.4648%" y="318.50"></text></g><g><title>deserialize (row.py:147) (36 samples, 0.21%)</title><rect x="49.6262%" y="324" width="0.2086%" height="15" fill="rgb(211,220,0)" fg:x="8564" fg:w="36"/><text x="49.8762%" y="334.50"></text></g><g><title>insert (binary_tree.py:89) (4,520 samples, 26.19%)</title><rect x="23.7990%" y="276" width="26.1923%" height="15" fill="rgb(229,52,16)" fg:x="4107" fg:w="4520"/><text x="24.0490%" y="286.50">insert (binary_tree.py:89)</text></g><g><title>right_child (row.py:77) (176 samples, 1.02%)</title><rect x="48.9714%" y="292" width="1.0199%" height="15" fill="rgb(212,155,18)" fg:x="8451" fg:w="176"/><text x="49.2214%" y="302.50"></text></g><g><title>fetch_row (row.py:161) (27 samples, 0.16%)</title><rect x="49.8348%" y="308" width="0.1565%" height="15" fill="rgb(242,21,14)" fg:x="8600" fg:w="27"/><text x="50.0848%" y="318.50"></text></g><g><title>fetch_row (row.py:158) (21 samples, 0.12%)</title><rect x="50.0377%" y="324" width="0.1217%" height="15" fill="rgb(222,19,48)" fg:x="8635" fg:w="21"/><text x="50.2877%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (20 samples, 0.12%)</title><rect x="50.0435%" y="340" width="0.1159%" height="15" fill="rgb(232,45,27)" fg:x="8636" fg:w="20"/><text x="50.2935%" y="350.50"></text></g><g><title>deserialize (row.py:147) (32 samples, 0.19%)</title><rect x="50.4027%" y="340" width="0.1854%" height="15" fill="rgb(249,103,42)" fg:x="8698" fg:w="32"/><text x="50.6527%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (76 samples, 0.44%)</title><rect x="50.1594%" y="324" width="0.4404%" height="15" fill="rgb(246,81,33)" fg:x="8656" fg:w="76"/><text x="50.4094%" y="334.50"></text></g><g><title>insert (binary_tree.py:92) (112 samples, 0.65%)</title><rect x="49.9913%" y="276" width="0.6490%" height="15" fill="rgb(252,33,42)" fg:x="8627" fg:w="112"/><text x="50.2413%" y="286.50"></text></g><g><title>right_subtree_height (row.py:89) (108 samples, 0.63%)</title><rect x="50.0145%" y="292" width="0.6258%" height="15" fill="rgb(209,212,41)" fg:x="8631" fg:w="108"/><text x="50.2645%" y="302.50"></text></g><g><title>right_child (row.py:77) (107 samples, 0.62%)</title><rect x="50.0203%" y="308" width="0.6200%" height="15" fill="rgb(207,154,6)" fg:x="8632" fg:w="107"/><text x="50.2703%" y="318.50"></text></g><g><title>insert (binary_tree.py:93) (21 samples, 0.12%)</title><rect x="50.6403%" y="276" width="0.1217%" height="15" fill="rgb(223,64,47)" fg:x="8739" fg:w="21"/><text x="50.8903%" y="286.50"></text></g><g><title>write_to_page (row.py:111) (18 samples, 0.10%)</title><rect x="50.6577%" y="292" width="0.1043%" height="15" fill="rgb(211,161,38)" fg:x="8742" fg:w="18"/><text x="50.9077%" y="302.50"></text></g><g><title>fetch_row (row.py:158) (28 samples, 0.16%)</title><rect x="50.8084%" y="324" width="0.1623%" height="15" fill="rgb(219,138,40)" fg:x="8768" fg:w="28"/><text x="51.0584%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (28 samples, 0.16%)</title><rect x="50.8084%" y="340" width="0.1623%" height="15" fill="rgb(241,228,46)" fg:x="8768" fg:w="28"/><text x="51.0584%" y="350.50"></text></g><g><title>deserialize (row.py:143) (20 samples, 0.12%)</title><rect x="51.1561%" y="340" width="0.1159%" height="15" fill="rgb(223,209,38)" fg:x="8828" fg:w="20"/><text x="51.4061%" y="350.50"></text></g><g><title>deserialize (row.py:147) (53 samples, 0.31%)</title><rect x="51.4342%" y="340" width="0.3071%" height="15" fill="rgb(236,164,45)" fg:x="8876" fg:w="53"/><text x="51.6842%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (134 samples, 0.78%)</title><rect x="50.9706%" y="324" width="0.7765%" height="15" fill="rgb(231,15,5)" fg:x="8796" fg:w="134"/><text x="51.2206%" y="334.50"></text></g><g><title>left_subtree_height (row.py:85) (192 samples, 1.11%)</title><rect x="50.7794%" y="292" width="1.1126%" height="15" fill="rgb(252,35,15)" fg:x="8763" fg:w="192"/><text x="51.0294%" y="302.50"></text></g><g><title>left_child (row.py:81) (188 samples, 1.09%)</title><rect x="50.8026%" y="308" width="1.0894%" height="15" fill="rgb(248,181,18)" fg:x="8767" fg:w="188"/><text x="51.0526%" y="318.50"></text></g><g><title>fetch_row (row.py:161) (25 samples, 0.14%)</title><rect x="51.7471%" y="324" width="0.1449%" height="15" fill="rgb(233,39,42)" fg:x="8930" fg:w="25"/><text x="51.9971%" y="334.50"></text></g><g><title>fetch_row (row.py:158) (31 samples, 0.18%)</title><rect x="51.9673%" y="324" width="0.1796%" height="15" fill="rgb(238,110,33)" fg:x="8968" fg:w="31"/><text x="52.2173%" y="334.50"></text></g><g><title>get_pager_location_from_offset (pager.py:90) (30 samples, 0.17%)</title><rect x="51.9731%" y="340" width="0.1738%" height="15" fill="rgb(233,195,10)" fg:x="8969" fg:w="30"/><text x="52.2231%" y="350.50"></text></g><g><title>deserialize (row.py:143) (19 samples, 0.11%)</title><rect x="52.3556%" y="340" width="0.1101%" height="15" fill="rgb(254,105,3)" fg:x="9035" fg:w="19"/><text x="52.6056%" y="350.50"></text></g><g><title>deserialize (row.py:147) (47 samples, 0.27%)</title><rect x="52.5758%" y="340" width="0.2724%" height="15" fill="rgb(221,225,9)" fg:x="9073" fg:w="47"/><text x="52.8258%" y="350.50"></text></g><g><title>fetch_row (row.py:160) (119 samples, 0.69%)</title><rect x="52.1643%" y="324" width="0.6896%" height="15" fill="rgb(224,227,45)" fg:x="9002" fg:w="119"/><text x="52.4143%" y="334.50"></text></g><g><title>insert (table.py:51) (8,616 samples, 49.93%)</title><rect x="3.0249%" y="260" width="49.9276%" height="15" fill="rgb(229,198,43)" fg:x="522" fg:w="8616"/><text x="3.2749%" y="270.50">insert (table.py:51)</text></g><g><title>insert (binary_tree.py:95) (378 samples, 2.19%)</title><rect x="50.7620%" y="276" width="2.1904%" height="15" fill="rgb(206,209,35)" fg:x="8760" fg:w="378"/><text x="51.0120%" y="286.50">i..</text></g><g><title>right_subtree_height (row.py:89) (183 samples, 1.06%)</title><rect x="51.8920%" y="292" width="1.0604%" height="15" fill="rgb(245,195,53)" fg:x="8955" fg:w="183"/><text x="52.1420%" y="302.50"></text></g><g><title>right_child (row.py:77) (176 samples, 1.02%)</title><rect x="51.9325%" y="308" width="1.0199%" height="15" fill="rgb(240,92,26)" fg:x="8962" fg:w="176"/><text x="52.1825%" y="318.50"></text></g><g><title>pager_flush (pager.py:124) (69 samples, 0.40%)</title><rect x="53.4450%" y="276" width="0.3998%" height="15" fill="rgb(207,40,23)" fg:x="9223" fg:w="69"/><text x="53.6950%" y="286.50"></text></g><g><title>pager_flush (pager.py:125) (204 samples, 1.18%)</title><rect x="53.8448%" y="276" width="1.1821%" height="15" fill="rgb(223,111,35)" fg:x="9292" fg:w="204"/><text x="54.0948%" y="286.50"></text></g><g><title>pager_flush (pager.py:126) (288 samples, 1.67%)</title><rect x="55.0269%" y="276" width="1.6689%" height="15" fill="rgb(229,147,28)" fg:x="9496" fg:w="288"/><text x="55.2769%" y="286.50"></text></g><g><title>pager_flush (pager.py:127) (27 samples, 0.16%)</title><rect x="56.6958%" y="276" width="0.1565%" height="15" fill="rgb(211,29,28)" fg:x="9784" fg:w="27"/><text x="56.9458%" y="286.50"></text></g><g><title>pager_flush (pager.py:128) (6,795 samples, 39.38%)</title><rect x="56.8523%" y="276" width="39.3753%" height="15" fill="rgb(228,72,33)" fg:x="9811" fg:w="6795"/><text x="57.1023%" y="286.50">pager_flush (pager.py:128)</text></g><g><title>pager_flush (pager.py:129) (158 samples, 0.92%)</title><rect x="96.2276%" y="276" width="0.9156%" height="15" fill="rgb(205,214,31)" fg:x="16606" fg:w="158"/><text x="96.4776%" y="286.50"></text></g><g><title>pager_flush (pager.py:130) (288 samples, 1.67%)</title><rect x="97.1432%" y="276" width="1.6689%" height="15" fill="rgb(224,111,15)" fg:x="16764" fg:w="288"/><text x="97.3932%" y="286.50"></text></g><g><title>test_insert_lotta_rows (db/test.py:111) (16,636 samples, 96.40%)</title><rect x="2.5960%" y="244" width="96.4015%" height="15" fill="rgb(253,21,26)" fg:x="448" fg:w="16636"/><text x="2.8460%" y="254.50">test_insert_lotta_rows (db/test.py:111)</text></g><g><title>insert (table.py:61) (7,905 samples, 45.81%)</title><rect x="53.1900%" y="260" width="45.8075%" height="15" fill="rgb(245,139,43)" fg:x="9179" fg:w="7905"/><text x="53.4400%" y="270.50">insert (table.py:61)</text></g><g><title>pager_flush (pager.py:131) (32 samples, 0.19%)</title><rect x="98.8121%" y="276" width="0.1854%" height="15" fill="rgb(252,170,7)" fg:x="17052" fg:w="32"/><text x="99.0621%" y="286.50"></text></g><g><title>traverse (binary_tree.py:140) (51 samples, 0.30%)</title><rect x="99.0091%" y="276" width="0.2955%" height="15" fill="rgb(231,118,14)" fg:x="17086" fg:w="51"/><text x="99.2591%" y="286.50"></text></g><g><title>traverse (binary_tree.py:148) (35 samples, 0.20%)</title><rect x="99.1018%" y="292" width="0.2028%" height="15" fill="rgb(238,83,0)" fg:x="17102" fg:w="35"/><text x="99.3518%" y="302.50"></text></g><g><title>traverse (binary_tree.py:148) (19 samples, 0.11%)</title><rect x="99.1945%" y="308" width="0.1101%" height="15" fill="rgb(221,39,39)" fg:x="17118" fg:w="19"/><text x="99.4445%" y="318.50"></text></g><g><title>traverse (binary_tree.py:140) (19 samples, 0.11%)</title><rect x="99.4031%" y="308" width="0.1101%" height="15" fill="rgb(222,119,46)" fg:x="17154" fg:w="19"/><text x="99.6531%" y="318.50"></text></g><g><title>traverse (binary_tree.py:140) (100 samples, 0.58%)</title><rect x="99.0091%" y="260" width="0.5795%" height="15" fill="rgb(222,165,49)" fg:x="17086" fg:w="100"/><text x="99.2591%" y="270.50"></text></g><g><title>traverse (binary_tree.py:148) (49 samples, 0.28%)</title><rect x="99.3046%" y="276" width="0.2839%" height="15" fill="rgb(219,113,52)" fg:x="17137" fg:w="49"/><text x="99.5546%" y="286.50"></text></g><g><title>traverse (binary_tree.py:148) (32 samples, 0.19%)</title><rect x="99.4031%" y="292" width="0.1854%" height="15" fill="rgb(214,7,15)" fg:x="17154" fg:w="32"/><text x="99.6531%" y="302.50"></text></g><g><title>traverse (binary_tree.py:140) (21 samples, 0.12%)</title><rect x="99.5886%" y="292" width="0.1217%" height="15" fill="rgb(235,32,4)" fg:x="17186" fg:w="21"/><text x="99.8386%" y="302.50"></text></g><g><title>traverse (binary_tree.py:140) (33 samples, 0.19%)</title><rect x="99.5886%" y="276" width="0.1912%" height="15" fill="rgb(238,90,54)" fg:x="17186" fg:w="33"/><text x="99.8386%" y="286.50"></text></g><g><title>test_insert_lotta_rows (db/test.py:117) (162 samples, 0.94%)</title><rect x="99.0091%" y="244" width="0.9387%" height="15" fill="rgb(213,208,19)" fg:x="17086" fg:w="162"/><text x="99.2591%" y="254.50"></text></g><g><title>traverse (binary_tree.py:148) (62 samples, 0.36%)</title><rect x="99.5886%" y="260" width="0.3593%" height="15" fill="rgb(233,156,4)" fg:x="17186" fg:w="62"/><text x="99.8386%" y="270.50"></text></g><g><title>traverse (binary_tree.py:148) (29 samples, 0.17%)</title><rect x="99.7798%" y="276" width="0.1680%" height="15" fill="rgb(207,194,5)" fg:x="17219" fg:w="29"/><text x="100.0298%" y="286.50"></text></g><g><title>&lt;module&gt; (db/test.py:124) (17,248 samples, 99.95%)</title><rect x="0.0058%" y="68" width="99.9478%" height="15" fill="rgb(206,111,30)" fg:x="1" fg:w="17248"/><text x="0.2558%" y="78.50">&lt;module&gt; (db/test.py:124)</text></g><g><title>__init__ (unittest/main.py:102) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="84" width="99.9189%" height="15" fill="rgb(243,70,54)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="94.50">__init__ (unittest/main.py:102)</text></g><g><title>runTests (unittest/main.py:274) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="100" width="99.9189%" height="15" fill="rgb(242,28,8)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="110.50">runTests (unittest/main.py:274)</text></g><g><title>run (unittest/runner.py:217) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="116" width="99.9189%" height="15" fill="rgb(219,106,18)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="126.50">run (unittest/runner.py:217)</text></g><g><title>__call__ (unittest/suite.py:84) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="132" width="99.9189%" height="15" fill="rgb(244,222,10)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="142.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="148" width="99.9189%" height="15" fill="rgb(236,179,52)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="158.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/suite.py:84) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="164" width="99.9189%" height="15" fill="rgb(213,23,39)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="174.50">__call__ (unittest/suite.py:84)</text></g><g><title>run (unittest/suite.py:122) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="180" width="99.9189%" height="15" fill="rgb(238,48,10)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="190.50">run (unittest/suite.py:122)</text></g><g><title>__call__ (unittest/case.py:678) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="196" width="99.9189%" height="15" fill="rgb(251,196,23)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="206.50">__call__ (unittest/case.py:678)</text></g><g><title>run (unittest/case.py:623) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="212" width="99.9189%" height="15" fill="rgb(250,152,24)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="222.50">run (unittest/case.py:623)</text></g><g><title>_callTestMethod (unittest/case.py:579) (17,243 samples, 99.92%)</title><rect x="0.0348%" y="228" width="99.9189%" height="15" fill="rgb(209,150,17)" fg:x="6" fg:w="17243"/><text x="0.2848%" y="238.50">_callTestMethod (unittest/case.py:579)</text></g><g><title>all (17,257 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="17257"/><text x="0.2500%" y="62.50"></text></g></svg></svg>